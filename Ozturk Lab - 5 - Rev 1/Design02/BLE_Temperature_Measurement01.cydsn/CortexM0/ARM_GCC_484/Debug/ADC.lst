ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,4,4
  24              		.comm	ADC_countsPer10Volt,8,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 8
  29              	ADC_channelsConfig:
  30 0000 00040000 		.word	1024
  31 0004 00040000 		.word	1024
  32              		.section	.text.ADC_Start,"ax",%progbits
  33              		.align	2
  34              		.global	ADC_Start
  35              		.code	16
  36              		.thumb_func
  37              		.type	ADC_Start, %function
  38              	ADC_Start:
  39              	.LFB2:
  40              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.10
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 2


  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u, 0x00000400u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  41              		.loc 1 64 0
  42              		.cfi_startproc
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 3


  49              		.loc 1 66 0
  50 0004 064B     		ldr	r3, .L3
  51 0006 1B78     		ldrb	r3, [r3]
  52 0008 002B     		cmp	r3, #0
  53 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  54              		.loc 1 68 0
  55 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  56              		.loc 1 69 0
  57 0010 034B     		ldr	r3, .L3
  58 0012 0122     		mov	r2, #1
  59 0014 1A70     		strb	r2, [r3]
  60              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  61              		.loc 1 71 0
  62 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  63              		.loc 1 72 0
  64 001a BD46     		mov	sp, r7
  65              		@ sp needed
  66 001c 80BD     		pop	{r7, pc}
  67              	.L4:
  68 001e C046     		.align	2
  69              	.L3:
  70 0020 00000000 		.word	ADC_initVar
  71              		.cfi_endproc
  72              	.LFE2:
  73              		.size	ADC_Start, .-ADC_Start
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB3:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 4


  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 90B5     		push	{r4, r7, lr}
  85              		.cfi_def_cfa_offset 12
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 85B0     		sub	sp, sp, #20
  90              		.cfi_def_cfa_offset 32
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****         };
 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 5


 137:.\Generated_Source\PSoC4/ADC.c **** 
 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  93              		.loc 1 140 0
  94 0006 0F20     		mov	r0, #15
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  97              		.loc 1 141 0
  98 000e 754B     		ldr	r3, .L21
  99 0010 0F20     		mov	r0, #15
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 102              		.loc 1 145 0
 103 0018 734B     		ldr	r3, .L21+4
 104 001a 0122     		mov	r2, #1
 105 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 106              		.loc 1 146 0
 107 001e 734B     		ldr	r3, .L21+8
 108 0020 724A     		ldr	r2, .L21+8
 109 0022 1168     		ldr	r1, [r2]
 147:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 148:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 110              		.loc 1 148 0
 111 0024 724A     		ldr	r2, .L21+12
 112 0026 1268     		ldr	r2, [r2]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 113              		.loc 1 146 0
 114 0028 002A     		cmp	r2, #0
 115 002a 01DA     		bge	.L6
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 116              		.loc 1 146 0 is_stmt 0 discriminator 1
 117 002c 714A     		ldr	r2, .L21+16
 118 002e 00E0     		b	.L7
 119              	.L6:
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 120              		.loc 1 146 0 discriminator 2
 121 0030 714A     		ldr	r2, .L21+20
 122              	.L7:
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 123              		.loc 1 146 0 discriminator 3
 124 0032 0A43     		orr	r2, r1
 125 0034 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 126              		.loc 1 150 0 is_stmt 1 discriminator 3
 127 0036 714B     		ldr	r3, .L21+24
 128 0038 714A     		ldr	r2, .L21+28
 129 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 130              		.loc 1 151 0 discriminator 3
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 6


 131 003c 714B     		ldr	r3, .L21+32
 132 003e 724A     		ldr	r2, .L21+36
 133 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 134              		.loc 1 152 0 discriminator 3
 135 0042 724B     		ldr	r3, .L21+40
 136 0044 0022     		mov	r2, #0
 137 0046 1A60     		str	r2, [r3]
 153:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 138              		.loc 1 153 0 discriminator 3
 139 0048 714B     		ldr	r3, .L21+44
 140 004a 724A     		ldr	r2, .L21+48
 141 004c 1A60     		str	r2, [r3]
 154:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 142              		.loc 1 154 0 discriminator 3
 143 004e 724B     		ldr	r3, .L21+52
 144 0050 704A     		ldr	r2, .L21+48
 145 0052 1A60     		str	r2, [r3]
 155:.\Generated_Source\PSoC4/ADC.c ****     
 156:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 157:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 158:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 146              		.loc 1 158 0 discriminator 3
 147 0054 714B     		ldr	r3, .L21+56
 148 0056 714A     		ldr	r2, .L21+56
 149 0058 1268     		ldr	r2, [r2]
 150 005a 8021     		mov	r1, #128
 151 005c 4902     		lsl	r1, r1, #9
 152 005e 0A43     		orr	r2, r1
 153 0060 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 160:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 161:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 154              		.loc 1 161 0 discriminator 3
 155 0062 6F4B     		ldr	r3, .L21+60
 156 0064 6E4A     		ldr	r2, .L21+60
 157 0066 1268     		ldr	r2, [r2]
 158 0068 8021     		mov	r1, #128
 159 006a 4902     		lsl	r1, r1, #9
 160 006c 0A43     		orr	r2, r1
 161 006e 1A60     		str	r2, [r3]
 162:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 163:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 164:.\Generated_Source\PSoC4/ADC.c **** 
 165:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 162              		.loc 1 165 0 discriminator 3
 163 0070 6C4B     		ldr	r3, .L21+64
 164 0072 0022     		mov	r2, #0
 165 0074 1A60     		str	r2, [r3]
 166:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 166              		.loc 1 166 0 discriminator 3
 167 0076 6C4B     		ldr	r3, .L21+68
 168 0078 0022     		mov	r2, #0
 169 007a 1A60     		str	r2, [r3]
 167:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 170              		.loc 1 167 0 discriminator 3
 171 007c 6B4B     		ldr	r3, .L21+72
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 7


 172 007e 1122     		mov	r2, #17
 173 0080 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC.c **** 
 169:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 170:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 171:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 172:.\Generated_Source\PSoC4/ADC.c **** 
 173:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 174:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 174              		.loc 1 174 0 discriminator 3
 175 0082 6B4B     		ldr	r3, .L21+76
 176 0084 1B68     		ldr	r3, [r3]
 177 0086 7B60     		str	r3, [r7, #4]
 175:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 178              		.loc 1 175 0 discriminator 3
 179 0088 7A68     		ldr	r2, [r7, #4]
 180 008a 6A4B     		ldr	r3, .L21+80
 181 008c 1340     		and	r3, r2
 182 008e 7B60     		str	r3, [r7, #4]
 176:.\Generated_Source\PSoC4/ADC.c ****     
 177:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 178:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 179:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 180:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 181:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 182:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 183:.\Generated_Source\PSoC4/ADC.c ****     #else
 184:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 185:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 183              		.loc 1 186 0 discriminator 3
 184 0090 7B68     		ldr	r3, [r7, #4]
 185 0092 0122     		mov	r2, #1
 186 0094 1343     		orr	r3, r2
 187 0096 7B60     		str	r3, [r7, #4]
 187:.\Generated_Source\PSoC4/ADC.c ****         #else
 188:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 189:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 190:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 191:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 192:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 193:.\Generated_Source\PSoC4/ADC.c ****     
 194:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 188              		.loc 1 194 0 discriminator 3
 189 0098 654B     		ldr	r3, .L21+76
 190 009a 7A68     		ldr	r2, [r7, #4]
 191 009c 1A60     		str	r2, [r3]
 195:.\Generated_Source\PSoC4/ADC.c **** 
 196:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 197:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 198:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 199:.\Generated_Source\PSoC4/ADC.c **** 
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 192              		.loc 1 200 0 discriminator 3
 193 009e 0023     		mov	r3, #0
 194 00a0 FB60     		str	r3, [r7, #12]
 195 00a2 97E0     		b	.L8
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 8


 196              	.L20:
 201:.\Generated_Source\PSoC4/ADC.c ****     {
 202:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 197              		.loc 1 202 0
 198 00a4 644B     		ldr	r3, .L21+84
 199 00a6 FA68     		ldr	r2, [r7, #12]
 200 00a8 9200     		lsl	r2, r2, #2
 201 00aa D258     		ldr	r2, [r2, r3]
 202 00ac DC23     		mov	r3, #220
 203 00ae 9B01     		lsl	r3, r3, #6
 204 00b0 1340     		and	r3, r2
 205 00b2 7B60     		str	r3, [r7, #4]
 203:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 204:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 206              		.loc 1 204 0
 207 00b4 614A     		ldr	r2, .L21+88
 208 00b6 FB68     		ldr	r3, [r7, #12]
 209 00b8 D318     		add	r3, r2, r3
 210 00ba 1B78     		ldrb	r3, [r3]
 211 00bc 7A68     		ldr	r2, [r7, #4]
 212 00be 1343     		orr	r3, r2
 213 00c0 7B60     		str	r3, [r7, #4]
 205:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 206:.\Generated_Source\PSoC4/ADC.c ****         
 207:.\Generated_Source\PSoC4/ADC.c ****         
 208:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 209:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 210:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 211:.\Generated_Source\PSoC4/ADC.c ****         */
 212:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 213:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 214:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 215:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 216:.\Generated_Source\PSoC4/ADC.c **** 
 217:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 218:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 214              		.loc 1 218 0
 215 00c2 FB68     		ldr	r3, [r7, #12]
 216 00c4 002B     		cmp	r3, #0
 217 00c6 2AD1     		bne	.L9
 219:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 220:.\Generated_Source\PSoC4/ADC.c ****         {
 221:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 218              		.loc 1 221 0
 219 00c8 FB68     		ldr	r3, [r7, #12]
 220 00ca 9B00     		lsl	r3, r3, #2
 221 00cc 5C4A     		ldr	r2, .L21+92
 222 00ce 9B18     		add	r3, r3, r2
 223 00d0 7A68     		ldr	r2, [r7, #4]
 224 00d2 1A60     		str	r2, [r3]
 222:.\Generated_Source\PSoC4/ADC.c **** 
 223:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 225              		.loc 1 223 0
 226 00d4 584B     		ldr	r3, .L21+84
 227 00d6 FA68     		ldr	r2, [r7, #12]
 228 00d8 9200     		lsl	r2, r2, #2
 229 00da D258     		ldr	r2, [r2, r3]
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 9


 230 00dc 0123     		mov	r3, #1
 231 00de 1340     		and	r3, r2
 232 00e0 0AD0     		beq	.L10
 224:.\Generated_Source\PSoC4/ADC.c ****             {
 225:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 233              		.loc 1 225 0
 234 00e2 504B     		ldr	r3, .L21+64
 235 00e4 4F4A     		ldr	r2, .L21+64
 236 00e6 1168     		ldr	r1, [r2]
 237 00e8 FA68     		ldr	r2, [r7, #12]
 238 00ea 0120     		mov	r0, #1
 239 00ec 041C     		mov	r4, r0
 240 00ee 9440     		lsl	r4, r4, r2
 241 00f0 221C     		mov	r2, r4
 242 00f2 92B2     		uxth	r2, r2
 243 00f4 0A43     		orr	r2, r1
 244 00f6 1A60     		str	r2, [r3]
 245              	.L10:
 226:.\Generated_Source\PSoC4/ADC.c ****             }
 227:.\Generated_Source\PSoC4/ADC.c **** 
 228:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 246              		.loc 1 228 0
 247 00f8 4F4B     		ldr	r3, .L21+84
 248 00fa FA68     		ldr	r2, [r7, #12]
 249 00fc 9200     		lsl	r2, r2, #2
 250 00fe D258     		ldr	r2, [r2, r3]
 251 0100 0223     		mov	r3, #2
 252 0102 1340     		and	r3, r2
 253 0104 2BD0     		beq	.L12
 229:.\Generated_Source\PSoC4/ADC.c ****             {
 230:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 254              		.loc 1 230 0
 255 0106 484B     		ldr	r3, .L21+68
 256 0108 474A     		ldr	r2, .L21+68
 257 010a 1168     		ldr	r1, [r2]
 258 010c FA68     		ldr	r2, [r7, #12]
 259 010e 0120     		mov	r0, #1
 260 0110 041C     		mov	r4, r0
 261 0112 9440     		lsl	r4, r4, r2
 262 0114 221C     		mov	r2, r4
 263 0116 92B2     		uxth	r2, r2
 264 0118 0A43     		orr	r2, r1
 265 011a 1A60     		str	r2, [r3]
 266 011c 1FE0     		b	.L12
 267              	.L9:
 231:.\Generated_Source\PSoC4/ADC.c ****             }
 232:.\Generated_Source\PSoC4/ADC.c ****         }
 233:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 234:.\Generated_Source\PSoC4/ADC.c ****             else
 235:.\Generated_Source\PSoC4/ADC.c ****             {
 236:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 268              		.loc 1 236 0
 269 011e 494B     		ldr	r3, .L21+96
 270 0120 7A68     		ldr	r2, [r7, #4]
 271 0122 8021     		mov	r1, #128
 272 0124 C905     		lsl	r1, r1, #23
 273 0126 0A43     		orr	r2, r1
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 10


 274 0128 1A60     		str	r2, [r3]
 237:.\Generated_Source\PSoC4/ADC.c **** 
 238:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 275              		.loc 1 238 0
 276 012a 434B     		ldr	r3, .L21+84
 277 012c FA68     		ldr	r2, [r7, #12]
 278 012e 9200     		lsl	r2, r2, #2
 279 0130 D258     		ldr	r2, [r2, r3]
 280 0132 0123     		mov	r3, #1
 281 0134 1340     		and	r3, r2
 282 0136 05D0     		beq	.L13
 239:.\Generated_Source\PSoC4/ADC.c ****                 {
 240:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 283              		.loc 1 240 0
 284 0138 3C4B     		ldr	r3, .L21+72
 285 013a 3C4A     		ldr	r2, .L21+72
 286 013c 1268     		ldr	r2, [r2]
 287 013e 2021     		mov	r1, #32
 288 0140 0A43     		orr	r2, r1
 289 0142 1A60     		str	r2, [r3]
 290              	.L13:
 241:.\Generated_Source\PSoC4/ADC.c ****                 }
 242:.\Generated_Source\PSoC4/ADC.c **** 
 243:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 291              		.loc 1 243 0
 292 0144 3C4B     		ldr	r3, .L21+84
 293 0146 FA68     		ldr	r2, [r7, #12]
 294 0148 9200     		lsl	r2, r2, #2
 295 014a D258     		ldr	r2, [r2, r3]
 296 014c 0223     		mov	r3, #2
 297 014e 1340     		and	r3, r2
 298 0150 05D0     		beq	.L12
 244:.\Generated_Source\PSoC4/ADC.c ****                 {
 245:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 299              		.loc 1 245 0
 300 0152 364B     		ldr	r3, .L21+72
 301 0154 354A     		ldr	r2, .L21+72
 302 0156 1268     		ldr	r2, [r2]
 303 0158 4021     		mov	r1, #64
 304 015a 0A43     		orr	r2, r1
 305 015c 1A60     		str	r2, [r3]
 306              	.L12:
 246:.\Generated_Source\PSoC4/ADC.c ****                 }
 247:.\Generated_Source\PSoC4/ADC.c ****             }
 248:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 249:.\Generated_Source\PSoC4/ADC.c **** 
 250:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 307              		.loc 1 250 0
 308 015e 364B     		ldr	r3, .L21+84
 309 0160 FA68     		ldr	r2, [r7, #12]
 310 0162 9200     		lsl	r2, r2, #2
 311 0164 D258     		ldr	r2, [r2, r3]
 312 0166 8023     		mov	r3, #128
 313 0168 9B00     		lsl	r3, r3, #2
 314 016a 1340     		and	r3, r2
 315 016c 03D0     		beq	.L14
 251:.\Generated_Source\PSoC4/ADC.c ****         {
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 11


 252:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 316              		.loc 1 252 0
 317 016e 8023     		mov	r3, #128
 318 0170 5B00     		lsl	r3, r3, #1
 319 0172 BB60     		str	r3, [r7, #8]
 320 0174 02E0     		b	.L15
 321              	.L14:
 253:.\Generated_Source\PSoC4/ADC.c ****         }
 254:.\Generated_Source\PSoC4/ADC.c ****         else
 255:.\Generated_Source\PSoC4/ADC.c ****         {
 256:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 322              		.loc 1 256 0
 323 0176 8023     		mov	r3, #128
 324 0178 5B01     		lsl	r3, r3, #5
 325 017a BB60     		str	r3, [r7, #8]
 326              	.L15:
 257:.\Generated_Source\PSoC4/ADC.c ****         }
 258:.\Generated_Source\PSoC4/ADC.c **** 
 259:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 327              		.loc 1 259 0
 328 017c 2E4B     		ldr	r3, .L21+84
 329 017e FA68     		ldr	r2, [r7, #12]
 330 0180 9200     		lsl	r2, r2, #2
 331 0182 D258     		ldr	r2, [r2, r3]
 332 0184 8023     		mov	r3, #128
 333 0186 5B00     		lsl	r3, r3, #1
 334 0188 1340     		and	r3, r2
 335 018a 05D1     		bne	.L16
 260:.\Generated_Source\PSoC4/ADC.c ****         {
 261:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 262:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 263:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 264:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 265:.\Generated_Source\PSoC4/ADC.c ****             #else
 266:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 336              		.loc 1 266 0
 337 018c 2E4B     		ldr	r3, .L21+100
 338 018e FA68     		ldr	r2, [r7, #12]
 339 0190 5200     		lsl	r2, r2, #1
 340 0192 0021     		mov	r1, #0
 341 0194 D152     		strh	r1, [r2, r3]
 342 0196 09E0     		b	.L17
 343              	.L16:
 267:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 268:.\Generated_Source\PSoC4/ADC.c ****         }
 269:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 270:.\Generated_Source\PSoC4/ADC.c ****         {
 271:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 272:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 273:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 344              		.loc 1 273 0
 345 0198 BB68     		ldr	r3, [r7, #8]
 346 019a 002B     		cmp	r3, #0
 347 019c 00DA     		bge	.L18
 348 019e 0133     		add	r3, r3, #1
 349              	.L18:
 350 01a0 5B10     		asr	r3, r3, #1
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 12


 351 01a2 99B2     		uxth	r1, r3
 352 01a4 284B     		ldr	r3, .L21+100
 353 01a6 FA68     		ldr	r2, [r7, #12]
 354 01a8 5200     		lsl	r2, r2, #1
 355 01aa D152     		strh	r1, [r2, r3]
 356              	.L17:
 274:.\Generated_Source\PSoC4/ADC.c ****             #else
 275:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 276:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 277:.\Generated_Source\PSoC4/ADC.c ****         }
 278:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 279:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 357              		.loc 1 279 0
 358 01ac BB68     		ldr	r3, [r7, #8]
 359 01ae 274A     		ldr	r2, .L21+104
 360 01b0 5343     		mul	r3, r2
 361 01b2 8022     		mov	r2, #128
 362 01b4 D200     		lsl	r2, r2, #3
 363 01b6 9B18     		add	r3, r3, r2
 280:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 364              		.loc 1 280 0
 365 01b8 002B     		cmp	r3, #0
 366 01ba 01DA     		bge	.L19
 367 01bc 244C     		ldr	r4, .L21+108
 368 01be 1B19     		add	r3, r3, r4
 369              	.L19:
 370 01c0 DB12     		asr	r3, r3, #11
 279:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 371              		.loc 1 279 0
 372 01c2 9BB2     		uxth	r3, r3
 373 01c4 19B2     		sxth	r1, r3
 374 01c6 234B     		ldr	r3, .L21+112
 375 01c8 FA68     		ldr	r2, [r7, #12]
 376 01ca 9200     		lsl	r2, r2, #2
 377 01cc D150     		str	r1, [r2, r3]
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 378              		.loc 1 200 0
 379 01ce FB68     		ldr	r3, [r7, #12]
 380 01d0 0133     		add	r3, r3, #1
 381 01d2 FB60     		str	r3, [r7, #12]
 382              	.L8:
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 383              		.loc 1 200 0 is_stmt 0 discriminator 1
 384 01d4 FB68     		ldr	r3, [r7, #12]
 385 01d6 012B     		cmp	r3, #1
 386 01d8 00D8     		bhi	.LCB317
 387 01da 63E7     		b	.L20	@long jump
 388              	.LCB317:
 281:.\Generated_Source\PSoC4/ADC.c ****     }
 282:.\Generated_Source\PSoC4/ADC.c **** }
 389              		.loc 1 282 0 is_stmt 1
 390 01dc BD46     		mov	sp, r7
 391 01de 05B0     		add	sp, sp, #20
 392              		@ sp needed
 393 01e0 90BD     		pop	{r4, r7, pc}
 394              	.L22:
 395 01e2 C046     		.align	2
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 13


 396              	.L21:
 397 01e4 00000000 		.word	ADC_ISR
 398 01e8 20003A40 		.word	1077542944
 399 01ec 00003A40 		.word	1077542912
 400 01f0 80033A40 		.word	1077543808
 401 01f4 40201013 		.word	319823936
 402 01f8 40200013 		.word	318775360
 403 01fc 04003A40 		.word	1077542916
 404 0200 C4000080 		.word	-2147483452
 405 0204 18003A40 		.word	1077542936
 406 0208 0000FF07 		.word	134152192
 407 020c 1C003A40 		.word	1077542940
 408 0210 10003A40 		.word	1077542928
 409 0214 02000200 		.word	131074
 410 0218 14003A40 		.word	1077542932
 411 021c 00033A40 		.word	1077543680
 412 0220 40033A40 		.word	1077543744
 413 0224 28023A40 		.word	1077543464
 414 0228 38023A40 		.word	1077543480
 415 022c 18023A40 		.word	1077543448
 416 0230 30003A40 		.word	1077542960
 417 0234 FFFFFFDF 		.word	-536870913
 418 0238 00000000 		.word	ADC_channelsConfig
 419 023c 08000000 		.word	ADC_InputsPlacement.4749
 420 0240 80003A40 		.word	1077543040
 421 0244 80023A40 		.word	1077543552
 422 0248 00000000 		.word	ADC_offset
 423 024c 10270000 		.word	10000
 424 0250 FF070000 		.word	2047
 425 0254 00000000 		.word	ADC_countsPer10Volt
 426              		.cfi_endproc
 427              	.LFE3:
 428              		.size	ADC_Init, .-ADC_Init
 429              		.section	.text.ADC_Enable,"ax",%progbits
 430              		.align	2
 431              		.global	ADC_Enable
 432              		.code	16
 433              		.thumb_func
 434              		.type	ADC_Enable, %function
 435              	ADC_Enable:
 436              	.LFB4:
 283:.\Generated_Source\PSoC4/ADC.c **** 
 284:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 285:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 286:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 289:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
 294:.\Generated_Source\PSoC4/ADC.c **** * Return:
 295:.\Generated_Source\PSoC4/ADC.c **** *  None.
 296:.\Generated_Source\PSoC4/ADC.c **** *
 297:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 298:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 14


 299:.\Generated_Source\PSoC4/ADC.c **** {
 437              		.loc 1 299 0
 438              		.cfi_startproc
 439 0000 80B5     		push	{r7, lr}
 440              		.cfi_def_cfa_offset 8
 441              		.cfi_offset 7, -8
 442              		.cfi_offset 14, -4
 443 0002 00AF     		add	r7, sp, #0
 444              		.cfi_def_cfa_register 7
 300:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 445              		.loc 1 300 0
 446 0004 0A4B     		ldr	r3, .L26
 447 0006 1B68     		ldr	r3, [r3]
 448 0008 002B     		cmp	r3, #0
 449 000a 0EDB     		blt	.L23
 301:.\Generated_Source\PSoC4/ADC.c ****     {
 302:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 303:.\Generated_Source\PSoC4/ADC.c **** 
 304:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 450              		.loc 1 304 0
 451 000c C046     		mov	r8, r8
 452              	.L25:
 453              		.loc 1 304 0 is_stmt 0 discriminator 1
 454 000e 094B     		ldr	r3, .L26+4
 455 0010 1B68     		ldr	r3, [r3]
 456 0012 002B     		cmp	r3, #0
 457 0014 FBDB     		blt	.L25
 305:.\Generated_Source\PSoC4/ADC.c ****             {
 306:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 307:.\Generated_Source\PSoC4/ADC.c ****             }
 308:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 309:.\Generated_Source\PSoC4/ADC.c ****         
 310:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 458              		.loc 1 310 0 is_stmt 1
 459 0016 064B     		ldr	r3, .L26
 460 0018 054A     		ldr	r2, .L26
 461 001a 1268     		ldr	r2, [r2]
 462 001c 8021     		mov	r1, #128
 463 001e 0906     		lsl	r1, r1, #24
 464 0020 0A43     		orr	r2, r1
 465 0022 1A60     		str	r2, [r3]
 311:.\Generated_Source\PSoC4/ADC.c ****         
 312:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 313:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 466              		.loc 1 313 0
 467 0024 0A20     		mov	r0, #10
 468 0026 FFF7FEFF 		bl	CyDelayUs
 469              	.L23:
 314:.\Generated_Source\PSoC4/ADC.c ****     }
 315:.\Generated_Source\PSoC4/ADC.c **** }
 470              		.loc 1 315 0
 471 002a BD46     		mov	sp, r7
 472              		@ sp needed
 473 002c 80BD     		pop	{r7, pc}
 474              	.L27:
 475 002e C046     		.align	2
 476              	.L26:
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 15


 477 0030 00003A40 		.word	1077542912
 478 0034 08023A40 		.word	1077543432
 479              		.cfi_endproc
 480              	.LFE4:
 481              		.size	ADC_Enable, .-ADC_Enable
 482              		.section	.text.ADC_Stop,"ax",%progbits
 483              		.align	2
 484              		.global	ADC_Stop
 485              		.code	16
 486              		.thumb_func
 487              		.type	ADC_Stop, %function
 488              	ADC_Stop:
 489              	.LFB5:
 316:.\Generated_Source\PSoC4/ADC.c **** 
 317:.\Generated_Source\PSoC4/ADC.c **** 
 318:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 319:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 320:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 321:.\Generated_Source\PSoC4/ADC.c **** *
 322:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 323:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 324:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** * Return:
 330:.\Generated_Source\PSoC4/ADC.c **** *  None.
 331:.\Generated_Source\PSoC4/ADC.c **** *
 332:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 333:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 334:.\Generated_Source\PSoC4/ADC.c **** {
 490              		.loc 1 334 0
 491              		.cfi_startproc
 492 0000 80B5     		push	{r7, lr}
 493              		.cfi_def_cfa_offset 8
 494              		.cfi_offset 7, -8
 495              		.cfi_offset 14, -4
 496 0002 00AF     		add	r7, sp, #0
 497              		.cfi_def_cfa_register 7
 335:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 498              		.loc 1 335 0
 499 0004 034B     		ldr	r3, .L29
 500 0006 034A     		ldr	r2, .L29
 501 0008 1268     		ldr	r2, [r2]
 502 000a 5200     		lsl	r2, r2, #1
 503 000c 5208     		lsr	r2, r2, #1
 504 000e 1A60     		str	r2, [r3]
 336:.\Generated_Source\PSoC4/ADC.c **** }
 505              		.loc 1 336 0
 506 0010 BD46     		mov	sp, r7
 507              		@ sp needed
 508 0012 80BD     		pop	{r7, pc}
 509              	.L30:
 510              		.align	2
 511              	.L29:
 512 0014 00003A40 		.word	1077542912
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 16


 513              		.cfi_endproc
 514              	.LFE5:
 515              		.size	ADC_Stop, .-ADC_Stop
 516              		.section	.text.ADC_StartConvert,"ax",%progbits
 517              		.align	2
 518              		.global	ADC_StartConvert
 519              		.code	16
 520              		.thumb_func
 521              		.type	ADC_StartConvert, %function
 522              	ADC_StartConvert:
 523              	.LFB6:
 337:.\Generated_Source\PSoC4/ADC.c **** 
 338:.\Generated_Source\PSoC4/ADC.c **** 
 339:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 340:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 341:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 342:.\Generated_Source\PSoC4/ADC.c **** *
 343:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 344:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 345:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 346:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 347:.\Generated_Source\PSoC4/ADC.c **** *
 348:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 349:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 350:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** * Return:
 356:.\Generated_Source\PSoC4/ADC.c **** *  None.
 357:.\Generated_Source\PSoC4/ADC.c **** *
 358:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 359:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 360:.\Generated_Source\PSoC4/ADC.c **** {
 524              		.loc 1 360 0
 525              		.cfi_startproc
 526 0000 80B5     		push	{r7, lr}
 527              		.cfi_def_cfa_offset 8
 528              		.cfi_offset 7, -8
 529              		.cfi_offset 14, -4
 530 0002 00AF     		add	r7, sp, #0
 531              		.cfi_def_cfa_register 7
 361:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 362:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 532              		.loc 1 362 0
 533 0004 044B     		ldr	r3, .L32
 534 0006 044A     		ldr	r2, .L32
 535 0008 1268     		ldr	r2, [r2]
 536 000a 8021     		mov	r1, #128
 537 000c 4902     		lsl	r1, r1, #9
 538 000e 0A43     		orr	r2, r1
 539 0010 1A60     		str	r2, [r3]
 363:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 364:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 365:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 366:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 17


 367:.\Generated_Source\PSoC4/ADC.c **** }
 540              		.loc 1 367 0
 541 0012 BD46     		mov	sp, r7
 542              		@ sp needed
 543 0014 80BD     		pop	{r7, pc}
 544              	.L33:
 545 0016 C046     		.align	2
 546              	.L32:
 547 0018 04003A40 		.word	1077542916
 548              		.cfi_endproc
 549              	.LFE6:
 550              		.size	ADC_StartConvert, .-ADC_StartConvert
 551              		.section	.text.ADC_StopConvert,"ax",%progbits
 552              		.align	2
 553              		.global	ADC_StopConvert
 554              		.code	16
 555              		.thumb_func
 556              		.type	ADC_StopConvert, %function
 557              	ADC_StopConvert:
 558              	.LFB7:
 368:.\Generated_Source\PSoC4/ADC.c **** 
 369:.\Generated_Source\PSoC4/ADC.c **** 
 370:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 371:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 372:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 375:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 376:.\Generated_Source\PSoC4/ADC.c **** *
 377:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** * Return:
 381:.\Generated_Source\PSoC4/ADC.c **** *  None.
 382:.\Generated_Source\PSoC4/ADC.c **** *
 383:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 384:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 385:.\Generated_Source\PSoC4/ADC.c **** {
 559              		.loc 1 385 0
 560              		.cfi_startproc
 561 0000 80B5     		push	{r7, lr}
 562              		.cfi_def_cfa_offset 8
 563              		.cfi_offset 7, -8
 564              		.cfi_offset 14, -4
 565 0002 00AF     		add	r7, sp, #0
 566              		.cfi_def_cfa_register 7
 386:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 387:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 567              		.loc 1 387 0
 568 0004 034B     		ldr	r3, .L35
 569 0006 034A     		ldr	r2, .L35
 570 0008 1168     		ldr	r1, [r2]
 571 000a 034A     		ldr	r2, .L35+4
 572 000c 0A40     		and	r2, r1
 573 000e 1A60     		str	r2, [r3]
 388:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 389:.\Generated_Source\PSoC4/ADC.c **** }
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 18


 574              		.loc 1 389 0
 575 0010 BD46     		mov	sp, r7
 576              		@ sp needed
 577 0012 80BD     		pop	{r7, pc}
 578              	.L36:
 579              		.align	2
 580              	.L35:
 581 0014 04003A40 		.word	1077542916
 582 0018 FFFFFEFF 		.word	-65537
 583              		.cfi_endproc
 584              	.LFE7:
 585              		.size	ADC_StopConvert, .-ADC_StopConvert
 586              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 587              		.align	2
 588              		.global	ADC_IsEndConversion
 589              		.code	16
 590              		.thumb_func
 591              		.type	ADC_IsEndConversion, %function
 592              	ADC_IsEndConversion:
 593              	.LFB8:
 390:.\Generated_Source\PSoC4/ADC.c **** 
 391:.\Generated_Source\PSoC4/ADC.c **** 
 392:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 393:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 394:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 395:.\Generated_Source\PSoC4/ADC.c **** *
 396:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 397:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 398:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 399:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 400:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 401:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 402:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 403:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 404:.\Generated_Source\PSoC4/ADC.c **** *
 405:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 406:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 408:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 409:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 410:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 411:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 412:.\Generated_Source\PSoC4/ADC.c **** *
 413:.\Generated_Source\PSoC4/ADC.c **** * Return:
 414:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 415:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 416:.\Generated_Source\PSoC4/ADC.c **** *
 417:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 418:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 419:.\Generated_Source\PSoC4/ADC.c **** {
 594              		.loc 1 419 0
 595              		.cfi_startproc
 596 0000 80B5     		push	{r7, lr}
 597              		.cfi_def_cfa_offset 8
 598              		.cfi_offset 7, -8
 599              		.cfi_offset 14, -4
 600 0002 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 19


 601              		.cfi_def_cfa_offset 24
 602 0004 00AF     		add	r7, sp, #0
 603              		.cfi_def_cfa_register 7
 604 0006 7860     		str	r0, [r7, #4]
 420:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 605              		.loc 1 420 0
 606 0008 0023     		mov	r3, #0
 607 000a FB60     		str	r3, [r7, #12]
 421:.\Generated_Source\PSoC4/ADC.c **** 
 422:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 608              		.loc 1 422 0
 609 000c 7A68     		ldr	r2, [r7, #4]
 610 000e 0323     		mov	r3, #3
 611 0010 1340     		and	r3, r2
 612 0012 11D0     		beq	.L38
 613              	.L40:
 423:.\Generated_Source\PSoC4/ADC.c ****     {
 424:.\Generated_Source\PSoC4/ADC.c ****         do
 425:.\Generated_Source\PSoC4/ADC.c ****         {
 426:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 614              		.loc 1 426 0 discriminator 1
 615 0014 184B     		ldr	r3, .L45
 616 0016 1A68     		ldr	r2, [r3]
 617 0018 0123     		mov	r3, #1
 618 001a 1340     		and	r3, r2
 619 001c FB60     		str	r3, [r7, #12]
 427:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 620              		.loc 1 427 0 discriminator 1
 621 001e FB68     		ldr	r3, [r7, #12]
 622 0020 002B     		cmp	r3, #0
 623 0022 03D1     		bne	.L39
 624 0024 7A68     		ldr	r2, [r7, #4]
 625 0026 0223     		mov	r3, #2
 626 0028 1340     		and	r3, r2
 627 002a F3D1     		bne	.L40
 628              	.L39:
 428:.\Generated_Source\PSoC4/ADC.c **** 
 429:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 629              		.loc 1 429 0
 630 002c FB68     		ldr	r3, [r7, #12]
 631 002e 002B     		cmp	r3, #0
 632 0030 02D0     		beq	.L38
 430:.\Generated_Source\PSoC4/ADC.c ****         {
 431:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 432:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 633              		.loc 1 432 0
 634 0032 114B     		ldr	r3, .L45
 635 0034 0122     		mov	r2, #1
 636 0036 1A60     		str	r2, [r3]
 637              	.L38:
 433:.\Generated_Source\PSoC4/ADC.c ****         }
 434:.\Generated_Source\PSoC4/ADC.c ****     }
 435:.\Generated_Source\PSoC4/ADC.c **** 
 436:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 437:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 638              		.loc 1 437 0
 639 0038 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 20


 640 003a 0C23     		mov	r3, #12
 641 003c 1340     		and	r3, r2
 642 003e 15D0     		beq	.L41
 643              	.L43:
 438:.\Generated_Source\PSoC4/ADC.c ****         {
 439:.\Generated_Source\PSoC4/ADC.c ****             do
 440:.\Generated_Source\PSoC4/ADC.c ****             {
 441:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 644              		.loc 1 441 0
 645 0040 0D4B     		ldr	r3, .L45
 646 0042 1A68     		ldr	r2, [r3]
 647 0044 1023     		mov	r3, #16
 648 0046 1340     		and	r3, r2
 649 0048 FA68     		ldr	r2, [r7, #12]
 650 004a 1343     		orr	r3, r2
 651 004c FB60     		str	r3, [r7, #12]
 442:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 652              		.loc 1 442 0
 653 004e FA68     		ldr	r2, [r7, #12]
 654 0050 1023     		mov	r3, #16
 655 0052 1340     		and	r3, r2
 443:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 656              		.loc 1 443 0
 657 0054 03D1     		bne	.L42
 658              		.loc 1 443 0 is_stmt 0 discriminator 1
 659 0056 7A68     		ldr	r2, [r7, #4]
 660 0058 0823     		mov	r3, #8
 661 005a 1340     		and	r3, r2
 442:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 662              		.loc 1 442 0 is_stmt 1 discriminator 1
 663 005c F0D1     		bne	.L43
 664              	.L42:
 444:.\Generated_Source\PSoC4/ADC.c **** 
 445:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 665              		.loc 1 445 0
 666 005e FA68     		ldr	r2, [r7, #12]
 667 0060 1023     		mov	r3, #16
 668 0062 1340     		and	r3, r2
 669 0064 02D0     		beq	.L41
 446:.\Generated_Source\PSoC4/ADC.c ****             {
 447:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 448:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 670              		.loc 1 448 0
 671 0066 044B     		ldr	r3, .L45
 672 0068 1022     		mov	r2, #16
 673 006a 1A60     		str	r2, [r3]
 674              	.L41:
 449:.\Generated_Source\PSoC4/ADC.c ****             }
 450:.\Generated_Source\PSoC4/ADC.c ****         }
 451:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 675              		.loc 1 453 0
 676 006c FB68     		ldr	r3, [r7, #12]
 454:.\Generated_Source\PSoC4/ADC.c **** }
 677              		.loc 1 454 0
 678 006e 181C     		mov	r0, r3
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 21


 679 0070 BD46     		mov	sp, r7
 680 0072 04B0     		add	sp, sp, #16
 681              		@ sp needed
 682 0074 80BD     		pop	{r7, pc}
 683              	.L46:
 684 0076 C046     		.align	2
 685              	.L45:
 686 0078 10023A40 		.word	1077543440
 687              		.cfi_endproc
 688              	.LFE8:
 689              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 690              		.section	.text.ADC_GetResult16,"ax",%progbits
 691              		.align	2
 692              		.global	ADC_GetResult16
 693              		.code	16
 694              		.thumb_func
 695              		.type	ADC_GetResult16, %function
 696              	ADC_GetResult16:
 697              	.LFB9:
 455:.\Generated_Source\PSoC4/ADC.c **** 
 456:.\Generated_Source\PSoC4/ADC.c **** 
 457:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 458:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 459:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 462:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 463:.\Generated_Source\PSoC4/ADC.c **** *
 464:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 465:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 466:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** * Return:
 469:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 470:.\Generated_Source\PSoC4/ADC.c **** *
 471:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 472:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 473:.\Generated_Source\PSoC4/ADC.c **** {
 698              		.loc 1 473 0
 699              		.cfi_startproc
 700 0000 80B5     		push	{r7, lr}
 701              		.cfi_def_cfa_offset 8
 702              		.cfi_offset 7, -8
 703              		.cfi_offset 14, -4
 704 0002 84B0     		sub	sp, sp, #16
 705              		.cfi_def_cfa_offset 24
 706 0004 00AF     		add	r7, sp, #0
 707              		.cfi_def_cfa_register 7
 708 0006 7860     		str	r0, [r7, #4]
 474:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 475:.\Generated_Source\PSoC4/ADC.c **** 
 476:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 477:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 709              		.loc 1 477 0
 710 0008 7B68     		ldr	r3, [r7, #4]
 711 000a 012B     		cmp	r3, #1
 712 000c 02D9     		bls	.L48
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 22


 713              		.loc 1 477 0 is_stmt 0 discriminator 1
 714 000e 0020     		mov	r0, #0
 715 0010 FFF7FEFF 		bl	CyHalt
 716              	.L48:
 478:.\Generated_Source\PSoC4/ADC.c **** 
 479:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 717              		.loc 1 479 0 is_stmt 1
 718 0014 7B68     		ldr	r3, [r7, #4]
 719 0016 002B     		cmp	r3, #0
 720 0018 08D1     		bne	.L49
 480:.\Generated_Source\PSoC4/ADC.c ****     {
 481:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 721              		.loc 1 481 0
 722 001a 7B68     		ldr	r3, [r7, #4]
 723 001c 9B00     		lsl	r3, r3, #2
 724 001e 094A     		ldr	r2, .L52
 725 0020 9B18     		add	r3, r3, r2
 726 0022 1B68     		ldr	r3, [r3]
 727 0024 1B04     		lsl	r3, r3, #16
 728 0026 1B0C     		lsr	r3, r3, #16
 729 0028 FB60     		str	r3, [r7, #12]
 730 002a 04E0     		b	.L50
 731              	.L49:
 482:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 483:.\Generated_Source\PSoC4/ADC.c ****     }
 484:.\Generated_Source\PSoC4/ADC.c ****     else
 485:.\Generated_Source\PSoC4/ADC.c ****     {
 486:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 487:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 732              		.loc 1 487 0
 733 002c 064B     		ldr	r3, .L52+4
 734 002e 1B68     		ldr	r3, [r3]
 735 0030 1B04     		lsl	r3, r3, #16
 736 0032 1B0C     		lsr	r3, r3, #16
 737 0034 FB60     		str	r3, [r7, #12]
 738              	.L50:
 488:.\Generated_Source\PSoC4/ADC.c ****         #else
 489:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 490:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 491:.\Generated_Source\PSoC4/ADC.c ****     }
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 739              		.loc 1 493 0
 740 0036 FB68     		ldr	r3, [r7, #12]
 741 0038 9BB2     		uxth	r3, r3
 742 003a 1BB2     		sxth	r3, r3
 494:.\Generated_Source\PSoC4/ADC.c **** }
 743              		.loc 1 494 0
 744 003c 181C     		mov	r0, r3
 745 003e BD46     		mov	sp, r7
 746 0040 04B0     		add	sp, sp, #16
 747              		@ sp needed
 748 0042 80BD     		pop	{r7, pc}
 749              	.L53:
 750              		.align	2
 751              	.L52:
 752 0044 80013A40 		.word	1077543296
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 23


 753 0048 90023A40 		.word	1077543568
 754              		.cfi_endproc
 755              	.LFE9:
 756              		.size	ADC_GetResult16, .-ADC_GetResult16
 757              		.section	.text.ADC_SetChanMask,"ax",%progbits
 758              		.align	2
 759              		.global	ADC_SetChanMask
 760              		.code	16
 761              		.thumb_func
 762              		.type	ADC_SetChanMask, %function
 763              	ADC_SetChanMask:
 764              	.LFB10:
 495:.\Generated_Source\PSoC4/ADC.c **** 
 496:.\Generated_Source\PSoC4/ADC.c **** 
 497:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 498:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 499:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 502:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 503:.\Generated_Source\PSoC4/ADC.c **** *
 504:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 506:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 507:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 508:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 509:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 510:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 511:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** * Return:
 514:.\Generated_Source\PSoC4/ADC.c **** *  None.
 515:.\Generated_Source\PSoC4/ADC.c **** *
 516:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 517:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 518:.\Generated_Source\PSoC4/ADC.c **** {
 765              		.loc 1 518 0
 766              		.cfi_startproc
 767 0000 80B5     		push	{r7, lr}
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 7, -8
 770              		.cfi_offset 14, -4
 771 0002 82B0     		sub	sp, sp, #8
 772              		.cfi_def_cfa_offset 16
 773 0004 00AF     		add	r7, sp, #0
 774              		.cfi_def_cfa_register 7
 775 0006 7860     		str	r0, [r7, #4]
 519:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 776              		.loc 1 519 0
 777 0008 034B     		ldr	r3, .L55
 778 000a 7968     		ldr	r1, [r7, #4]
 779 000c 0122     		mov	r2, #1
 780 000e 0A40     		and	r2, r1
 781 0010 1A60     		str	r2, [r3]
 520:.\Generated_Source\PSoC4/ADC.c **** }
 782              		.loc 1 520 0
 783 0012 BD46     		mov	sp, r7
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 24


 784 0014 02B0     		add	sp, sp, #8
 785              		@ sp needed
 786 0016 80BD     		pop	{r7, pc}
 787              	.L56:
 788              		.align	2
 789              	.L55:
 790 0018 20003A40 		.word	1077542944
 791              		.cfi_endproc
 792              	.LFE10:
 793              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 794              		.section	.text.ADC_EnableInjection,"ax",%progbits
 795              		.align	2
 796              		.global	ADC_EnableInjection
 797              		.code	16
 798              		.thumb_func
 799              		.type	ADC_EnableInjection, %function
 800              	ADC_EnableInjection:
 801              	.LFB11:
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 523:.\Generated_Source\PSoC4/ADC.c **** 
 524:.\Generated_Source\PSoC4/ADC.c **** 
 525:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 526:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 527:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 528:.\Generated_Source\PSoC4/ADC.c ****     *
 529:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 536:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 537:.\Generated_Source\PSoC4/ADC.c ****     *
 538:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 539:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 540:.\Generated_Source\PSoC4/ADC.c ****     {
 802              		.loc 1 540 0
 803              		.cfi_startproc
 804 0000 80B5     		push	{r7, lr}
 805              		.cfi_def_cfa_offset 8
 806              		.cfi_offset 7, -8
 807              		.cfi_offset 14, -4
 808 0002 00AF     		add	r7, sp, #0
 809              		.cfi_def_cfa_register 7
 541:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 810              		.loc 1 541 0
 811 0004 044B     		ldr	r3, .L58
 812 0006 044A     		ldr	r2, .L58
 813 0008 1268     		ldr	r2, [r2]
 814 000a 8021     		mov	r1, #128
 815 000c 0906     		lsl	r1, r1, #24
 816 000e 0A43     		orr	r2, r1
 817 0010 1A60     		str	r2, [r3]
 542:.\Generated_Source\PSoC4/ADC.c ****     }
 818              		.loc 1 542 0
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 25


 819 0012 BD46     		mov	sp, r7
 820              		@ sp needed
 821 0014 80BD     		pop	{r7, pc}
 822              	.L59:
 823 0016 C046     		.align	2
 824              	.L58:
 825 0018 80023A40 		.word	1077543552
 826              		.cfi_endproc
 827              	.LFE11:
 828              		.size	ADC_EnableInjection, .-ADC_EnableInjection
 829              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 830              		.align	2
 831              		.global	ADC_SetLowLimit
 832              		.code	16
 833              		.thumb_func
 834              		.type	ADC_SetLowLimit, %function
 835              	ADC_SetLowLimit:
 836              	.LFB12:
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 545:.\Generated_Source\PSoC4/ADC.c **** 
 546:.\Generated_Source\PSoC4/ADC.c **** 
 547:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 548:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 549:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 550:.\Generated_Source\PSoC4/ADC.c **** *
 551:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 552:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 555:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** * Return:
 558:.\Generated_Source\PSoC4/ADC.c **** *  None.
 559:.\Generated_Source\PSoC4/ADC.c **** *
 560:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 561:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 562:.\Generated_Source\PSoC4/ADC.c **** {
 837              		.loc 1 562 0
 838              		.cfi_startproc
 839 0000 80B5     		push	{r7, lr}
 840              		.cfi_def_cfa_offset 8
 841              		.cfi_offset 7, -8
 842              		.cfi_offset 14, -4
 843 0002 82B0     		sub	sp, sp, #8
 844              		.cfi_def_cfa_offset 16
 845 0004 00AF     		add	r7, sp, #0
 846              		.cfi_def_cfa_register 7
 847 0006 7860     		str	r0, [r7, #4]
 563:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 848              		.loc 1 563 0
 849 0008 084B     		ldr	r3, .L61
 850 000a 084A     		ldr	r2, .L61
 851 000c 1268     		ldr	r2, [r2]
 852 000e 120C     		lsr	r2, r2, #16
 853 0010 1204     		lsl	r2, r2, #16
 854 0012 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 26


 564:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 855              		.loc 1 564 0
 856 0014 054B     		ldr	r3, .L61
 857 0016 054A     		ldr	r2, .L61
 858 0018 1168     		ldr	r1, [r2]
 859 001a 7A68     		ldr	r2, [r7, #4]
 860 001c 1204     		lsl	r2, r2, #16
 861 001e 120C     		lsr	r2, r2, #16
 862 0020 0A43     		orr	r2, r1
 863 0022 1A60     		str	r2, [r3]
 565:.\Generated_Source\PSoC4/ADC.c **** }
 864              		.loc 1 565 0
 865 0024 BD46     		mov	sp, r7
 866 0026 02B0     		add	sp, sp, #8
 867              		@ sp needed
 868 0028 80BD     		pop	{r7, pc}
 869              	.L62:
 870 002a C046     		.align	2
 871              	.L61:
 872 002c 18003A40 		.word	1077542936
 873              		.cfi_endproc
 874              	.LFE12:
 875              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 876              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 877              		.align	2
 878              		.global	ADC_SetHighLimit
 879              		.code	16
 880              		.thumb_func
 881              		.type	ADC_SetHighLimit, %function
 882              	ADC_SetHighLimit:
 883              	.LFB13:
 566:.\Generated_Source\PSoC4/ADC.c **** 
 567:.\Generated_Source\PSoC4/ADC.c **** 
 568:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 569:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 570:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 571:.\Generated_Source\PSoC4/ADC.c **** *
 572:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 573:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 576:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** * Return:
 579:.\Generated_Source\PSoC4/ADC.c **** *  None.
 580:.\Generated_Source\PSoC4/ADC.c **** *
 581:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 582:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 583:.\Generated_Source\PSoC4/ADC.c **** {
 884              		.loc 1 583 0
 885              		.cfi_startproc
 886 0000 80B5     		push	{r7, lr}
 887              		.cfi_def_cfa_offset 8
 888              		.cfi_offset 7, -8
 889              		.cfi_offset 14, -4
 890 0002 82B0     		sub	sp, sp, #8
 891              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 27


 892 0004 00AF     		add	r7, sp, #0
 893              		.cfi_def_cfa_register 7
 894 0006 7860     		str	r0, [r7, #4]
 584:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 895              		.loc 1 584 0
 896 0008 074B     		ldr	r3, .L64
 897 000a 074A     		ldr	r2, .L64
 898 000c 1268     		ldr	r2, [r2]
 899 000e 1204     		lsl	r2, r2, #16
 900 0010 120C     		lsr	r2, r2, #16
 901 0012 1A60     		str	r2, [r3]
 585:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 902              		.loc 1 585 0
 903 0014 044B     		ldr	r3, .L64
 904 0016 044A     		ldr	r2, .L64
 905 0018 1168     		ldr	r1, [r2]
 906 001a 7A68     		ldr	r2, [r7, #4]
 907 001c 1204     		lsl	r2, r2, #16
 908 001e 0A43     		orr	r2, r1
 909 0020 1A60     		str	r2, [r3]
 586:.\Generated_Source\PSoC4/ADC.c **** }
 910              		.loc 1 586 0
 911 0022 BD46     		mov	sp, r7
 912 0024 02B0     		add	sp, sp, #8
 913              		@ sp needed
 914 0026 80BD     		pop	{r7, pc}
 915              	.L65:
 916              		.align	2
 917              	.L64:
 918 0028 18003A40 		.word	1077542936
 919              		.cfi_endproc
 920              	.LFE13:
 921              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 922              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 923              		.align	2
 924              		.global	ADC_SetLimitMask
 925              		.code	16
 926              		.thumb_func
 927              		.type	ADC_SetLimitMask, %function
 928              	ADC_SetLimitMask:
 929              	.LFB14:
 587:.\Generated_Source\PSoC4/ADC.c **** 
 588:.\Generated_Source\PSoC4/ADC.c **** 
 589:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 590:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 591:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 594:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 595:.\Generated_Source\PSoC4/ADC.c **** *
 596:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 597:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 598:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 599:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 600:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** * Return:
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 28


 603:.\Generated_Source\PSoC4/ADC.c **** *  None.
 604:.\Generated_Source\PSoC4/ADC.c **** *
 605:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 606:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 607:.\Generated_Source\PSoC4/ADC.c **** {
 930              		.loc 1 607 0
 931              		.cfi_startproc
 932 0000 80B5     		push	{r7, lr}
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 7, -8
 935              		.cfi_offset 14, -4
 936 0002 82B0     		sub	sp, sp, #8
 937              		.cfi_def_cfa_offset 16
 938 0004 00AF     		add	r7, sp, #0
 939              		.cfi_def_cfa_register 7
 940 0006 7860     		str	r0, [r7, #4]
 608:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 941              		.loc 1 608 0
 942 0008 034B     		ldr	r3, .L67
 943 000a 7968     		ldr	r1, [r7, #4]
 944 000c 0122     		mov	r2, #1
 945 000e 0A40     		and	r2, r1
 946 0010 1A60     		str	r2, [r3]
 609:.\Generated_Source\PSoC4/ADC.c **** }
 947              		.loc 1 609 0
 948 0012 BD46     		mov	sp, r7
 949 0014 02B0     		add	sp, sp, #8
 950              		@ sp needed
 951 0016 80BD     		pop	{r7, pc}
 952              	.L68:
 953              		.align	2
 954              	.L67:
 955 0018 38023A40 		.word	1077543480
 956              		.cfi_endproc
 957              	.LFE14:
 958              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 959              		.section	.text.ADC_SetSatMask,"ax",%progbits
 960              		.align	2
 961              		.global	ADC_SetSatMask
 962              		.code	16
 963              		.thumb_func
 964              		.type	ADC_SetSatMask, %function
 965              	ADC_SetSatMask:
 966              	.LFB15:
 610:.\Generated_Source\PSoC4/ADC.c **** 
 611:.\Generated_Source\PSoC4/ADC.c **** 
 612:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 613:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 614:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 617:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 618:.\Generated_Source\PSoC4/ADC.c **** *
 619:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 620:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 621:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 622:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 29


 623:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** * Return:
 626:.\Generated_Source\PSoC4/ADC.c **** *  None.
 627:.\Generated_Source\PSoC4/ADC.c **** *
 628:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 629:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 630:.\Generated_Source\PSoC4/ADC.c **** {
 967              		.loc 1 630 0
 968              		.cfi_startproc
 969 0000 80B5     		push	{r7, lr}
 970              		.cfi_def_cfa_offset 8
 971              		.cfi_offset 7, -8
 972              		.cfi_offset 14, -4
 973 0002 82B0     		sub	sp, sp, #8
 974              		.cfi_def_cfa_offset 16
 975 0004 00AF     		add	r7, sp, #0
 976              		.cfi_def_cfa_register 7
 977 0006 7860     		str	r0, [r7, #4]
 631:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 978              		.loc 1 631 0
 979 0008 034B     		ldr	r3, .L70
 980 000a 7968     		ldr	r1, [r7, #4]
 981 000c 0122     		mov	r2, #1
 982 000e 0A40     		and	r2, r1
 983 0010 1A60     		str	r2, [r3]
 632:.\Generated_Source\PSoC4/ADC.c **** }
 984              		.loc 1 632 0
 985 0012 BD46     		mov	sp, r7
 986 0014 02B0     		add	sp, sp, #8
 987              		@ sp needed
 988 0016 80BD     		pop	{r7, pc}
 989              	.L71:
 990              		.align	2
 991              	.L70:
 992 0018 28023A40 		.word	1077543464
 993              		.cfi_endproc
 994              	.LFE15:
 995              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 996              		.section	.text.ADC_SetOffset,"ax",%progbits
 997              		.align	2
 998              		.global	ADC_SetOffset
 999              		.code	16
 1000              		.thumb_func
 1001              		.type	ADC_SetOffset, %function
 1002              	ADC_SetOffset:
 1003              	.LFB16:
 633:.\Generated_Source\PSoC4/ADC.c **** 
 634:.\Generated_Source\PSoC4/ADC.c **** 
 635:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 636:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 637:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 638:.\Generated_Source\PSoC4/ADC.c **** *
 639:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 640:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 641:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 642:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 30


 643:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 644:.\Generated_Source\PSoC4/ADC.c **** *
 645:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 646:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 647:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 648:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Return:
 651:.\Generated_Source\PSoC4/ADC.c **** *  None.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 654:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 655:.\Generated_Source\PSoC4/ADC.c **** *
 656:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 657:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 658:.\Generated_Source\PSoC4/ADC.c **** {
 1004              		.loc 1 658 0
 1005              		.cfi_startproc
 1006 0000 80B5     		push	{r7, lr}
 1007              		.cfi_def_cfa_offset 8
 1008              		.cfi_offset 7, -8
 1009              		.cfi_offset 14, -4
 1010 0002 82B0     		sub	sp, sp, #8
 1011              		.cfi_def_cfa_offset 16
 1012 0004 00AF     		add	r7, sp, #0
 1013              		.cfi_def_cfa_register 7
 1014 0006 7860     		str	r0, [r7, #4]
 1015 0008 0A1C     		mov	r2, r1
 1016 000a BB1C     		add	r3, r7, #2
 1017 000c 1A80     		strh	r2, [r3]
 659:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 660:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1018              		.loc 1 660 0
 1019 000e 7B68     		ldr	r3, [r7, #4]
 1020 0010 012B     		cmp	r3, #1
 1021 0012 02D9     		bls	.L73
 1022              		.loc 1 660 0 is_stmt 0 discriminator 1
 1023 0014 0020     		mov	r0, #0
 1024 0016 FFF7FEFF 		bl	CyHalt
 1025              	.L73:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 1026              		.loc 1 662 0 is_stmt 1
 1027 001a 044B     		ldr	r3, .L74
 1028 001c 7A68     		ldr	r2, [r7, #4]
 1029 001e 5200     		lsl	r2, r2, #1
 1030 0020 B91C     		add	r1, r7, #2
 1031 0022 0988     		ldrh	r1, [r1]
 1032 0024 D152     		strh	r1, [r2, r3]
 663:.\Generated_Source\PSoC4/ADC.c **** }
 1033              		.loc 1 663 0
 1034 0026 BD46     		mov	sp, r7
 1035 0028 02B0     		add	sp, sp, #8
 1036              		@ sp needed
 1037 002a 80BD     		pop	{r7, pc}
 1038              	.L75:
 1039              		.align	2
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 31


 1040              	.L74:
 1041 002c 00000000 		.word	ADC_offset
 1042              		.cfi_endproc
 1043              	.LFE16:
 1044              		.size	ADC_SetOffset, .-ADC_SetOffset
 1045              		.section	.text.ADC_SetGain,"ax",%progbits
 1046              		.align	2
 1047              		.global	ADC_SetGain
 1048              		.code	16
 1049              		.thumb_func
 1050              		.type	ADC_SetGain, %function
 1051              	ADC_SetGain:
 1052              	.LFB17:
 664:.\Generated_Source\PSoC4/ADC.c **** 
 665:.\Generated_Source\PSoC4/ADC.c **** 
 666:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 667:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 668:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 669:.\Generated_Source\PSoC4/ADC.c **** *
 670:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 671:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 672:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 673:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 674:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 675:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 676:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 677:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 678:.\Generated_Source\PSoC4/ADC.c **** *
 679:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 680:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 681:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Return:
 684:.\Generated_Source\PSoC4/ADC.c **** *  None.
 685:.\Generated_Source\PSoC4/ADC.c **** *
 686:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 687:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 688:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 689:.\Generated_Source\PSoC4/ADC.c **** *
 690:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 691:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 692:.\Generated_Source\PSoC4/ADC.c **** {
 1053              		.loc 1 692 0
 1054              		.cfi_startproc
 1055 0000 80B5     		push	{r7, lr}
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 7, -8
 1058              		.cfi_offset 14, -4
 1059 0002 82B0     		sub	sp, sp, #8
 1060              		.cfi_def_cfa_offset 16
 1061 0004 00AF     		add	r7, sp, #0
 1062              		.cfi_def_cfa_register 7
 1063 0006 7860     		str	r0, [r7, #4]
 1064 0008 3960     		str	r1, [r7]
 693:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 694:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1065              		.loc 1 694 0
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 32


 1066 000a 7B68     		ldr	r3, [r7, #4]
 1067 000c 012B     		cmp	r3, #1
 1068 000e 02D9     		bls	.L77
 1069              		.loc 1 694 0 is_stmt 0 discriminator 1
 1070 0010 0020     		mov	r0, #0
 1071 0012 FFF7FEFF 		bl	CyHalt
 1072              	.L77:
 695:.\Generated_Source\PSoC4/ADC.c **** 
 696:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 1073              		.loc 1 696 0 is_stmt 1
 1074 0016 044B     		ldr	r3, .L78
 1075 0018 7A68     		ldr	r2, [r7, #4]
 1076 001a 9200     		lsl	r2, r2, #2
 1077 001c 3968     		ldr	r1, [r7]
 1078 001e D150     		str	r1, [r2, r3]
 697:.\Generated_Source\PSoC4/ADC.c **** }
 1079              		.loc 1 697 0
 1080 0020 BD46     		mov	sp, r7
 1081 0022 02B0     		add	sp, sp, #8
 1082              		@ sp needed
 1083 0024 80BD     		pop	{r7, pc}
 1084              	.L79:
 1085 0026 C046     		.align	2
 1086              	.L78:
 1087 0028 00000000 		.word	ADC_countsPer10Volt
 1088              		.cfi_endproc
 1089              	.LFE17:
 1090              		.size	ADC_SetGain, .-ADC_SetGain
 1091              		.global	__aeabi_idiv
 1092              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 1093              		.align	2
 1094              		.global	ADC_CountsTo_mVolts
 1095              		.code	16
 1096              		.thumb_func
 1097              		.type	ADC_CountsTo_mVolts, %function
 1098              	ADC_CountsTo_mVolts:
 1099              	.LFB18:
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 701:.\Generated_Source\PSoC4/ADC.c **** 
 702:.\Generated_Source\PSoC4/ADC.c **** 
 703:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 704:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 705:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 706:.\Generated_Source\PSoC4/ADC.c ****     *
 707:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 708:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 709:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 710:.\Generated_Source\PSoC4/ADC.c ****     *
 711:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 712:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 713:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 717:.\Generated_Source\PSoC4/ADC.c ****     *
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 33


 718:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 719:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 720:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 721:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 722:.\Generated_Source\PSoC4/ADC.c ****     *
 723:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 724:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 725:.\Generated_Source\PSoC4/ADC.c ****     {
 1100              		.loc 1 725 0
 1101              		.cfi_startproc
 1102 0000 80B5     		push	{r7, lr}
 1103              		.cfi_def_cfa_offset 8
 1104              		.cfi_offset 7, -8
 1105              		.cfi_offset 14, -4
 1106 0002 84B0     		sub	sp, sp, #16
 1107              		.cfi_def_cfa_offset 24
 1108 0004 00AF     		add	r7, sp, #0
 1109              		.cfi_def_cfa_register 7
 1110 0006 7860     		str	r0, [r7, #4]
 1111 0008 0A1C     		mov	r2, r1
 1112 000a BB1C     		add	r3, r7, #2
 1113 000c 1A80     		strh	r2, [r3]
 726:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 729:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1114              		.loc 1 729 0
 1115 000e 7B68     		ldr	r3, [r7, #4]
 1116 0010 012B     		cmp	r3, #1
 1117 0012 02D9     		bls	.L81
 1118              		.loc 1 729 0 is_stmt 0 discriminator 1
 1119 0014 0020     		mov	r0, #0
 1120 0016 FFF7FEFF 		bl	CyHalt
 1121              	.L81:
 730:.\Generated_Source\PSoC4/ADC.c **** 
 731:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 732:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 733:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 734:.\Generated_Source\PSoC4/ADC.c ****             {
 735:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 736:.\Generated_Source\PSoC4/ADC.c ****             }
 737:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 740:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1122              		.loc 1 740 0 is_stmt 1
 1123 001a BB1C     		add	r3, r7, #2
 1124 001c 1A88     		ldrh	r2, [r3]
 1125 001e 1E4B     		ldr	r3, .L87
 1126 0020 7968     		ldr	r1, [r7, #4]
 1127 0022 4900     		lsl	r1, r1, #1
 1128 0024 CB5A     		ldrh	r3, [r1, r3]
 1129 0026 9BB2     		uxth	r3, r3
 1130 0028 9BB2     		uxth	r3, r3
 1131 002a D31A     		sub	r3, r2, r3
 1132 002c 9AB2     		uxth	r2, r3
 1133 002e BB1C     		add	r3, r7, #2
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 34


 1134 0030 1A80     		strh	r2, [r3]
 741:.\Generated_Source\PSoC4/ADC.c **** 
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1135              		.loc 1 742 0
 1136 0032 BB1C     		add	r3, r7, #2
 1137 0034 0021     		mov	r1, #0
 1138 0036 5B5E     		ldrsh	r3, [r3, r1]
 1139 0038 184A     		ldr	r2, .L87+4
 1140 003a 5A43     		mul	r2, r3
 743:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1141              		.loc 1 743 0
 1142 003c BB1C     		add	r3, r7, #2
 1143 003e 0021     		mov	r1, #0
 1144 0040 5B5E     		ldrsh	r3, [r3, r1]
 1145 0042 002B     		cmp	r3, #0
 1146 0044 08DD     		ble	.L82
 1147              		.loc 1 743 0 is_stmt 0 discriminator 1
 1148 0046 164B     		ldr	r3, .L87+8
 1149 0048 7968     		ldr	r1, [r7, #4]
 1150 004a 8900     		lsl	r1, r1, #2
 1151 004c CB58     		ldr	r3, [r1, r3]
 1152 004e 002B     		cmp	r3, #0
 1153 0050 00DA     		bge	.L83
 1154 0052 0133     		add	r3, r3, #1
 1155              	.L83:
 1156 0054 5B10     		asr	r3, r3, #1
 1157 0056 08E0     		b	.L84
 1158              	.L82:
 1159              		.loc 1 743 0 discriminator 2
 1160 0058 114B     		ldr	r3, .L87+8
 1161 005a 7968     		ldr	r1, [r7, #4]
 1162 005c 8900     		lsl	r1, r1, #2
 1163 005e CB58     		ldr	r3, [r1, r3]
 1164 0060 002B     		cmp	r3, #0
 1165 0062 00DA     		bge	.L85
 1166 0064 0133     		add	r3, r3, #1
 1167              	.L85:
 1168 0066 5B10     		asr	r3, r3, #1
 1169 0068 5B42     		neg	r3, r3
 1170              	.L84:
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1171              		.loc 1 742 0 is_stmt 1
 1172 006a D218     		add	r2, r2, r3
 744:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1173              		.loc 1 744 0
 1174 006c 0C4B     		ldr	r3, .L87+8
 1175 006e 7968     		ldr	r1, [r7, #4]
 1176 0070 8900     		lsl	r1, r1, #2
 1177 0072 CB58     		ldr	r3, [r1, r3]
 1178 0074 101C     		mov	r0, r2
 1179 0076 191C     		mov	r1, r3
 1180 0078 FFF7FEFF 		bl	__aeabi_idiv
 1181 007c 031C     		mov	r3, r0
 1182 007e 1A1C     		mov	r2, r3
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1183              		.loc 1 742 0
 1184 0080 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 35


 1185 0082 0E33     		add	r3, r3, #14
 1186 0084 1A80     		strh	r2, [r3]
 745:.\Generated_Source\PSoC4/ADC.c **** 
 746:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1187              		.loc 1 746 0
 1188 0086 3B1C     		mov	r3, r7
 1189 0088 0E33     		add	r3, r3, #14
 1190 008a 1B88     		ldrh	r3, [r3]
 1191 008c 1BB2     		sxth	r3, r3
 747:.\Generated_Source\PSoC4/ADC.c ****     }
 1192              		.loc 1 747 0
 1193 008e 181C     		mov	r0, r3
 1194 0090 BD46     		mov	sp, r7
 1195 0092 04B0     		add	sp, sp, #16
 1196              		@ sp needed
 1197 0094 80BD     		pop	{r7, pc}
 1198              	.L88:
 1199 0096 C046     		.align	2
 1200              	.L87:
 1201 0098 00000000 		.word	ADC_offset
 1202 009c 10270000 		.word	10000
 1203 00a0 00000000 		.word	ADC_countsPer10Volt
 1204              		.cfi_endproc
 1205              	.LFE18:
 1206              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1207              		.global	__aeabi_lmul
 1208              		.global	__aeabi_ldivmod
 1209              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1210              		.align	2
 1211              		.global	ADC_CountsTo_uVolts
 1212              		.code	16
 1213              		.thumb_func
 1214              		.type	ADC_CountsTo_uVolts, %function
 1215              	ADC_CountsTo_uVolts:
 1216              	.LFB19:
 748:.\Generated_Source\PSoC4/ADC.c **** 
 749:.\Generated_Source\PSoC4/ADC.c **** 
 750:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 751:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 752:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 753:.\Generated_Source\PSoC4/ADC.c ****     *
 754:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 755:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 756:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 757:.\Generated_Source\PSoC4/ADC.c ****     *
 758:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 759:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 760:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 764:.\Generated_Source\PSoC4/ADC.c ****     *
 765:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 766:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 767:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 768:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 769:.\Generated_Source\PSoC4/ADC.c ****     *
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 36


 770:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 771:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 772:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 773:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 774:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 775:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 776:.\Generated_Source\PSoC4/ADC.c ****     *
 777:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 778:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 779:.\Generated_Source\PSoC4/ADC.c ****     {
 1217              		.loc 1 779 0
 1218              		.cfi_startproc
 1219 0000 B0B5     		push	{r4, r5, r7, lr}
 1220              		.cfi_def_cfa_offset 16
 1221              		.cfi_offset 4, -16
 1222              		.cfi_offset 5, -12
 1223              		.cfi_offset 7, -8
 1224              		.cfi_offset 14, -4
 1225 0002 86B0     		sub	sp, sp, #24
 1226              		.cfi_def_cfa_offset 40
 1227 0004 00AF     		add	r7, sp, #0
 1228              		.cfi_def_cfa_register 7
 1229 0006 F860     		str	r0, [r7, #12]
 1230 0008 0A1C     		mov	r2, r1
 1231 000a 3B1C     		mov	r3, r7
 1232 000c 0A33     		add	r3, r3, #10
 1233 000e 1A80     		strh	r2, [r3]
 780:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 783:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1234              		.loc 1 783 0
 1235 0010 FB68     		ldr	r3, [r7, #12]
 1236 0012 012B     		cmp	r3, #1
 1237 0014 02D9     		bls	.L90
 1238              		.loc 1 783 0 is_stmt 0 discriminator 1
 1239 0016 0020     		mov	r0, #0
 1240 0018 FFF7FEFF 		bl	CyHalt
 1241              	.L90:
 784:.\Generated_Source\PSoC4/ADC.c **** 
 785:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 786:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 787:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 788:.\Generated_Source\PSoC4/ADC.c ****             {
 789:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 790:.\Generated_Source\PSoC4/ADC.c ****             }
 791:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 794:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1242              		.loc 1 794 0 is_stmt 1
 1243 001c 3B1C     		mov	r3, r7
 1244 001e 0A33     		add	r3, r3, #10
 1245 0020 1A88     		ldrh	r2, [r3]
 1246 0022 1B4B     		ldr	r3, .L92+8
 1247 0024 F968     		ldr	r1, [r7, #12]
 1248 0026 4900     		lsl	r1, r1, #1
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 37


 1249 0028 CB5A     		ldrh	r3, [r1, r3]
 1250 002a 9BB2     		uxth	r3, r3
 1251 002c 9BB2     		uxth	r3, r3
 1252 002e D31A     		sub	r3, r2, r3
 1253 0030 9AB2     		uxth	r2, r3
 1254 0032 3B1C     		mov	r3, r7
 1255 0034 0A33     		add	r3, r3, #10
 1256 0036 1A80     		strh	r2, [r3]
 795:.\Generated_Source\PSoC4/ADC.c **** 
 796:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1257              		.loc 1 796 0
 1258 0038 3B1C     		mov	r3, r7
 1259 003a 0A33     		add	r3, r3, #10
 1260 003c 1B88     		ldrh	r3, [r3]
 1261 003e 1BB2     		sxth	r3, r3
 1262 0040 3B60     		str	r3, [r7]
 1263 0042 DB17     		asr	r3, r3, #31
 1264 0044 7B60     		str	r3, [r7, #4]
 1265 0046 3868     		ldr	r0, [r7]
 1266 0048 7968     		ldr	r1, [r7, #4]
 1267 004a 104B     		ldr	r3, .L92+4
 1268 004c 0E4A     		ldr	r2, .L92
 1269 004e FFF7FEFF 		bl	__aeabi_lmul
 1270 0052 021C     		mov	r2, r0
 1271 0054 0B1C     		mov	r3, r1
 1272 0056 0F49     		ldr	r1, .L92+12
 1273 0058 F868     		ldr	r0, [r7, #12]
 1274 005a 8000     		lsl	r0, r0, #2
 1275 005c 4158     		ldr	r1, [r0, r1]
 1276 005e 0C1C     		mov	r4, r1
 1277 0060 C917     		asr	r1, r1, #31
 1278 0062 0D1C     		mov	r5, r1
 1279 0064 101C     		mov	r0, r2
 1280 0066 191C     		mov	r1, r3
 1281 0068 221C     		mov	r2, r4
 1282 006a 2B1C     		mov	r3, r5
 1283 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1284 0070 031C     		mov	r3, r0
 1285 0072 0C1C     		mov	r4, r1
 1286 0074 3B61     		str	r3, [r7, #16]
 1287 0076 7C61     		str	r4, [r7, #20]
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1288              		.loc 1 798 0
 1289 0078 3B69     		ldr	r3, [r7, #16]
 799:.\Generated_Source\PSoC4/ADC.c ****     }
 1290              		.loc 1 799 0
 1291 007a 181C     		mov	r0, r3
 1292 007c BD46     		mov	sp, r7
 1293 007e 06B0     		add	sp, sp, #24
 1294              		@ sp needed
 1295 0080 B0BD     		pop	{r4, r5, r7, pc}
 1296              	.L93:
 1297 0082 C046C046 		.align	3
 1297      C046
 1298              	.L92:
 1299 0088 80969800 		.word	10000000
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 38


 1300 008c 00000000 		.word	0
 1301 0090 00000000 		.word	ADC_offset
 1302 0094 00000000 		.word	ADC_countsPer10Volt
 1303              		.cfi_endproc
 1304              	.LFE19:
 1305              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1306              		.global	__aeabi_i2f
 1307              		.global	__aeabi_fmul
 1308              		.global	__aeabi_fdiv
 1309              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1310              		.align	2
 1311              		.global	ADC_CountsTo_Volts
 1312              		.code	16
 1313              		.thumb_func
 1314              		.type	ADC_CountsTo_Volts, %function
 1315              	ADC_CountsTo_Volts:
 1316              	.LFB20:
 800:.\Generated_Source\PSoC4/ADC.c **** 
 801:.\Generated_Source\PSoC4/ADC.c **** 
 802:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 803:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 804:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 805:.\Generated_Source\PSoC4/ADC.c ****     *
 806:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 807:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 808:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 809:.\Generated_Source\PSoC4/ADC.c ****     *
 810:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 811:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 816:.\Generated_Source\PSoC4/ADC.c ****     *
 817:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 818:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 819:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 820:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 821:.\Generated_Source\PSoC4/ADC.c ****     *
 822:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 823:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 824:.\Generated_Source\PSoC4/ADC.c ****     {
 1317              		.loc 1 824 0
 1318              		.cfi_startproc
 1319 0000 90B5     		push	{r4, r7, lr}
 1320              		.cfi_def_cfa_offset 12
 1321              		.cfi_offset 4, -12
 1322              		.cfi_offset 7, -8
 1323              		.cfi_offset 14, -4
 1324 0002 85B0     		sub	sp, sp, #20
 1325              		.cfi_def_cfa_offset 32
 1326 0004 00AF     		add	r7, sp, #0
 1327              		.cfi_def_cfa_register 7
 1328 0006 7860     		str	r0, [r7, #4]
 1329 0008 0A1C     		mov	r2, r1
 1330 000a BB1C     		add	r3, r7, #2
 1331 000c 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 39


 825:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 828:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1332              		.loc 1 828 0
 1333 000e 7B68     		ldr	r3, [r7, #4]
 1334 0010 012B     		cmp	r3, #1
 1335 0012 02D9     		bls	.L95
 1336              		.loc 1 828 0 is_stmt 0 discriminator 1
 1337 0014 0020     		mov	r0, #0
 1338 0016 FFF7FEFF 		bl	CyHalt
 1339              	.L95:
 829:.\Generated_Source\PSoC4/ADC.c **** 
 830:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 831:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 832:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 833:.\Generated_Source\PSoC4/ADC.c ****             {
 834:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 835:.\Generated_Source\PSoC4/ADC.c ****             }
 836:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 839:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1340              		.loc 1 839 0 is_stmt 1
 1341 001a BB1C     		add	r3, r7, #2
 1342 001c 1A88     		ldrh	r2, [r3]
 1343 001e 154B     		ldr	r3, .L97
 1344 0020 7968     		ldr	r1, [r7, #4]
 1345 0022 4900     		lsl	r1, r1, #1
 1346 0024 CB5A     		ldrh	r3, [r1, r3]
 1347 0026 9BB2     		uxth	r3, r3
 1348 0028 9BB2     		uxth	r3, r3
 1349 002a D31A     		sub	r3, r2, r3
 1350 002c 9AB2     		uxth	r2, r3
 1351 002e BB1C     		add	r3, r7, #2
 1352 0030 1A80     		strh	r2, [r3]
 840:.\Generated_Source\PSoC4/ADC.c **** 
 841:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1353              		.loc 1 841 0
 1354 0032 BB1C     		add	r3, r7, #2
 1355 0034 0022     		mov	r2, #0
 1356 0036 9B5E     		ldrsh	r3, [r3, r2]
 1357 0038 181C     		mov	r0, r3
 1358 003a FFF7FEFF 		bl	__aeabi_i2f
 1359 003e 031C     		add	r3, r0, #0
 1360 0040 181C     		add	r0, r3, #0
 1361 0042 0D49     		ldr	r1, .L97+4
 1362 0044 FFF7FEFF 		bl	__aeabi_fmul
 1363 0048 031C     		add	r3, r0, #0
 1364 004a 1C1C     		add	r4, r3, #0
 1365 004c 0B4B     		ldr	r3, .L97+8
 1366 004e 7A68     		ldr	r2, [r7, #4]
 1367 0050 9200     		lsl	r2, r2, #2
 1368 0052 D358     		ldr	r3, [r2, r3]
 1369 0054 181C     		mov	r0, r3
 1370 0056 FFF7FEFF 		bl	__aeabi_i2f
 1371 005a 031C     		add	r3, r0, #0
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 40


 1372 005c 201C     		add	r0, r4, #0
 1373 005e 191C     		add	r1, r3, #0
 1374 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1375 0064 031C     		add	r3, r0, #0
 1376 0066 FB60     		str	r3, [r7, #12]
 842:.\Generated_Source\PSoC4/ADC.c **** 
 843:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1377              		.loc 1 843 0
 1378 0068 FB68     		ldr	r3, [r7, #12]
 844:.\Generated_Source\PSoC4/ADC.c ****     }
 1379              		.loc 1 844 0
 1380 006a 181C     		add	r0, r3, #0
 1381 006c BD46     		mov	sp, r7
 1382 006e 05B0     		add	sp, sp, #20
 1383              		@ sp needed
 1384 0070 90BD     		pop	{r4, r7, pc}
 1385              	.L98:
 1386 0072 C046     		.align	2
 1387              	.L97:
 1388 0074 00000000 		.word	ADC_offset
 1389 0078 00002041 		.word	1092616192
 1390 007c 00000000 		.word	ADC_countsPer10Volt
 1391              		.cfi_endproc
 1392              	.LFE20:
 1393              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1394              		.section	.rodata
 1395              		.align	2
 1396              		.type	ADC_InputsPlacement.4749, %object
 1397              		.size	ADC_InputsPlacement.4749, 2
 1398              	ADC_InputsPlacement.4749:
 1399 0008 00       		.byte	0
 1400 0009 70       		.byte	112
 1401 000a 0000     		.text
 1402              	.Letext0:
 1403              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1404              		.section	.debug_info,"",%progbits
 1405              	.Ldebug_info0:
 1406 0000 A8040000 		.4byte	0x4a8
 1407 0004 0400     		.2byte	0x4
 1408 0006 00000000 		.4byte	.Ldebug_abbrev0
 1409 000a 04       		.byte	0x4
 1410 000b 01       		.uleb128 0x1
 1411 000c 64020000 		.4byte	.LASF61
 1412 0010 01       		.byte	0x1
 1413 0011 0E030000 		.4byte	.LASF62
 1414 0015 C2010000 		.4byte	.LASF63
 1415 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1416 001d 00000000 		.4byte	0
 1417 0021 00000000 		.4byte	.Ldebug_line0
 1418 0025 02       		.uleb128 0x2
 1419 0026 01       		.byte	0x1
 1420 0027 06       		.byte	0x6
 1421 0028 7C000000 		.4byte	.LASF0
 1422 002c 02       		.uleb128 0x2
 1423 002d 01       		.byte	0x1
 1424 002e 08       		.byte	0x8
 1425 002f 2D030000 		.4byte	.LASF1
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 41


 1426 0033 02       		.uleb128 0x2
 1427 0034 02       		.byte	0x2
 1428 0035 05       		.byte	0x5
 1429 0036 46030000 		.4byte	.LASF2
 1430 003a 02       		.uleb128 0x2
 1431 003b 02       		.byte	0x2
 1432 003c 07       		.byte	0x7
 1433 003d 53010000 		.4byte	.LASF3
 1434 0041 02       		.uleb128 0x2
 1435 0042 04       		.byte	0x4
 1436 0043 05       		.byte	0x5
 1437 0044 9F000000 		.4byte	.LASF4
 1438 0048 02       		.uleb128 0x2
 1439 0049 04       		.byte	0x4
 1440 004a 07       		.byte	0x7
 1441 004b 22010000 		.4byte	.LASF5
 1442 004f 02       		.uleb128 0x2
 1443 0050 08       		.byte	0x8
 1444 0051 05       		.byte	0x5
 1445 0052 6E000000 		.4byte	.LASF6
 1446 0056 02       		.uleb128 0x2
 1447 0057 08       		.byte	0x8
 1448 0058 07       		.byte	0x7
 1449 0059 32000000 		.4byte	.LASF7
 1450 005d 03       		.uleb128 0x3
 1451 005e 04       		.byte	0x4
 1452 005f 05       		.byte	0x5
 1453 0060 696E7400 		.ascii	"int\000"
 1454 0064 02       		.uleb128 0x2
 1455 0065 04       		.byte	0x4
 1456 0066 07       		.byte	0x7
 1457 0067 0E010000 		.4byte	.LASF8
 1458 006b 04       		.uleb128 0x4
 1459 006c D0000000 		.4byte	.LASF9
 1460 0070 02       		.byte	0x2
 1461 0071 A1       		.byte	0xa1
 1462 0072 2C000000 		.4byte	0x2c
 1463 0076 04       		.uleb128 0x4
 1464 0077 00000000 		.4byte	.LASF10
 1465 007b 02       		.byte	0x2
 1466 007c A2       		.byte	0xa2
 1467 007d 3A000000 		.4byte	0x3a
 1468 0081 04       		.uleb128 0x4
 1469 0082 DD000000 		.4byte	.LASF11
 1470 0086 02       		.byte	0x2
 1471 0087 A3       		.byte	0xa3
 1472 0088 48000000 		.4byte	0x48
 1473 008c 04       		.uleb128 0x4
 1474 008d 98030000 		.4byte	.LASF12
 1475 0091 02       		.byte	0x2
 1476 0092 A5       		.byte	0xa5
 1477 0093 33000000 		.4byte	0x33
 1478 0097 04       		.uleb128 0x4
 1479 0098 8F000000 		.4byte	.LASF13
 1480 009c 02       		.byte	0x2
 1481 009d A6       		.byte	0xa6
 1482 009e 41000000 		.4byte	0x41
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 42


 1483 00a2 04       		.uleb128 0x4
 1484 00a3 83010000 		.4byte	.LASF14
 1485 00a7 02       		.byte	0x2
 1486 00a8 A7       		.byte	0xa7
 1487 00a9 AD000000 		.4byte	0xad
 1488 00ad 02       		.uleb128 0x2
 1489 00ae 04       		.byte	0x4
 1490 00af 04       		.byte	0x4
 1491 00b0 5E020000 		.4byte	.LASF15
 1492 00b4 02       		.uleb128 0x2
 1493 00b5 08       		.byte	0x8
 1494 00b6 04       		.byte	0x4
 1495 00b7 D6000000 		.4byte	.LASF16
 1496 00bb 04       		.uleb128 0x4
 1497 00bc 3C020000 		.4byte	.LASF17
 1498 00c0 02       		.byte	0x2
 1499 00c1 AC       		.byte	0xac
 1500 00c2 4F000000 		.4byte	0x4f
 1501 00c6 02       		.uleb128 0x2
 1502 00c7 01       		.byte	0x1
 1503 00c8 08       		.byte	0x8
 1504 00c9 64030000 		.4byte	.LASF18
 1505 00cd 05       		.uleb128 0x5
 1506 00ce 7D010000 		.4byte	.LASF19
 1507 00d2 02       		.byte	0x2
 1508 00d3 4D01     		.2byte	0x14d
 1509 00d5 D9000000 		.4byte	0xd9
 1510 00d9 06       		.uleb128 0x6
 1511 00da 81000000 		.4byte	0x81
 1512 00de 02       		.uleb128 0x2
 1513 00df 04       		.byte	0x4
 1514 00e0 07       		.byte	0x7
 1515 00e1 8B010000 		.4byte	.LASF20
 1516 00e5 07       		.uleb128 0x7
 1517 00e6 95000000 		.4byte	.LASF25
 1518 00ea 01       		.byte	0x1
 1519 00eb 3F       		.byte	0x3f
 1520 00ec 00000000 		.4byte	.LFB2
 1521 00f0 24000000 		.4byte	.LFE2-.LFB2
 1522 00f4 01       		.uleb128 0x1
 1523 00f5 9C       		.byte	0x9c
 1524 00f6 08       		.uleb128 0x8
 1525 00f7 29000000 		.4byte	.LASF36
 1526 00fb 01       		.byte	0x1
 1527 00fc 5E       		.byte	0x5e
 1528 00fd 00000000 		.4byte	.LFB3
 1529 0101 58020000 		.4byte	.LFE3-.LFB3
 1530 0105 01       		.uleb128 0x1
 1531 0106 9C       		.byte	0x9c
 1532 0107 47010000 		.4byte	0x147
 1533 010b 09       		.uleb128 0x9
 1534 010c 59030000 		.4byte	.LASF21
 1535 0110 01       		.byte	0x1
 1536 0111 60       		.byte	0x60
 1537 0112 81000000 		.4byte	0x81
 1538 0116 02       		.uleb128 0x2
 1539 0117 91       		.byte	0x91
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 43


 1540 0118 6C       		.sleb128 -20
 1541 0119 09       		.uleb128 0x9
 1542 011a 49010000 		.4byte	.LASF22
 1543 011e 01       		.byte	0x1
 1544 011f 61       		.byte	0x61
 1545 0120 81000000 		.4byte	0x81
 1546 0124 02       		.uleb128 0x2
 1547 0125 91       		.byte	0x91
 1548 0126 64       		.sleb128 -28
 1549 0127 09       		.uleb128 0x9
 1550 0128 0F000000 		.4byte	.LASF23
 1551 012c 01       		.byte	0x1
 1552 012d 62       		.byte	0x62
 1553 012e 97000000 		.4byte	0x97
 1554 0132 02       		.uleb128 0x2
 1555 0133 91       		.byte	0x91
 1556 0134 68       		.sleb128 -24
 1557 0135 09       		.uleb128 0x9
 1558 0136 49000000 		.4byte	.LASF24
 1559 013a 01       		.byte	0x1
 1560 013b 65       		.byte	0x65
 1561 013c 57010000 		.4byte	0x157
 1562 0140 05       		.uleb128 0x5
 1563 0141 03       		.byte	0x3
 1564 0142 08000000 		.4byte	ADC_InputsPlacement.4749
 1565 0146 00       		.byte	0
 1566 0147 0A       		.uleb128 0xa
 1567 0148 6B000000 		.4byte	0x6b
 1568 014c 57010000 		.4byte	0x157
 1569 0150 0B       		.uleb128 0xb
 1570 0151 DE000000 		.4byte	0xde
 1571 0155 01       		.byte	0x1
 1572 0156 00       		.byte	0
 1573 0157 0C       		.uleb128 0xc
 1574 0158 47010000 		.4byte	0x147
 1575 015c 0D       		.uleb128 0xd
 1576 015d 8D030000 		.4byte	.LASF26
 1577 0161 01       		.byte	0x1
 1578 0162 2A01     		.2byte	0x12a
 1579 0164 00000000 		.4byte	.LFB4
 1580 0168 38000000 		.4byte	.LFE4-.LFB4
 1581 016c 01       		.uleb128 0x1
 1582 016d 9C       		.byte	0x9c
 1583 016e 0E       		.uleb128 0xe
 1584 016f 50030000 		.4byte	.LASF27
 1585 0173 01       		.byte	0x1
 1586 0174 4D01     		.2byte	0x14d
 1587 0176 00000000 		.4byte	.LFB5
 1588 017a 18000000 		.4byte	.LFE5-.LFB5
 1589 017e 01       		.uleb128 0x1
 1590 017f 9C       		.byte	0x9c
 1591 0180 0E       		.uleb128 0xe
 1592 0181 5D000000 		.4byte	.LASF28
 1593 0185 01       		.byte	0x1
 1594 0186 6701     		.2byte	0x167
 1595 0188 00000000 		.4byte	.LFB6
 1596 018c 1C000000 		.4byte	.LFE6-.LFB6
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 44


 1597 0190 01       		.uleb128 0x1
 1598 0191 9C       		.byte	0x9c
 1599 0192 0E       		.uleb128 0xe
 1600 0193 66010000 		.4byte	.LASF29
 1601 0197 01       		.byte	0x1
 1602 0198 8001     		.2byte	0x180
 1603 019a 00000000 		.4byte	.LFB7
 1604 019e 1C000000 		.4byte	.LFE7-.LFB7
 1605 01a2 01       		.uleb128 0x1
 1606 01a3 9C       		.byte	0x9c
 1607 01a4 0F       		.uleb128 0xf
 1608 01a5 28020000 		.4byte	.LASF31
 1609 01a9 01       		.byte	0x1
 1610 01aa A201     		.2byte	0x1a2
 1611 01ac 81000000 		.4byte	0x81
 1612 01b0 00000000 		.4byte	.LFB8
 1613 01b4 7C000000 		.4byte	.LFE8-.LFB8
 1614 01b8 01       		.uleb128 0x1
 1615 01b9 9C       		.byte	0x9c
 1616 01ba DD010000 		.4byte	0x1dd
 1617 01be 10       		.uleb128 0x10
 1618 01bf F5000000 		.4byte	.LASF33
 1619 01c3 01       		.byte	0x1
 1620 01c4 A201     		.2byte	0x1a2
 1621 01c6 81000000 		.4byte	0x81
 1622 01ca 02       		.uleb128 0x2
 1623 01cb 91       		.byte	0x91
 1624 01cc 6C       		.sleb128 -20
 1625 01cd 11       		.uleb128 0x11
 1626 01ce 88000000 		.4byte	.LASF30
 1627 01d2 01       		.byte	0x1
 1628 01d3 A401     		.2byte	0x1a4
 1629 01d5 81000000 		.4byte	0x81
 1630 01d9 02       		.uleb128 0x2
 1631 01da 91       		.byte	0x91
 1632 01db 74       		.sleb128 -12
 1633 01dc 00       		.byte	0
 1634 01dd 12       		.uleb128 0x12
 1635 01de B3030000 		.4byte	.LASF32
 1636 01e2 01       		.byte	0x1
 1637 01e3 D801     		.2byte	0x1d8
 1638 01e5 8C000000 		.4byte	0x8c
 1639 01e9 00000000 		.4byte	.LFB9
 1640 01ed 4C000000 		.4byte	.LFE9-.LFB9
 1641 01f1 01       		.uleb128 0x1
 1642 01f2 9C       		.byte	0x9c
 1643 01f3 16020000 		.4byte	0x216
 1644 01f7 10       		.uleb128 0x10
 1645 01f8 5F030000 		.4byte	.LASF34
 1646 01fc 01       		.byte	0x1
 1647 01fd D801     		.2byte	0x1d8
 1648 01ff 81000000 		.4byte	0x81
 1649 0203 02       		.uleb128 0x2
 1650 0204 91       		.byte	0x91
 1651 0205 6C       		.sleb128 -20
 1652 0206 11       		.uleb128 0x11
 1653 0207 AC030000 		.4byte	.LASF35
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 45


 1654 020b 01       		.byte	0x1
 1655 020c DA01     		.2byte	0x1da
 1656 020e 81000000 		.4byte	0x81
 1657 0212 02       		.uleb128 0x2
 1658 0213 91       		.byte	0x91
 1659 0214 74       		.sleb128 -12
 1660 0215 00       		.byte	0
 1661 0216 13       		.uleb128 0x13
 1662 0217 42020000 		.4byte	.LASF37
 1663 021b 01       		.byte	0x1
 1664 021c 0502     		.2byte	0x205
 1665 021e 00000000 		.4byte	.LFB10
 1666 0222 1C000000 		.4byte	.LFE10-.LFB10
 1667 0226 01       		.uleb128 0x1
 1668 0227 9C       		.byte	0x9c
 1669 0228 3C020000 		.4byte	0x23c
 1670 022c 10       		.uleb128 0x10
 1671 022d E4000000 		.4byte	.LASF38
 1672 0231 01       		.byte	0x1
 1673 0232 0502     		.2byte	0x205
 1674 0234 81000000 		.4byte	0x81
 1675 0238 02       		.uleb128 0x2
 1676 0239 91       		.byte	0x91
 1677 023a 74       		.sleb128 -12
 1678 023b 00       		.byte	0
 1679 023c 0E       		.uleb128 0xe
 1680 023d AE010000 		.4byte	.LASF39
 1681 0241 01       		.byte	0x1
 1682 0242 1B02     		.2byte	0x21b
 1683 0244 00000000 		.4byte	.LFB11
 1684 0248 1C000000 		.4byte	.LFE11-.LFB11
 1685 024c 01       		.uleb128 0x1
 1686 024d 9C       		.byte	0x9c
 1687 024e 13       		.uleb128 0x13
 1688 024f FE020000 		.4byte	.LASF40
 1689 0253 01       		.byte	0x1
 1690 0254 3102     		.2byte	0x231
 1691 0256 00000000 		.4byte	.LFB12
 1692 025a 30000000 		.4byte	.LFE12-.LFB12
 1693 025e 01       		.uleb128 0x1
 1694 025f 9C       		.byte	0x9c
 1695 0260 74020000 		.4byte	0x274
 1696 0264 10       		.uleb128 0x10
 1697 0265 94010000 		.4byte	.LASF41
 1698 0269 01       		.byte	0x1
 1699 026a 3102     		.2byte	0x231
 1700 026c 81000000 		.4byte	0x81
 1701 0270 02       		.uleb128 0x2
 1702 0271 91       		.byte	0x91
 1703 0272 74       		.sleb128 -12
 1704 0273 00       		.byte	0
 1705 0274 13       		.uleb128 0x13
 1706 0275 9D010000 		.4byte	.LASF42
 1707 0279 01       		.byte	0x1
 1708 027a 4602     		.2byte	0x246
 1709 027c 00000000 		.4byte	.LFB13
 1710 0280 2C000000 		.4byte	.LFE13-.LFB13
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 46


 1711 0284 01       		.uleb128 0x1
 1712 0285 9C       		.byte	0x9c
 1713 0286 9A020000 		.4byte	0x29a
 1714 028a 10       		.uleb128 0x10
 1715 028b E0020000 		.4byte	.LASF43
 1716 028f 01       		.byte	0x1
 1717 0290 4602     		.2byte	0x246
 1718 0292 81000000 		.4byte	0x81
 1719 0296 02       		.uleb128 0x2
 1720 0297 91       		.byte	0x91
 1721 0298 74       		.sleb128 -12
 1722 0299 00       		.byte	0
 1723 029a 13       		.uleb128 0x13
 1724 029b FD000000 		.4byte	.LASF44
 1725 029f 01       		.byte	0x1
 1726 02a0 5E02     		.2byte	0x25e
 1727 02a2 00000000 		.4byte	.LFB14
 1728 02a6 1C000000 		.4byte	.LFE14-.LFB14
 1729 02aa 01       		.uleb128 0x1
 1730 02ab 9C       		.byte	0x9c
 1731 02ac C0020000 		.4byte	0x2c0
 1732 02b0 10       		.uleb128 0x10
 1733 02b1 E4000000 		.4byte	.LASF38
 1734 02b5 01       		.byte	0x1
 1735 02b6 5E02     		.2byte	0x25e
 1736 02b8 81000000 		.4byte	0x81
 1737 02bc 02       		.uleb128 0x2
 1738 02bd 91       		.byte	0x91
 1739 02be 74       		.sleb128 -12
 1740 02bf 00       		.byte	0
 1741 02c0 13       		.uleb128 0x13
 1742 02c1 34010000 		.4byte	.LASF45
 1743 02c5 01       		.byte	0x1
 1744 02c6 7502     		.2byte	0x275
 1745 02c8 00000000 		.4byte	.LFB15
 1746 02cc 1C000000 		.4byte	.LFE15-.LFB15
 1747 02d0 01       		.uleb128 0x1
 1748 02d1 9C       		.byte	0x9c
 1749 02d2 E6020000 		.4byte	0x2e6
 1750 02d6 10       		.uleb128 0x10
 1751 02d7 E4000000 		.4byte	.LASF38
 1752 02db 01       		.byte	0x1
 1753 02dc 7502     		.2byte	0x275
 1754 02de 81000000 		.4byte	0x81
 1755 02e2 02       		.uleb128 0x2
 1756 02e3 91       		.byte	0x91
 1757 02e4 74       		.sleb128 -12
 1758 02e5 00       		.byte	0
 1759 02e6 14       		.uleb128 0x14
 1760 02e7 9E030000 		.4byte	.LASF46
 1761 02eb 01       		.byte	0x1
 1762 02ec 9102     		.2byte	0x291
 1763 02ee 00000000 		.4byte	.LFB16
 1764 02f2 30000000 		.4byte	.LFE16-.LFB16
 1765 02f6 01       		.uleb128 0x1
 1766 02f7 9C       		.byte	0x9c
 1767 02f8 1B030000 		.4byte	0x31b
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 47


 1768 02fc 10       		.uleb128 0x10
 1769 02fd 5F030000 		.4byte	.LASF34
 1770 0301 01       		.byte	0x1
 1771 0302 9102     		.2byte	0x291
 1772 0304 81000000 		.4byte	0x81
 1773 0308 02       		.uleb128 0x2
 1774 0309 91       		.byte	0x91
 1775 030a 74       		.sleb128 -12
 1776 030b 10       		.uleb128 0x10
 1777 030c 7C030000 		.4byte	.LASF47
 1778 0310 01       		.byte	0x1
 1779 0311 9102     		.2byte	0x291
 1780 0313 8C000000 		.4byte	0x8c
 1781 0317 02       		.uleb128 0x2
 1782 0318 91       		.byte	0x91
 1783 0319 72       		.sleb128 -14
 1784 031a 00       		.byte	0
 1785 031b 14       		.uleb128 0x14
 1786 031c 52020000 		.4byte	.LASF48
 1787 0320 01       		.byte	0x1
 1788 0321 B302     		.2byte	0x2b3
 1789 0323 00000000 		.4byte	.LFB17
 1790 0327 2C000000 		.4byte	.LFE17-.LFB17
 1791 032b 01       		.uleb128 0x1
 1792 032c 9C       		.byte	0x9c
 1793 032d 50030000 		.4byte	0x350
 1794 0331 10       		.uleb128 0x10
 1795 0332 5F030000 		.4byte	.LASF34
 1796 0336 01       		.byte	0x1
 1797 0337 B302     		.2byte	0x2b3
 1798 0339 81000000 		.4byte	0x81
 1799 033d 02       		.uleb128 0x2
 1800 033e 91       		.byte	0x91
 1801 033f 74       		.sleb128 -12
 1802 0340 10       		.uleb128 0x10
 1803 0341 07000000 		.4byte	.LASF49
 1804 0345 01       		.byte	0x1
 1805 0346 B302     		.2byte	0x2b3
 1806 0348 97000000 		.4byte	0x97
 1807 034c 02       		.uleb128 0x2
 1808 034d 91       		.byte	0x91
 1809 034e 70       		.sleb128 -16
 1810 034f 00       		.byte	0
 1811 0350 12       		.uleb128 0x12
 1812 0351 EA020000 		.4byte	.LASF50
 1813 0355 01       		.byte	0x1
 1814 0356 D402     		.2byte	0x2d4
 1815 0358 8C000000 		.4byte	0x8c
 1816 035c 00000000 		.4byte	.LFB18
 1817 0360 A4000000 		.4byte	.LFE18-.LFB18
 1818 0364 01       		.uleb128 0x1
 1819 0365 9C       		.byte	0x9c
 1820 0366 98030000 		.4byte	0x398
 1821 036a 10       		.uleb128 0x10
 1822 036b 5F030000 		.4byte	.LASF34
 1823 036f 01       		.byte	0x1
 1824 0370 D402     		.2byte	0x2d4
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 48


 1825 0372 81000000 		.4byte	0x81
 1826 0376 02       		.uleb128 0x2
 1827 0377 91       		.byte	0x91
 1828 0378 6C       		.sleb128 -20
 1829 0379 10       		.uleb128 0x10
 1830 037a 83030000 		.4byte	.LASF51
 1831 037e 01       		.byte	0x1
 1832 037f D402     		.2byte	0x2d4
 1833 0381 8C000000 		.4byte	0x8c
 1834 0385 02       		.uleb128 0x2
 1835 0386 91       		.byte	0x91
 1836 0387 6A       		.sleb128 -22
 1837 0388 11       		.uleb128 0x11
 1838 0389 76010000 		.4byte	.LASF52
 1839 038d 01       		.byte	0x1
 1840 038e D602     		.2byte	0x2d6
 1841 0390 8C000000 		.4byte	0x8c
 1842 0394 02       		.uleb128 0x2
 1843 0395 91       		.byte	0x91
 1844 0396 76       		.sleb128 -10
 1845 0397 00       		.byte	0
 1846 0398 12       		.uleb128 0x12
 1847 0399 A8000000 		.4byte	.LASF53
 1848 039d 01       		.byte	0x1
 1849 039e 0A03     		.2byte	0x30a
 1850 03a0 97000000 		.4byte	0x97
 1851 03a4 00000000 		.4byte	.LFB19
 1852 03a8 98000000 		.4byte	.LFE19-.LFB19
 1853 03ac 01       		.uleb128 0x1
 1854 03ad 9C       		.byte	0x9c
 1855 03ae E0030000 		.4byte	0x3e0
 1856 03b2 10       		.uleb128 0x10
 1857 03b3 5F030000 		.4byte	.LASF34
 1858 03b7 01       		.byte	0x1
 1859 03b8 0A03     		.2byte	0x30a
 1860 03ba 81000000 		.4byte	0x81
 1861 03be 02       		.uleb128 0x2
 1862 03bf 91       		.byte	0x91
 1863 03c0 64       		.sleb128 -28
 1864 03c1 10       		.uleb128 0x10
 1865 03c2 83030000 		.4byte	.LASF51
 1866 03c6 01       		.byte	0x1
 1867 03c7 0A03     		.2byte	0x30a
 1868 03c9 8C000000 		.4byte	0x8c
 1869 03cd 02       		.uleb128 0x2
 1870 03ce 91       		.byte	0x91
 1871 03cf 62       		.sleb128 -30
 1872 03d0 11       		.uleb128 0x11
 1873 03d1 1B010000 		.4byte	.LASF54
 1874 03d5 01       		.byte	0x1
 1875 03d6 0C03     		.2byte	0x30c
 1876 03d8 BB000000 		.4byte	0xbb
 1877 03dc 02       		.uleb128 0x2
 1878 03dd 91       		.byte	0x91
 1879 03de 68       		.sleb128 -24
 1880 03df 00       		.byte	0
 1881 03e0 12       		.uleb128 0x12
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 49


 1882 03e1 16000000 		.4byte	.LASF55
 1883 03e5 01       		.byte	0x1
 1884 03e6 3703     		.2byte	0x337
 1885 03e8 A2000000 		.4byte	0xa2
 1886 03ec 00000000 		.4byte	.LFB20
 1887 03f0 80000000 		.4byte	.LFE20-.LFB20
 1888 03f4 01       		.uleb128 0x1
 1889 03f5 9C       		.byte	0x9c
 1890 03f6 28040000 		.4byte	0x428
 1891 03fa 10       		.uleb128 0x10
 1892 03fb 5F030000 		.4byte	.LASF34
 1893 03ff 01       		.byte	0x1
 1894 0400 3703     		.2byte	0x337
 1895 0402 81000000 		.4byte	0x81
 1896 0406 02       		.uleb128 0x2
 1897 0407 91       		.byte	0x91
 1898 0408 64       		.sleb128 -28
 1899 0409 10       		.uleb128 0x10
 1900 040a 83030000 		.4byte	.LASF51
 1901 040e 01       		.byte	0x1
 1902 040f 3703     		.2byte	0x337
 1903 0411 8C000000 		.4byte	0x8c
 1904 0415 02       		.uleb128 0x2
 1905 0416 91       		.byte	0x91
 1906 0417 62       		.sleb128 -30
 1907 0418 11       		.uleb128 0x11
 1908 0419 43010000 		.4byte	.LASF56
 1909 041d 01       		.byte	0x1
 1910 041e 3903     		.2byte	0x339
 1911 0420 A2000000 		.4byte	0xa2
 1912 0424 02       		.uleb128 0x2
 1913 0425 91       		.byte	0x91
 1914 0426 6C       		.sleb128 -20
 1915 0427 00       		.byte	0
 1916 0428 0A       		.uleb128 0xa
 1917 0429 81000000 		.4byte	0x81
 1918 042d 38040000 		.4byte	0x438
 1919 0431 0B       		.uleb128 0xb
 1920 0432 DE000000 		.4byte	0xde
 1921 0436 01       		.byte	0x1
 1922 0437 00       		.byte	0
 1923 0438 09       		.uleb128 0x9
 1924 0439 69030000 		.4byte	.LASF57
 1925 043d 01       		.byte	0x1
 1926 043e 21       		.byte	0x21
 1927 043f 49040000 		.4byte	0x449
 1928 0443 05       		.uleb128 0x5
 1929 0444 03       		.byte	0x3
 1930 0445 00000000 		.4byte	ADC_channelsConfig
 1931 0449 0C       		.uleb128 0xc
 1932 044a 28040000 		.4byte	0x428
 1933 044e 15       		.uleb128 0x15
 1934 044f E9000000 		.4byte	.LASF58
 1935 0453 01       		.byte	0x1
 1936 0454 18       		.byte	0x18
 1937 0455 6B000000 		.4byte	0x6b
 1938 0459 05       		.uleb128 0x5
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 50


 1939 045a 03       		.byte	0x3
 1940 045b 00000000 		.4byte	ADC_initVar
 1941 045f 0A       		.uleb128 0xa
 1942 0460 8C000000 		.4byte	0x8c
 1943 0464 6F040000 		.4byte	0x46f
 1944 0468 0B       		.uleb128 0xb
 1945 0469 DE000000 		.4byte	0xde
 1946 046d 01       		.byte	0x1
 1947 046e 00       		.byte	0
 1948 046f 15       		.uleb128 0x15
 1949 0470 3B030000 		.4byte	.LASF59
 1950 0474 01       		.byte	0x1
 1951 0475 19       		.byte	0x19
 1952 0476 80040000 		.4byte	0x480
 1953 047a 05       		.uleb128 0x5
 1954 047b 03       		.byte	0x3
 1955 047c 00000000 		.4byte	ADC_offset
 1956 0480 06       		.uleb128 0x6
 1957 0481 5F040000 		.4byte	0x45f
 1958 0485 0A       		.uleb128 0xa
 1959 0486 97000000 		.4byte	0x97
 1960 048a 95040000 		.4byte	0x495
 1961 048e 0B       		.uleb128 0xb
 1962 048f DE000000 		.4byte	0xde
 1963 0493 01       		.byte	0x1
 1964 0494 00       		.byte	0
 1965 0495 15       		.uleb128 0x15
 1966 0496 BC000000 		.4byte	.LASF60
 1967 049a 01       		.byte	0x1
 1968 049b 1A       		.byte	0x1a
 1969 049c A6040000 		.4byte	0x4a6
 1970 04a0 05       		.uleb128 0x5
 1971 04a1 03       		.byte	0x3
 1972 04a2 00000000 		.4byte	ADC_countsPer10Volt
 1973 04a6 06       		.uleb128 0x6
 1974 04a7 85040000 		.4byte	0x485
 1975 04ab 00       		.byte	0
 1976              		.section	.debug_abbrev,"",%progbits
 1977              	.Ldebug_abbrev0:
 1978 0000 01       		.uleb128 0x1
 1979 0001 11       		.uleb128 0x11
 1980 0002 01       		.byte	0x1
 1981 0003 25       		.uleb128 0x25
 1982 0004 0E       		.uleb128 0xe
 1983 0005 13       		.uleb128 0x13
 1984 0006 0B       		.uleb128 0xb
 1985 0007 03       		.uleb128 0x3
 1986 0008 0E       		.uleb128 0xe
 1987 0009 1B       		.uleb128 0x1b
 1988 000a 0E       		.uleb128 0xe
 1989 000b 55       		.uleb128 0x55
 1990 000c 17       		.uleb128 0x17
 1991 000d 11       		.uleb128 0x11
 1992 000e 01       		.uleb128 0x1
 1993 000f 10       		.uleb128 0x10
 1994 0010 17       		.uleb128 0x17
 1995 0011 00       		.byte	0
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 51


 1996 0012 00       		.byte	0
 1997 0013 02       		.uleb128 0x2
 1998 0014 24       		.uleb128 0x24
 1999 0015 00       		.byte	0
 2000 0016 0B       		.uleb128 0xb
 2001 0017 0B       		.uleb128 0xb
 2002 0018 3E       		.uleb128 0x3e
 2003 0019 0B       		.uleb128 0xb
 2004 001a 03       		.uleb128 0x3
 2005 001b 0E       		.uleb128 0xe
 2006 001c 00       		.byte	0
 2007 001d 00       		.byte	0
 2008 001e 03       		.uleb128 0x3
 2009 001f 24       		.uleb128 0x24
 2010 0020 00       		.byte	0
 2011 0021 0B       		.uleb128 0xb
 2012 0022 0B       		.uleb128 0xb
 2013 0023 3E       		.uleb128 0x3e
 2014 0024 0B       		.uleb128 0xb
 2015 0025 03       		.uleb128 0x3
 2016 0026 08       		.uleb128 0x8
 2017 0027 00       		.byte	0
 2018 0028 00       		.byte	0
 2019 0029 04       		.uleb128 0x4
 2020 002a 16       		.uleb128 0x16
 2021 002b 00       		.byte	0
 2022 002c 03       		.uleb128 0x3
 2023 002d 0E       		.uleb128 0xe
 2024 002e 3A       		.uleb128 0x3a
 2025 002f 0B       		.uleb128 0xb
 2026 0030 3B       		.uleb128 0x3b
 2027 0031 0B       		.uleb128 0xb
 2028 0032 49       		.uleb128 0x49
 2029 0033 13       		.uleb128 0x13
 2030 0034 00       		.byte	0
 2031 0035 00       		.byte	0
 2032 0036 05       		.uleb128 0x5
 2033 0037 16       		.uleb128 0x16
 2034 0038 00       		.byte	0
 2035 0039 03       		.uleb128 0x3
 2036 003a 0E       		.uleb128 0xe
 2037 003b 3A       		.uleb128 0x3a
 2038 003c 0B       		.uleb128 0xb
 2039 003d 3B       		.uleb128 0x3b
 2040 003e 05       		.uleb128 0x5
 2041 003f 49       		.uleb128 0x49
 2042 0040 13       		.uleb128 0x13
 2043 0041 00       		.byte	0
 2044 0042 00       		.byte	0
 2045 0043 06       		.uleb128 0x6
 2046 0044 35       		.uleb128 0x35
 2047 0045 00       		.byte	0
 2048 0046 49       		.uleb128 0x49
 2049 0047 13       		.uleb128 0x13
 2050 0048 00       		.byte	0
 2051 0049 00       		.byte	0
 2052 004a 07       		.uleb128 0x7
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 52


 2053 004b 2E       		.uleb128 0x2e
 2054 004c 00       		.byte	0
 2055 004d 3F       		.uleb128 0x3f
 2056 004e 19       		.uleb128 0x19
 2057 004f 03       		.uleb128 0x3
 2058 0050 0E       		.uleb128 0xe
 2059 0051 3A       		.uleb128 0x3a
 2060 0052 0B       		.uleb128 0xb
 2061 0053 3B       		.uleb128 0x3b
 2062 0054 0B       		.uleb128 0xb
 2063 0055 27       		.uleb128 0x27
 2064 0056 19       		.uleb128 0x19
 2065 0057 11       		.uleb128 0x11
 2066 0058 01       		.uleb128 0x1
 2067 0059 12       		.uleb128 0x12
 2068 005a 06       		.uleb128 0x6
 2069 005b 40       		.uleb128 0x40
 2070 005c 18       		.uleb128 0x18
 2071 005d 9642     		.uleb128 0x2116
 2072 005f 19       		.uleb128 0x19
 2073 0060 00       		.byte	0
 2074 0061 00       		.byte	0
 2075 0062 08       		.uleb128 0x8
 2076 0063 2E       		.uleb128 0x2e
 2077 0064 01       		.byte	0x1
 2078 0065 3F       		.uleb128 0x3f
 2079 0066 19       		.uleb128 0x19
 2080 0067 03       		.uleb128 0x3
 2081 0068 0E       		.uleb128 0xe
 2082 0069 3A       		.uleb128 0x3a
 2083 006a 0B       		.uleb128 0xb
 2084 006b 3B       		.uleb128 0x3b
 2085 006c 0B       		.uleb128 0xb
 2086 006d 27       		.uleb128 0x27
 2087 006e 19       		.uleb128 0x19
 2088 006f 11       		.uleb128 0x11
 2089 0070 01       		.uleb128 0x1
 2090 0071 12       		.uleb128 0x12
 2091 0072 06       		.uleb128 0x6
 2092 0073 40       		.uleb128 0x40
 2093 0074 18       		.uleb128 0x18
 2094 0075 9642     		.uleb128 0x2116
 2095 0077 19       		.uleb128 0x19
 2096 0078 01       		.uleb128 0x1
 2097 0079 13       		.uleb128 0x13
 2098 007a 00       		.byte	0
 2099 007b 00       		.byte	0
 2100 007c 09       		.uleb128 0x9
 2101 007d 34       		.uleb128 0x34
 2102 007e 00       		.byte	0
 2103 007f 03       		.uleb128 0x3
 2104 0080 0E       		.uleb128 0xe
 2105 0081 3A       		.uleb128 0x3a
 2106 0082 0B       		.uleb128 0xb
 2107 0083 3B       		.uleb128 0x3b
 2108 0084 0B       		.uleb128 0xb
 2109 0085 49       		.uleb128 0x49
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 53


 2110 0086 13       		.uleb128 0x13
 2111 0087 02       		.uleb128 0x2
 2112 0088 18       		.uleb128 0x18
 2113 0089 00       		.byte	0
 2114 008a 00       		.byte	0
 2115 008b 0A       		.uleb128 0xa
 2116 008c 01       		.uleb128 0x1
 2117 008d 01       		.byte	0x1
 2118 008e 49       		.uleb128 0x49
 2119 008f 13       		.uleb128 0x13
 2120 0090 01       		.uleb128 0x1
 2121 0091 13       		.uleb128 0x13
 2122 0092 00       		.byte	0
 2123 0093 00       		.byte	0
 2124 0094 0B       		.uleb128 0xb
 2125 0095 21       		.uleb128 0x21
 2126 0096 00       		.byte	0
 2127 0097 49       		.uleb128 0x49
 2128 0098 13       		.uleb128 0x13
 2129 0099 2F       		.uleb128 0x2f
 2130 009a 0B       		.uleb128 0xb
 2131 009b 00       		.byte	0
 2132 009c 00       		.byte	0
 2133 009d 0C       		.uleb128 0xc
 2134 009e 26       		.uleb128 0x26
 2135 009f 00       		.byte	0
 2136 00a0 49       		.uleb128 0x49
 2137 00a1 13       		.uleb128 0x13
 2138 00a2 00       		.byte	0
 2139 00a3 00       		.byte	0
 2140 00a4 0D       		.uleb128 0xd
 2141 00a5 2E       		.uleb128 0x2e
 2142 00a6 00       		.byte	0
 2143 00a7 3F       		.uleb128 0x3f
 2144 00a8 19       		.uleb128 0x19
 2145 00a9 03       		.uleb128 0x3
 2146 00aa 0E       		.uleb128 0xe
 2147 00ab 3A       		.uleb128 0x3a
 2148 00ac 0B       		.uleb128 0xb
 2149 00ad 3B       		.uleb128 0x3b
 2150 00ae 05       		.uleb128 0x5
 2151 00af 27       		.uleb128 0x27
 2152 00b0 19       		.uleb128 0x19
 2153 00b1 11       		.uleb128 0x11
 2154 00b2 01       		.uleb128 0x1
 2155 00b3 12       		.uleb128 0x12
 2156 00b4 06       		.uleb128 0x6
 2157 00b5 40       		.uleb128 0x40
 2158 00b6 18       		.uleb128 0x18
 2159 00b7 9642     		.uleb128 0x2116
 2160 00b9 19       		.uleb128 0x19
 2161 00ba 00       		.byte	0
 2162 00bb 00       		.byte	0
 2163 00bc 0E       		.uleb128 0xe
 2164 00bd 2E       		.uleb128 0x2e
 2165 00be 00       		.byte	0
 2166 00bf 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 54


 2167 00c0 19       		.uleb128 0x19
 2168 00c1 03       		.uleb128 0x3
 2169 00c2 0E       		.uleb128 0xe
 2170 00c3 3A       		.uleb128 0x3a
 2171 00c4 0B       		.uleb128 0xb
 2172 00c5 3B       		.uleb128 0x3b
 2173 00c6 05       		.uleb128 0x5
 2174 00c7 27       		.uleb128 0x27
 2175 00c8 19       		.uleb128 0x19
 2176 00c9 11       		.uleb128 0x11
 2177 00ca 01       		.uleb128 0x1
 2178 00cb 12       		.uleb128 0x12
 2179 00cc 06       		.uleb128 0x6
 2180 00cd 40       		.uleb128 0x40
 2181 00ce 18       		.uleb128 0x18
 2182 00cf 9742     		.uleb128 0x2117
 2183 00d1 19       		.uleb128 0x19
 2184 00d2 00       		.byte	0
 2185 00d3 00       		.byte	0
 2186 00d4 0F       		.uleb128 0xf
 2187 00d5 2E       		.uleb128 0x2e
 2188 00d6 01       		.byte	0x1
 2189 00d7 3F       		.uleb128 0x3f
 2190 00d8 19       		.uleb128 0x19
 2191 00d9 03       		.uleb128 0x3
 2192 00da 0E       		.uleb128 0xe
 2193 00db 3A       		.uleb128 0x3a
 2194 00dc 0B       		.uleb128 0xb
 2195 00dd 3B       		.uleb128 0x3b
 2196 00de 05       		.uleb128 0x5
 2197 00df 27       		.uleb128 0x27
 2198 00e0 19       		.uleb128 0x19
 2199 00e1 49       		.uleb128 0x49
 2200 00e2 13       		.uleb128 0x13
 2201 00e3 11       		.uleb128 0x11
 2202 00e4 01       		.uleb128 0x1
 2203 00e5 12       		.uleb128 0x12
 2204 00e6 06       		.uleb128 0x6
 2205 00e7 40       		.uleb128 0x40
 2206 00e8 18       		.uleb128 0x18
 2207 00e9 9742     		.uleb128 0x2117
 2208 00eb 19       		.uleb128 0x19
 2209 00ec 01       		.uleb128 0x1
 2210 00ed 13       		.uleb128 0x13
 2211 00ee 00       		.byte	0
 2212 00ef 00       		.byte	0
 2213 00f0 10       		.uleb128 0x10
 2214 00f1 05       		.uleb128 0x5
 2215 00f2 00       		.byte	0
 2216 00f3 03       		.uleb128 0x3
 2217 00f4 0E       		.uleb128 0xe
 2218 00f5 3A       		.uleb128 0x3a
 2219 00f6 0B       		.uleb128 0xb
 2220 00f7 3B       		.uleb128 0x3b
 2221 00f8 05       		.uleb128 0x5
 2222 00f9 49       		.uleb128 0x49
 2223 00fa 13       		.uleb128 0x13
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 55


 2224 00fb 02       		.uleb128 0x2
 2225 00fc 18       		.uleb128 0x18
 2226 00fd 00       		.byte	0
 2227 00fe 00       		.byte	0
 2228 00ff 11       		.uleb128 0x11
 2229 0100 34       		.uleb128 0x34
 2230 0101 00       		.byte	0
 2231 0102 03       		.uleb128 0x3
 2232 0103 0E       		.uleb128 0xe
 2233 0104 3A       		.uleb128 0x3a
 2234 0105 0B       		.uleb128 0xb
 2235 0106 3B       		.uleb128 0x3b
 2236 0107 05       		.uleb128 0x5
 2237 0108 49       		.uleb128 0x49
 2238 0109 13       		.uleb128 0x13
 2239 010a 02       		.uleb128 0x2
 2240 010b 18       		.uleb128 0x18
 2241 010c 00       		.byte	0
 2242 010d 00       		.byte	0
 2243 010e 12       		.uleb128 0x12
 2244 010f 2E       		.uleb128 0x2e
 2245 0110 01       		.byte	0x1
 2246 0111 3F       		.uleb128 0x3f
 2247 0112 19       		.uleb128 0x19
 2248 0113 03       		.uleb128 0x3
 2249 0114 0E       		.uleb128 0xe
 2250 0115 3A       		.uleb128 0x3a
 2251 0116 0B       		.uleb128 0xb
 2252 0117 3B       		.uleb128 0x3b
 2253 0118 05       		.uleb128 0x5
 2254 0119 27       		.uleb128 0x27
 2255 011a 19       		.uleb128 0x19
 2256 011b 49       		.uleb128 0x49
 2257 011c 13       		.uleb128 0x13
 2258 011d 11       		.uleb128 0x11
 2259 011e 01       		.uleb128 0x1
 2260 011f 12       		.uleb128 0x12
 2261 0120 06       		.uleb128 0x6
 2262 0121 40       		.uleb128 0x40
 2263 0122 18       		.uleb128 0x18
 2264 0123 9642     		.uleb128 0x2116
 2265 0125 19       		.uleb128 0x19
 2266 0126 01       		.uleb128 0x1
 2267 0127 13       		.uleb128 0x13
 2268 0128 00       		.byte	0
 2269 0129 00       		.byte	0
 2270 012a 13       		.uleb128 0x13
 2271 012b 2E       		.uleb128 0x2e
 2272 012c 01       		.byte	0x1
 2273 012d 3F       		.uleb128 0x3f
 2274 012e 19       		.uleb128 0x19
 2275 012f 03       		.uleb128 0x3
 2276 0130 0E       		.uleb128 0xe
 2277 0131 3A       		.uleb128 0x3a
 2278 0132 0B       		.uleb128 0xb
 2279 0133 3B       		.uleb128 0x3b
 2280 0134 05       		.uleb128 0x5
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 56


 2281 0135 27       		.uleb128 0x27
 2282 0136 19       		.uleb128 0x19
 2283 0137 11       		.uleb128 0x11
 2284 0138 01       		.uleb128 0x1
 2285 0139 12       		.uleb128 0x12
 2286 013a 06       		.uleb128 0x6
 2287 013b 40       		.uleb128 0x40
 2288 013c 18       		.uleb128 0x18
 2289 013d 9742     		.uleb128 0x2117
 2290 013f 19       		.uleb128 0x19
 2291 0140 01       		.uleb128 0x1
 2292 0141 13       		.uleb128 0x13
 2293 0142 00       		.byte	0
 2294 0143 00       		.byte	0
 2295 0144 14       		.uleb128 0x14
 2296 0145 2E       		.uleb128 0x2e
 2297 0146 01       		.byte	0x1
 2298 0147 3F       		.uleb128 0x3f
 2299 0148 19       		.uleb128 0x19
 2300 0149 03       		.uleb128 0x3
 2301 014a 0E       		.uleb128 0xe
 2302 014b 3A       		.uleb128 0x3a
 2303 014c 0B       		.uleb128 0xb
 2304 014d 3B       		.uleb128 0x3b
 2305 014e 05       		.uleb128 0x5
 2306 014f 27       		.uleb128 0x27
 2307 0150 19       		.uleb128 0x19
 2308 0151 11       		.uleb128 0x11
 2309 0152 01       		.uleb128 0x1
 2310 0153 12       		.uleb128 0x12
 2311 0154 06       		.uleb128 0x6
 2312 0155 40       		.uleb128 0x40
 2313 0156 18       		.uleb128 0x18
 2314 0157 9642     		.uleb128 0x2116
 2315 0159 19       		.uleb128 0x19
 2316 015a 01       		.uleb128 0x1
 2317 015b 13       		.uleb128 0x13
 2318 015c 00       		.byte	0
 2319 015d 00       		.byte	0
 2320 015e 15       		.uleb128 0x15
 2321 015f 34       		.uleb128 0x34
 2322 0160 00       		.byte	0
 2323 0161 03       		.uleb128 0x3
 2324 0162 0E       		.uleb128 0xe
 2325 0163 3A       		.uleb128 0x3a
 2326 0164 0B       		.uleb128 0xb
 2327 0165 3B       		.uleb128 0x3b
 2328 0166 0B       		.uleb128 0xb
 2329 0167 49       		.uleb128 0x49
 2330 0168 13       		.uleb128 0x13
 2331 0169 3F       		.uleb128 0x3f
 2332 016a 19       		.uleb128 0x19
 2333 016b 02       		.uleb128 0x2
 2334 016c 18       		.uleb128 0x18
 2335 016d 00       		.byte	0
 2336 016e 00       		.byte	0
 2337 016f 00       		.byte	0
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 57


 2338              		.section	.debug_aranges,"",%progbits
 2339 0000 AC000000 		.4byte	0xac
 2340 0004 0200     		.2byte	0x2
 2341 0006 00000000 		.4byte	.Ldebug_info0
 2342 000a 04       		.byte	0x4
 2343 000b 00       		.byte	0
 2344 000c 0000     		.2byte	0
 2345 000e 0000     		.2byte	0
 2346 0010 00000000 		.4byte	.LFB2
 2347 0014 24000000 		.4byte	.LFE2-.LFB2
 2348 0018 00000000 		.4byte	.LFB3
 2349 001c 58020000 		.4byte	.LFE3-.LFB3
 2350 0020 00000000 		.4byte	.LFB4
 2351 0024 38000000 		.4byte	.LFE4-.LFB4
 2352 0028 00000000 		.4byte	.LFB5
 2353 002c 18000000 		.4byte	.LFE5-.LFB5
 2354 0030 00000000 		.4byte	.LFB6
 2355 0034 1C000000 		.4byte	.LFE6-.LFB6
 2356 0038 00000000 		.4byte	.LFB7
 2357 003c 1C000000 		.4byte	.LFE7-.LFB7
 2358 0040 00000000 		.4byte	.LFB8
 2359 0044 7C000000 		.4byte	.LFE8-.LFB8
 2360 0048 00000000 		.4byte	.LFB9
 2361 004c 4C000000 		.4byte	.LFE9-.LFB9
 2362 0050 00000000 		.4byte	.LFB10
 2363 0054 1C000000 		.4byte	.LFE10-.LFB10
 2364 0058 00000000 		.4byte	.LFB11
 2365 005c 1C000000 		.4byte	.LFE11-.LFB11
 2366 0060 00000000 		.4byte	.LFB12
 2367 0064 30000000 		.4byte	.LFE12-.LFB12
 2368 0068 00000000 		.4byte	.LFB13
 2369 006c 2C000000 		.4byte	.LFE13-.LFB13
 2370 0070 00000000 		.4byte	.LFB14
 2371 0074 1C000000 		.4byte	.LFE14-.LFB14
 2372 0078 00000000 		.4byte	.LFB15
 2373 007c 1C000000 		.4byte	.LFE15-.LFB15
 2374 0080 00000000 		.4byte	.LFB16
 2375 0084 30000000 		.4byte	.LFE16-.LFB16
 2376 0088 00000000 		.4byte	.LFB17
 2377 008c 2C000000 		.4byte	.LFE17-.LFB17
 2378 0090 00000000 		.4byte	.LFB18
 2379 0094 A4000000 		.4byte	.LFE18-.LFB18
 2380 0098 00000000 		.4byte	.LFB19
 2381 009c 98000000 		.4byte	.LFE19-.LFB19
 2382 00a0 00000000 		.4byte	.LFB20
 2383 00a4 80000000 		.4byte	.LFE20-.LFB20
 2384 00a8 00000000 		.4byte	0
 2385 00ac 00000000 		.4byte	0
 2386              		.section	.debug_ranges,"",%progbits
 2387              	.Ldebug_ranges0:
 2388 0000 00000000 		.4byte	.LFB2
 2389 0004 24000000 		.4byte	.LFE2
 2390 0008 00000000 		.4byte	.LFB3
 2391 000c 58020000 		.4byte	.LFE3
 2392 0010 00000000 		.4byte	.LFB4
 2393 0014 38000000 		.4byte	.LFE4
 2394 0018 00000000 		.4byte	.LFB5
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 58


 2395 001c 18000000 		.4byte	.LFE5
 2396 0020 00000000 		.4byte	.LFB6
 2397 0024 1C000000 		.4byte	.LFE6
 2398 0028 00000000 		.4byte	.LFB7
 2399 002c 1C000000 		.4byte	.LFE7
 2400 0030 00000000 		.4byte	.LFB8
 2401 0034 7C000000 		.4byte	.LFE8
 2402 0038 00000000 		.4byte	.LFB9
 2403 003c 4C000000 		.4byte	.LFE9
 2404 0040 00000000 		.4byte	.LFB10
 2405 0044 1C000000 		.4byte	.LFE10
 2406 0048 00000000 		.4byte	.LFB11
 2407 004c 1C000000 		.4byte	.LFE11
 2408 0050 00000000 		.4byte	.LFB12
 2409 0054 30000000 		.4byte	.LFE12
 2410 0058 00000000 		.4byte	.LFB13
 2411 005c 2C000000 		.4byte	.LFE13
 2412 0060 00000000 		.4byte	.LFB14
 2413 0064 1C000000 		.4byte	.LFE14
 2414 0068 00000000 		.4byte	.LFB15
 2415 006c 1C000000 		.4byte	.LFE15
 2416 0070 00000000 		.4byte	.LFB16
 2417 0074 30000000 		.4byte	.LFE16
 2418 0078 00000000 		.4byte	.LFB17
 2419 007c 2C000000 		.4byte	.LFE17
 2420 0080 00000000 		.4byte	.LFB18
 2421 0084 A4000000 		.4byte	.LFE18
 2422 0088 00000000 		.4byte	.LFB19
 2423 008c 98000000 		.4byte	.LFE19
 2424 0090 00000000 		.4byte	.LFB20
 2425 0094 80000000 		.4byte	.LFE20
 2426 0098 00000000 		.4byte	0
 2427 009c 00000000 		.4byte	0
 2428              		.section	.debug_line,"",%progbits
 2429              	.Ldebug_line0:
 2430 0000 A8020000 		.section	.debug_str,"MS",%progbits,1
 2430      02004200 
 2430      00000201 
 2430      FB0E0D00 
 2430      01010101 
 2431              	.LASF10:
 2432 0000 75696E74 		.ascii	"uint16\000"
 2432      313600
 2433              	.LASF49:
 2434 0007 61646347 		.ascii	"adcGain\000"
 2434      61696E00 
 2435              	.LASF23:
 2436 000f 636F756E 		.ascii	"counts\000"
 2436      747300
 2437              	.LASF55:
 2438 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2438      436F756E 
 2438      7473546F 
 2438      5F566F6C 
 2438      747300
 2439              	.LASF36:
 2440 0029 4144435F 		.ascii	"ADC_Init\000"
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 59


 2440      496E6974 
 2440      00
 2441              	.LASF7:
 2442 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2442      206C6F6E 
 2442      6720756E 
 2442      7369676E 
 2442      65642069 
 2443              	.LASF24:
 2444 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2444      496E7075 
 2444      7473506C 
 2444      6163656D 
 2444      656E7400 
 2445              	.LASF28:
 2446 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2446      53746172 
 2446      74436F6E 
 2446      76657274 
 2446      00
 2447              	.LASF6:
 2448 006e 6C6F6E67 		.ascii	"long long int\000"
 2448      206C6F6E 
 2448      6720696E 
 2448      7400
 2449              	.LASF0:
 2450 007c 7369676E 		.ascii	"signed char\000"
 2450      65642063 
 2450      68617200 
 2451              	.LASF30:
 2452 0088 73746174 		.ascii	"status\000"
 2452      757300
 2453              	.LASF13:
 2454 008f 696E7433 		.ascii	"int32\000"
 2454      3200
 2455              	.LASF25:
 2456 0095 4144435F 		.ascii	"ADC_Start\000"
 2456      53746172 
 2456      7400
 2457              	.LASF4:
 2458 009f 6C6F6E67 		.ascii	"long int\000"
 2458      20696E74 
 2458      00
 2459              	.LASF53:
 2460 00a8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2460      436F756E 
 2460      7473546F 
 2460      5F75566F 
 2460      6C747300 
 2461              	.LASF60:
 2462 00bc 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2462      636F756E 
 2462      74735065 
 2462      72313056 
 2462      6F6C7400 
 2463              	.LASF9:
 2464 00d0 75696E74 		.ascii	"uint8\000"
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 60


 2464      3800
 2465              	.LASF16:
 2466 00d6 646F7562 		.ascii	"double\000"
 2466      6C6500
 2467              	.LASF11:
 2468 00dd 75696E74 		.ascii	"uint32\000"
 2468      333200
 2469              	.LASF38:
 2470 00e4 6D61736B 		.ascii	"mask\000"
 2470      00
 2471              	.LASF58:
 2472 00e9 4144435F 		.ascii	"ADC_initVar\000"
 2472      696E6974 
 2472      56617200 
 2473              	.LASF33:
 2474 00f5 7265744D 		.ascii	"retMode\000"
 2474      6F646500 
 2475              	.LASF44:
 2476 00fd 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2476      5365744C 
 2476      696D6974 
 2476      4D61736B 
 2476      00
 2477              	.LASF8:
 2478 010e 756E7369 		.ascii	"unsigned int\000"
 2478      676E6564 
 2478      20696E74 
 2478      00
 2479              	.LASF54:
 2480 011b 75566F6C 		.ascii	"uVolts\000"
 2480      747300
 2481              	.LASF5:
 2482 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 2482      20756E73 
 2482      69676E65 
 2482      6420696E 
 2482      7400
 2483              	.LASF45:
 2484 0134 4144435F 		.ascii	"ADC_SetSatMask\000"
 2484      53657453 
 2484      61744D61 
 2484      736B00
 2485              	.LASF56:
 2486 0143 766F6C74 		.ascii	"volts\000"
 2486      7300
 2487              	.LASF22:
 2488 0149 746D7052 		.ascii	"tmpRegVal\000"
 2488      65675661 
 2488      6C00
 2489              	.LASF3:
 2490 0153 73686F72 		.ascii	"short unsigned int\000"
 2490      7420756E 
 2490      7369676E 
 2490      65642069 
 2490      6E7400
 2491              	.LASF29:
 2492 0166 4144435F 		.ascii	"ADC_StopConvert\000"
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 61


 2492      53746F70 
 2492      436F6E76 
 2492      65727400 
 2493              	.LASF52:
 2494 0176 6D566F6C 		.ascii	"mVolts\000"
 2494      747300
 2495              	.LASF19:
 2496 017d 72656733 		.ascii	"reg32\000"
 2496      3200
 2497              	.LASF14:
 2498 0183 666C6F61 		.ascii	"float32\000"
 2498      74333200 
 2499              	.LASF20:
 2500 018b 73697A65 		.ascii	"sizetype\000"
 2500      74797065 
 2500      00
 2501              	.LASF41:
 2502 0194 6C6F774C 		.ascii	"lowLimit\000"
 2502      696D6974 
 2502      00
 2503              	.LASF42:
 2504 019d 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2504      53657448 
 2504      6967684C 
 2504      696D6974 
 2504      00
 2505              	.LASF39:
 2506 01ae 4144435F 		.ascii	"ADC_EnableInjection\000"
 2506      456E6162 
 2506      6C65496E 
 2506      6A656374 
 2506      696F6E00 
 2507              	.LASF63:
 2508 01c2 433A5C55 		.ascii	"C:\\Users\\Zachary\\Desktop\\embedded\\Ozturk Lab -"
 2508      73657273 
 2508      5C5A6163 
 2508      68617279 
 2508      5C446573 
 2509 01f0 2035202D 		.ascii	" 5 - Rev 1\\Design02\\BLE_Temperature_Measurement01"
 2509      20526576 
 2509      20315C44 
 2509      65736967 
 2509      6E30325C 
 2510 0221 2E637964 		.ascii	".cydsn\000"
 2510      736E00
 2511              	.LASF31:
 2512 0228 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2512      4973456E 
 2512      64436F6E 
 2512      76657273 
 2512      696F6E00 
 2513              	.LASF17:
 2514 023c 696E7436 		.ascii	"int64\000"
 2514      3400
 2515              	.LASF37:
 2516 0242 4144435F 		.ascii	"ADC_SetChanMask\000"
 2516      53657443 
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 62


 2516      68616E4D 
 2516      61736B00 
 2517              	.LASF48:
 2518 0252 4144435F 		.ascii	"ADC_SetGain\000"
 2518      53657447 
 2518      61696E00 
 2519              	.LASF15:
 2520 025e 666C6F61 		.ascii	"float\000"
 2520      7400
 2521              	.LASF61:
 2522 0264 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2522      4320342E 
 2522      382E3420 
 2522      32303134 
 2522      30353236 
 2523 0297 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2523      20726576 
 2523      6973696F 
 2523      6E203231 
 2523      31333538 
 2524 02ca 30202D66 		.ascii	"0 -ffunction-sections\000"
 2524      66756E63 
 2524      74696F6E 
 2524      2D736563 
 2524      74696F6E 
 2525              	.LASF43:
 2526 02e0 68696768 		.ascii	"highLimit\000"
 2526      4C696D69 
 2526      7400
 2527              	.LASF50:
 2528 02ea 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2528      436F756E 
 2528      7473546F 
 2528      5F6D566F 
 2528      6C747300 
 2529              	.LASF40:
 2530 02fe 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2530      5365744C 
 2530      6F774C69 
 2530      6D697400 
 2531              	.LASF62:
 2532 030e 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2532      6E657261 
 2532      7465645F 
 2532      536F7572 
 2532      63655C50 
 2533              	.LASF1:
 2534 032d 756E7369 		.ascii	"unsigned char\000"
 2534      676E6564 
 2534      20636861 
 2534      7200
 2535              	.LASF59:
 2536 033b 4144435F 		.ascii	"ADC_offset\000"
 2536      6F666673 
 2536      657400
 2537              	.LASF2:
 2538 0346 73686F72 		.ascii	"short int\000"
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\cc0fQhTr.s 			page 63


 2538      7420696E 
 2538      7400
 2539              	.LASF27:
 2540 0350 4144435F 		.ascii	"ADC_Stop\000"
 2540      53746F70 
 2540      00
 2541              	.LASF21:
 2542 0359 63684E75 		.ascii	"chNum\000"
 2542      6D00
 2543              	.LASF34:
 2544 035f 6368616E 		.ascii	"chan\000"
 2544      00
 2545              	.LASF18:
 2546 0364 63686172 		.ascii	"char\000"
 2546      00
 2547              	.LASF57:
 2548 0369 4144435F 		.ascii	"ADC_channelsConfig\000"
 2548      6368616E 
 2548      6E656C73 
 2548      436F6E66 
 2548      696700
 2549              	.LASF47:
 2550 037c 6F666673 		.ascii	"offset\000"
 2550      657400
 2551              	.LASF51:
 2552 0383 61646343 		.ascii	"adcCounts\000"
 2552      6F756E74 
 2552      7300
 2553              	.LASF26:
 2554 038d 4144435F 		.ascii	"ADC_Enable\000"
 2554      456E6162 
 2554      6C6500
 2555              	.LASF12:
 2556 0398 696E7431 		.ascii	"int16\000"
 2556      3600
 2557              	.LASF46:
 2558 039e 4144435F 		.ascii	"ADC_SetOffset\000"
 2558      5365744F 
 2558      66667365 
 2558      7400
 2559              	.LASF35:
 2560 03ac 72657375 		.ascii	"result\000"
 2560      6C7400
 2561              	.LASF32:
 2562 03b3 4144435F 		.ascii	"ADC_GetResult16\000"
 2562      47657452 
 2562      6573756C 
 2562      74313600 
 2563              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
