ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,4,4
  24              		.comm	ADC_countsPer10Volt,8,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 8
  29              	ADC_channelsConfig:
  30 0000 00040000 		.word	1024
  31 0004 00040000 		.word	1024
  32              		.section	.text.ADC_Start,"ax",%progbits
  33              		.align	2
  34              		.global	ADC_Start
  35              		.code	16
  36              		.thumb_func
  37              		.type	ADC_Start, %function
  38              	ADC_Start:
  39              	.LFB2:
  40              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.10
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 2


  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u, 0x00000400u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  41              		.loc 1 64 0
  42              		.cfi_startproc
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 3


  49              		.loc 1 66 0
  50 0004 064B     		ldr	r3, .L3
  51 0006 1B78     		ldrb	r3, [r3]
  52 0008 002B     		cmp	r3, #0
  53 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  54              		.loc 1 68 0
  55 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  56              		.loc 1 69 0
  57 0010 034B     		ldr	r3, .L3
  58 0012 0122     		mov	r2, #1
  59 0014 1A70     		strb	r2, [r3]
  60              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  61              		.loc 1 71 0
  62 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  63              		.loc 1 72 0
  64 001a BD46     		mov	sp, r7
  65              		@ sp needed
  66 001c 80BD     		pop	{r7, pc}
  67              	.L4:
  68 001e C046     		.align	2
  69              	.L3:
  70 0020 00000000 		.word	ADC_initVar
  71              		.cfi_endproc
  72              	.LFE2:
  73              		.size	ADC_Start, .-ADC_Start
  74              		.global	__aeabi_idiv
  75              		.section	.text.ADC_Init,"ax",%progbits
  76              		.align	2
  77              		.global	ADC_Init
  78              		.code	16
  79              		.thumb_func
  80              		.type	ADC_Init, %function
  81              	ADC_Init:
  82              	.LFB3:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 4


  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  83              		.loc 1 95 0
  84              		.cfi_startproc
  85 0000 90B5     		push	{r4, r7, lr}
  86              		.cfi_def_cfa_offset 12
  87              		.cfi_offset 4, -12
  88              		.cfi_offset 7, -8
  89              		.cfi_offset 14, -4
  90 0002 85B0     		sub	sp, sp, #20
  91              		.cfi_def_cfa_offset 32
  92 0004 00AF     		add	r7, sp, #0
  93              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****         };
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 5


 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 137:.\Generated_Source\PSoC4/ADC.c **** 
 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  94              		.loc 1 140 0
  95 0006 0F20     		mov	r0, #15
  96 0008 0321     		mov	r1, #3
  97 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  98              		.loc 1 141 0
  99 000e 774B     		ldr	r3, .L20
 100 0010 0F20     		mov	r0, #15
 101 0012 191C     		mov	r1, r3
 102 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 103              		.loc 1 145 0
 104 0018 754B     		ldr	r3, .L20+4
 105 001a 0122     		mov	r2, #1
 106 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 107              		.loc 1 146 0
 108 001e 754B     		ldr	r3, .L20+8
 109 0020 744A     		ldr	r2, .L20+8
 110 0022 1168     		ldr	r1, [r2]
 147:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 148:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 111              		.loc 1 148 0
 112 0024 744A     		ldr	r2, .L20+12
 113 0026 1268     		ldr	r2, [r2]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 114              		.loc 1 146 0
 115 0028 002A     		cmp	r2, #0
 116 002a 01DA     		bge	.L6
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 117              		.loc 1 146 0 is_stmt 0 discriminator 1
 118 002c 734A     		ldr	r2, .L20+16
 119 002e 00E0     		b	.L7
 120              	.L6:
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 121              		.loc 1 146 0 discriminator 2
 122 0030 734A     		ldr	r2, .L20+20
 123              	.L7:
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 124              		.loc 1 146 0 discriminator 3
 125 0032 0A43     		orr	r2, r1
 126 0034 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 127              		.loc 1 150 0 is_stmt 1 discriminator 3
 128 0036 734B     		ldr	r3, .L20+24
 129 0038 734A     		ldr	r2, .L20+28
 130 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 6


 131              		.loc 1 151 0 discriminator 3
 132 003c 734B     		ldr	r3, .L20+32
 133 003e 744A     		ldr	r2, .L20+36
 134 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 135              		.loc 1 152 0 discriminator 3
 136 0042 744B     		ldr	r3, .L20+40
 137 0044 0022     		mov	r2, #0
 138 0046 1A60     		str	r2, [r3]
 153:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 139              		.loc 1 153 0 discriminator 3
 140 0048 734B     		ldr	r3, .L20+44
 141 004a 744A     		ldr	r2, .L20+48
 142 004c 1A60     		str	r2, [r3]
 154:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 143              		.loc 1 154 0 discriminator 3
 144 004e 744B     		ldr	r3, .L20+52
 145 0050 724A     		ldr	r2, .L20+48
 146 0052 1A60     		str	r2, [r3]
 155:.\Generated_Source\PSoC4/ADC.c ****     
 156:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 157:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 158:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 147              		.loc 1 158 0 discriminator 3
 148 0054 734B     		ldr	r3, .L20+56
 149 0056 734A     		ldr	r2, .L20+56
 150 0058 1268     		ldr	r2, [r2]
 151 005a 8021     		mov	r1, #128
 152 005c 4902     		lsl	r1, r1, #9
 153 005e 0A43     		orr	r2, r1
 154 0060 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 160:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 161:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 155              		.loc 1 161 0 discriminator 3
 156 0062 714B     		ldr	r3, .L20+60
 157 0064 704A     		ldr	r2, .L20+60
 158 0066 1268     		ldr	r2, [r2]
 159 0068 8021     		mov	r1, #128
 160 006a 4902     		lsl	r1, r1, #9
 161 006c 0A43     		orr	r2, r1
 162 006e 1A60     		str	r2, [r3]
 162:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 163:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 164:.\Generated_Source\PSoC4/ADC.c **** 
 165:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 163              		.loc 1 165 0 discriminator 3
 164 0070 6E4B     		ldr	r3, .L20+64
 165 0072 0022     		mov	r2, #0
 166 0074 1A60     		str	r2, [r3]
 166:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 167              		.loc 1 166 0 discriminator 3
 168 0076 6E4B     		ldr	r3, .L20+68
 169 0078 0022     		mov	r2, #0
 170 007a 1A60     		str	r2, [r3]
 167:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 171              		.loc 1 167 0 discriminator 3
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 7


 172 007c 6D4B     		ldr	r3, .L20+72
 173 007e 1122     		mov	r2, #17
 174 0080 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC.c **** 
 169:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 170:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 171:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 172:.\Generated_Source\PSoC4/ADC.c **** 
 173:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 174:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 175              		.loc 1 174 0 discriminator 3
 176 0082 6D4B     		ldr	r3, .L20+76
 177 0084 1B68     		ldr	r3, [r3]
 178 0086 7B60     		str	r3, [r7, #4]
 175:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 179              		.loc 1 175 0 discriminator 3
 180 0088 7A68     		ldr	r2, [r7, #4]
 181 008a 6C4B     		ldr	r3, .L20+80
 182 008c 1340     		and	r3, r2
 183 008e 7B60     		str	r3, [r7, #4]
 176:.\Generated_Source\PSoC4/ADC.c ****     
 177:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 178:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 179:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 180:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 181:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 182:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 183:.\Generated_Source\PSoC4/ADC.c ****     #else
 184:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 185:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC.c ****         #else
 188:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 184              		.loc 1 188 0 discriminator 3
 185 0090 7B68     		ldr	r3, [r7, #4]
 186 0092 8022     		mov	r2, #128
 187 0094 9205     		lsl	r2, r2, #22
 188 0096 1343     		orr	r3, r2
 189 0098 7B60     		str	r3, [r7, #4]
 189:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 190              		.loc 1 189 0 discriminator 3
 191 009a 7B68     		ldr	r3, [r7, #4]
 192 009c 0122     		mov	r2, #1
 193 009e 9343     		bic	r3, r2
 194 00a0 7B60     		str	r3, [r7, #4]
 190:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 191:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 192:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 193:.\Generated_Source\PSoC4/ADC.c ****     
 194:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 195              		.loc 1 194 0 discriminator 3
 196 00a2 654B     		ldr	r3, .L20+76
 197 00a4 7A68     		ldr	r2, [r7, #4]
 198 00a6 1A60     		str	r2, [r3]
 195:.\Generated_Source\PSoC4/ADC.c **** 
 196:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 197:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 8


 198:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 199:.\Generated_Source\PSoC4/ADC.c **** 
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 199              		.loc 1 200 0 discriminator 3
 200 00a8 0023     		mov	r3, #0
 201 00aa FB60     		str	r3, [r7, #12]
 202 00ac 96E0     		b	.L8
 203              	.L19:
 201:.\Generated_Source\PSoC4/ADC.c ****     {
 202:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 204              		.loc 1 202 0
 205 00ae 644B     		ldr	r3, .L20+84
 206 00b0 FA68     		ldr	r2, [r7, #12]
 207 00b2 9200     		lsl	r2, r2, #2
 208 00b4 D258     		ldr	r2, [r2, r3]
 209 00b6 DC23     		mov	r3, #220
 210 00b8 9B01     		lsl	r3, r3, #6
 211 00ba 1340     		and	r3, r2
 212 00bc 7B60     		str	r3, [r7, #4]
 203:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 204:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 213              		.loc 1 204 0
 214 00be 614A     		ldr	r2, .L20+88
 215 00c0 FB68     		ldr	r3, [r7, #12]
 216 00c2 D318     		add	r3, r2, r3
 217 00c4 1B78     		ldrb	r3, [r3]
 218 00c6 7A68     		ldr	r2, [r7, #4]
 219 00c8 1343     		orr	r3, r2
 220 00ca 7B60     		str	r3, [r7, #4]
 205:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 206:.\Generated_Source\PSoC4/ADC.c ****         
 207:.\Generated_Source\PSoC4/ADC.c ****         
 208:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 209:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 210:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 211:.\Generated_Source\PSoC4/ADC.c ****         */
 212:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 213:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 214:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 215:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 216:.\Generated_Source\PSoC4/ADC.c **** 
 217:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 218:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 221              		.loc 1 218 0
 222 00cc FB68     		ldr	r3, [r7, #12]
 223 00ce 002B     		cmp	r3, #0
 224 00d0 2AD1     		bne	.L9
 219:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 220:.\Generated_Source\PSoC4/ADC.c ****         {
 221:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 225              		.loc 1 221 0
 226 00d2 FB68     		ldr	r3, [r7, #12]
 227 00d4 9B00     		lsl	r3, r3, #2
 228 00d6 5C4A     		ldr	r2, .L20+92
 229 00d8 9B18     		add	r3, r3, r2
 230 00da 7A68     		ldr	r2, [r7, #4]
 231 00dc 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 9


 222:.\Generated_Source\PSoC4/ADC.c **** 
 223:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 232              		.loc 1 223 0
 233 00de 584B     		ldr	r3, .L20+84
 234 00e0 FA68     		ldr	r2, [r7, #12]
 235 00e2 9200     		lsl	r2, r2, #2
 236 00e4 D258     		ldr	r2, [r2, r3]
 237 00e6 0123     		mov	r3, #1
 238 00e8 1340     		and	r3, r2
 239 00ea 0AD0     		beq	.L10
 224:.\Generated_Source\PSoC4/ADC.c ****             {
 225:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 240              		.loc 1 225 0
 241 00ec 4F4B     		ldr	r3, .L20+64
 242 00ee 4F4A     		ldr	r2, .L20+64
 243 00f0 1168     		ldr	r1, [r2]
 244 00f2 FA68     		ldr	r2, [r7, #12]
 245 00f4 0120     		mov	r0, #1
 246 00f6 041C     		mov	r4, r0
 247 00f8 9440     		lsl	r4, r4, r2
 248 00fa 221C     		mov	r2, r4
 249 00fc 92B2     		uxth	r2, r2
 250 00fe 0A43     		orr	r2, r1
 251 0100 1A60     		str	r2, [r3]
 252              	.L10:
 226:.\Generated_Source\PSoC4/ADC.c ****             }
 227:.\Generated_Source\PSoC4/ADC.c **** 
 228:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 253              		.loc 1 228 0
 254 0102 4F4B     		ldr	r3, .L20+84
 255 0104 FA68     		ldr	r2, [r7, #12]
 256 0106 9200     		lsl	r2, r2, #2
 257 0108 D258     		ldr	r2, [r2, r3]
 258 010a 0223     		mov	r3, #2
 259 010c 1340     		and	r3, r2
 260 010e 2BD0     		beq	.L12
 229:.\Generated_Source\PSoC4/ADC.c ****             {
 230:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 261              		.loc 1 230 0
 262 0110 474B     		ldr	r3, .L20+68
 263 0112 474A     		ldr	r2, .L20+68
 264 0114 1168     		ldr	r1, [r2]
 265 0116 FA68     		ldr	r2, [r7, #12]
 266 0118 0120     		mov	r0, #1
 267 011a 041C     		mov	r4, r0
 268 011c 9440     		lsl	r4, r4, r2
 269 011e 221C     		mov	r2, r4
 270 0120 92B2     		uxth	r2, r2
 271 0122 0A43     		orr	r2, r1
 272 0124 1A60     		str	r2, [r3]
 273 0126 1FE0     		b	.L12
 274              	.L9:
 231:.\Generated_Source\PSoC4/ADC.c ****             }
 232:.\Generated_Source\PSoC4/ADC.c ****         }
 233:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 234:.\Generated_Source\PSoC4/ADC.c ****             else
 235:.\Generated_Source\PSoC4/ADC.c ****             {
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 10


 236:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 275              		.loc 1 236 0
 276 0128 484B     		ldr	r3, .L20+96
 277 012a 7A68     		ldr	r2, [r7, #4]
 278 012c 8021     		mov	r1, #128
 279 012e C905     		lsl	r1, r1, #23
 280 0130 0A43     		orr	r2, r1
 281 0132 1A60     		str	r2, [r3]
 237:.\Generated_Source\PSoC4/ADC.c **** 
 238:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 282              		.loc 1 238 0
 283 0134 424B     		ldr	r3, .L20+84
 284 0136 FA68     		ldr	r2, [r7, #12]
 285 0138 9200     		lsl	r2, r2, #2
 286 013a D258     		ldr	r2, [r2, r3]
 287 013c 0123     		mov	r3, #1
 288 013e 1340     		and	r3, r2
 289 0140 05D0     		beq	.L13
 239:.\Generated_Source\PSoC4/ADC.c ****                 {
 240:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 290              		.loc 1 240 0
 291 0142 3C4B     		ldr	r3, .L20+72
 292 0144 3B4A     		ldr	r2, .L20+72
 293 0146 1268     		ldr	r2, [r2]
 294 0148 2021     		mov	r1, #32
 295 014a 0A43     		orr	r2, r1
 296 014c 1A60     		str	r2, [r3]
 297              	.L13:
 241:.\Generated_Source\PSoC4/ADC.c ****                 }
 242:.\Generated_Source\PSoC4/ADC.c **** 
 243:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 298              		.loc 1 243 0
 299 014e 3C4B     		ldr	r3, .L20+84
 300 0150 FA68     		ldr	r2, [r7, #12]
 301 0152 9200     		lsl	r2, r2, #2
 302 0154 D258     		ldr	r2, [r2, r3]
 303 0156 0223     		mov	r3, #2
 304 0158 1340     		and	r3, r2
 305 015a 05D0     		beq	.L12
 244:.\Generated_Source\PSoC4/ADC.c ****                 {
 245:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 306              		.loc 1 245 0
 307 015c 354B     		ldr	r3, .L20+72
 308 015e 354A     		ldr	r2, .L20+72
 309 0160 1268     		ldr	r2, [r2]
 310 0162 4021     		mov	r1, #64
 311 0164 0A43     		orr	r2, r1
 312 0166 1A60     		str	r2, [r3]
 313              	.L12:
 246:.\Generated_Source\PSoC4/ADC.c ****                 }
 247:.\Generated_Source\PSoC4/ADC.c ****             }
 248:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 249:.\Generated_Source\PSoC4/ADC.c **** 
 250:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 314              		.loc 1 250 0
 315 0168 354B     		ldr	r3, .L20+84
 316 016a FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 11


 317 016c 9200     		lsl	r2, r2, #2
 318 016e D258     		ldr	r2, [r2, r3]
 319 0170 8023     		mov	r3, #128
 320 0172 9B00     		lsl	r3, r3, #2
 321 0174 1340     		and	r3, r2
 322 0176 03D0     		beq	.L14
 251:.\Generated_Source\PSoC4/ADC.c ****         {
 252:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 323              		.loc 1 252 0
 324 0178 8023     		mov	r3, #128
 325 017a 5B00     		lsl	r3, r3, #1
 326 017c BB60     		str	r3, [r7, #8]
 327 017e 02E0     		b	.L15
 328              	.L14:
 253:.\Generated_Source\PSoC4/ADC.c ****         }
 254:.\Generated_Source\PSoC4/ADC.c ****         else
 255:.\Generated_Source\PSoC4/ADC.c ****         {
 256:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 329              		.loc 1 256 0
 330 0180 8023     		mov	r3, #128
 331 0182 5B01     		lsl	r3, r3, #5
 332 0184 BB60     		str	r3, [r7, #8]
 333              	.L15:
 257:.\Generated_Source\PSoC4/ADC.c ****         }
 258:.\Generated_Source\PSoC4/ADC.c **** 
 259:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 334              		.loc 1 259 0
 335 0186 2E4B     		ldr	r3, .L20+84
 336 0188 FA68     		ldr	r2, [r7, #12]
 337 018a 9200     		lsl	r2, r2, #2
 338 018c D258     		ldr	r2, [r2, r3]
 339 018e 8023     		mov	r3, #128
 340 0190 5B00     		lsl	r3, r3, #1
 341 0192 1340     		and	r3, r2
 342 0194 05D1     		bne	.L16
 260:.\Generated_Source\PSoC4/ADC.c ****         {
 261:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 262:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 263:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 264:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 265:.\Generated_Source\PSoC4/ADC.c ****             #else
 266:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 343              		.loc 1 266 0
 344 0196 2E4B     		ldr	r3, .L20+100
 345 0198 FA68     		ldr	r2, [r7, #12]
 346 019a 5200     		lsl	r2, r2, #1
 347 019c 0021     		mov	r1, #0
 348 019e D152     		strh	r1, [r2, r3]
 349 01a0 09E0     		b	.L17
 350              	.L16:
 267:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 268:.\Generated_Source\PSoC4/ADC.c ****         }
 269:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 270:.\Generated_Source\PSoC4/ADC.c ****         {
 271:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 272:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 273:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 12


 351              		.loc 1 273 0
 352 01a2 BB68     		ldr	r3, [r7, #8]
 353 01a4 002B     		cmp	r3, #0
 354 01a6 00DA     		bge	.L18
 355 01a8 0133     		add	r3, r3, #1
 356              	.L18:
 357 01aa 5B10     		asr	r3, r3, #1
 358 01ac 99B2     		uxth	r1, r3
 359 01ae 284B     		ldr	r3, .L20+100
 360 01b0 FA68     		ldr	r2, [r7, #12]
 361 01b2 5200     		lsl	r2, r2, #1
 362 01b4 D152     		strh	r1, [r2, r3]
 363              	.L17:
 274:.\Generated_Source\PSoC4/ADC.c ****             #else
 275:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 276:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 277:.\Generated_Source\PSoC4/ADC.c ****         }
 278:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 279:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 364              		.loc 1 279 0
 365 01b6 BB68     		ldr	r3, [r7, #8]
 366 01b8 264A     		ldr	r2, .L20+104
 367 01ba 5343     		mul	r3, r2
 368 01bc 264A     		ldr	r2, .L20+108
 369 01be 9B18     		add	r3, r3, r2
 280:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 370              		.loc 1 280 0
 371 01c0 181C     		mov	r0, r3
 372 01c2 2649     		ldr	r1, .L20+112
 373 01c4 FFF7FEFF 		bl	__aeabi_idiv
 374 01c8 031C     		mov	r3, r0
 279:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 375              		.loc 1 279 0
 376 01ca 9BB2     		uxth	r3, r3
 377 01cc 19B2     		sxth	r1, r3
 378 01ce 244B     		ldr	r3, .L20+116
 379 01d0 FA68     		ldr	r2, [r7, #12]
 380 01d2 9200     		lsl	r2, r2, #2
 381 01d4 D150     		str	r1, [r2, r3]
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 382              		.loc 1 200 0
 383 01d6 FB68     		ldr	r3, [r7, #12]
 384 01d8 0133     		add	r3, r3, #1
 385 01da FB60     		str	r3, [r7, #12]
 386              	.L8:
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 387              		.loc 1 200 0 is_stmt 0 discriminator 1
 388 01dc FB68     		ldr	r3, [r7, #12]
 389 01de 012B     		cmp	r3, #1
 390 01e0 00D8     		bhi	.LCB318
 391 01e2 64E7     		b	.L19	@long jump
 392              	.LCB318:
 281:.\Generated_Source\PSoC4/ADC.c ****     }
 282:.\Generated_Source\PSoC4/ADC.c **** }
 393              		.loc 1 282 0 is_stmt 1
 394 01e4 BD46     		mov	sp, r7
 395 01e6 05B0     		add	sp, sp, #20
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 13


 396              		@ sp needed
 397 01e8 90BD     		pop	{r4, r7, pc}
 398              	.L21:
 399 01ea C046     		.align	2
 400              	.L20:
 401 01ec 00000000 		.word	ADC_ISR
 402 01f0 20003A40 		.word	1077542944
 403 01f4 00003A40 		.word	1077542912
 404 01f8 80033A40 		.word	1077543808
 405 01fc 70201013 		.word	319823984
 406 0200 70200013 		.word	318775408
 407 0204 04003A40 		.word	1077542916
 408 0208 C4000A80 		.word	-2146828092
 409 020c 18003A40 		.word	1077542936
 410 0210 0000FF07 		.word	134152192
 411 0214 1C003A40 		.word	1077542940
 412 0218 10003A40 		.word	1077542928
 413 021c 02000200 		.word	131074
 414 0220 14003A40 		.word	1077542932
 415 0224 00033A40 		.word	1077543680
 416 0228 40033A40 		.word	1077543744
 417 022c 28023A40 		.word	1077543464
 418 0230 38023A40 		.word	1077543480
 419 0234 18023A40 		.word	1077543448
 420 0238 30003A40 		.word	1077542960
 421 023c FFFFFFDF 		.word	-536870913
 422 0240 00000000 		.word	ADC_channelsConfig
 423 0244 08000000 		.word	ADC_InputsPlacement.4749
 424 0248 80003A40 		.word	1077543040
 425 024c 80023A40 		.word	1077543552
 426 0250 00000000 		.word	ADC_offset
 427 0254 10270000 		.word	10000
 428 0258 B80B0000 		.word	3000
 429 025c 70170000 		.word	6000
 430 0260 00000000 		.word	ADC_countsPer10Volt
 431              		.cfi_endproc
 432              	.LFE3:
 433              		.size	ADC_Init, .-ADC_Init
 434              		.section	.text.ADC_Enable,"ax",%progbits
 435              		.align	2
 436              		.global	ADC_Enable
 437              		.code	16
 438              		.thumb_func
 439              		.type	ADC_Enable, %function
 440              	ADC_Enable:
 441              	.LFB4:
 283:.\Generated_Source\PSoC4/ADC.c **** 
 284:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 285:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 286:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 289:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 14


 294:.\Generated_Source\PSoC4/ADC.c **** * Return:
 295:.\Generated_Source\PSoC4/ADC.c **** *  None.
 296:.\Generated_Source\PSoC4/ADC.c **** *
 297:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 298:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 299:.\Generated_Source\PSoC4/ADC.c **** {
 442              		.loc 1 299 0
 443              		.cfi_startproc
 444 0000 80B5     		push	{r7, lr}
 445              		.cfi_def_cfa_offset 8
 446              		.cfi_offset 7, -8
 447              		.cfi_offset 14, -4
 448 0002 00AF     		add	r7, sp, #0
 449              		.cfi_def_cfa_register 7
 300:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 450              		.loc 1 300 0
 451 0004 0A4B     		ldr	r3, .L25
 452 0006 1B68     		ldr	r3, [r3]
 453 0008 002B     		cmp	r3, #0
 454 000a 0EDB     		blt	.L22
 301:.\Generated_Source\PSoC4/ADC.c ****     {
 302:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 303:.\Generated_Source\PSoC4/ADC.c **** 
 304:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 455              		.loc 1 304 0
 456 000c C046     		mov	r8, r8
 457              	.L24:
 458              		.loc 1 304 0 is_stmt 0 discriminator 1
 459 000e 094B     		ldr	r3, .L25+4
 460 0010 1B68     		ldr	r3, [r3]
 461 0012 002B     		cmp	r3, #0
 462 0014 FBDB     		blt	.L24
 305:.\Generated_Source\PSoC4/ADC.c ****             {
 306:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 307:.\Generated_Source\PSoC4/ADC.c ****             }
 308:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 309:.\Generated_Source\PSoC4/ADC.c ****         
 310:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 463              		.loc 1 310 0 is_stmt 1
 464 0016 064B     		ldr	r3, .L25
 465 0018 054A     		ldr	r2, .L25
 466 001a 1268     		ldr	r2, [r2]
 467 001c 8021     		mov	r1, #128
 468 001e 0906     		lsl	r1, r1, #24
 469 0020 0A43     		orr	r2, r1
 470 0022 1A60     		str	r2, [r3]
 311:.\Generated_Source\PSoC4/ADC.c ****         
 312:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 313:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 471              		.loc 1 313 0
 472 0024 0A20     		mov	r0, #10
 473 0026 FFF7FEFF 		bl	CyDelayUs
 474              	.L22:
 314:.\Generated_Source\PSoC4/ADC.c ****     }
 315:.\Generated_Source\PSoC4/ADC.c **** }
 475              		.loc 1 315 0
 476 002a BD46     		mov	sp, r7
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 15


 477              		@ sp needed
 478 002c 80BD     		pop	{r7, pc}
 479              	.L26:
 480 002e C046     		.align	2
 481              	.L25:
 482 0030 00003A40 		.word	1077542912
 483 0034 08023A40 		.word	1077543432
 484              		.cfi_endproc
 485              	.LFE4:
 486              		.size	ADC_Enable, .-ADC_Enable
 487              		.section	.text.ADC_Stop,"ax",%progbits
 488              		.align	2
 489              		.global	ADC_Stop
 490              		.code	16
 491              		.thumb_func
 492              		.type	ADC_Stop, %function
 493              	ADC_Stop:
 494              	.LFB5:
 316:.\Generated_Source\PSoC4/ADC.c **** 
 317:.\Generated_Source\PSoC4/ADC.c **** 
 318:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 319:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 320:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 321:.\Generated_Source\PSoC4/ADC.c **** *
 322:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 323:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 324:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** * Return:
 330:.\Generated_Source\PSoC4/ADC.c **** *  None.
 331:.\Generated_Source\PSoC4/ADC.c **** *
 332:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 333:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 334:.\Generated_Source\PSoC4/ADC.c **** {
 495              		.loc 1 334 0
 496              		.cfi_startproc
 497 0000 80B5     		push	{r7, lr}
 498              		.cfi_def_cfa_offset 8
 499              		.cfi_offset 7, -8
 500              		.cfi_offset 14, -4
 501 0002 00AF     		add	r7, sp, #0
 502              		.cfi_def_cfa_register 7
 335:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 503              		.loc 1 335 0
 504 0004 034B     		ldr	r3, .L28
 505 0006 034A     		ldr	r2, .L28
 506 0008 1268     		ldr	r2, [r2]
 507 000a 5200     		lsl	r2, r2, #1
 508 000c 5208     		lsr	r2, r2, #1
 509 000e 1A60     		str	r2, [r3]
 336:.\Generated_Source\PSoC4/ADC.c **** }
 510              		.loc 1 336 0
 511 0010 BD46     		mov	sp, r7
 512              		@ sp needed
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 16


 513 0012 80BD     		pop	{r7, pc}
 514              	.L29:
 515              		.align	2
 516              	.L28:
 517 0014 00003A40 		.word	1077542912
 518              		.cfi_endproc
 519              	.LFE5:
 520              		.size	ADC_Stop, .-ADC_Stop
 521              		.section	.text.ADC_StartConvert,"ax",%progbits
 522              		.align	2
 523              		.global	ADC_StartConvert
 524              		.code	16
 525              		.thumb_func
 526              		.type	ADC_StartConvert, %function
 527              	ADC_StartConvert:
 528              	.LFB6:
 337:.\Generated_Source\PSoC4/ADC.c **** 
 338:.\Generated_Source\PSoC4/ADC.c **** 
 339:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 340:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 341:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 342:.\Generated_Source\PSoC4/ADC.c **** *
 343:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 344:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 345:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 346:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 347:.\Generated_Source\PSoC4/ADC.c **** *
 348:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 349:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 350:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** * Return:
 356:.\Generated_Source\PSoC4/ADC.c **** *  None.
 357:.\Generated_Source\PSoC4/ADC.c **** *
 358:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 359:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 360:.\Generated_Source\PSoC4/ADC.c **** {
 529              		.loc 1 360 0
 530              		.cfi_startproc
 531 0000 80B5     		push	{r7, lr}
 532              		.cfi_def_cfa_offset 8
 533              		.cfi_offset 7, -8
 534              		.cfi_offset 14, -4
 535 0002 00AF     		add	r7, sp, #0
 536              		.cfi_def_cfa_register 7
 361:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 362:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 363:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 364:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 537              		.loc 1 364 0
 538 0004 024B     		ldr	r3, .L31
 539 0006 0122     		mov	r2, #1
 540 0008 1A60     		str	r2, [r3]
 365:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 17


 366:.\Generated_Source\PSoC4/ADC.c **** 
 367:.\Generated_Source\PSoC4/ADC.c **** }
 541              		.loc 1 367 0
 542 000a BD46     		mov	sp, r7
 543              		@ sp needed
 544 000c 80BD     		pop	{r7, pc}
 545              	.L32:
 546 000e C046     		.align	2
 547              	.L31:
 548 0010 24003A40 		.word	1077542948
 549              		.cfi_endproc
 550              	.LFE6:
 551              		.size	ADC_StartConvert, .-ADC_StartConvert
 552              		.section	.text.ADC_StopConvert,"ax",%progbits
 553              		.align	2
 554              		.global	ADC_StopConvert
 555              		.code	16
 556              		.thumb_func
 557              		.type	ADC_StopConvert, %function
 558              	ADC_StopConvert:
 559              	.LFB7:
 368:.\Generated_Source\PSoC4/ADC.c **** 
 369:.\Generated_Source\PSoC4/ADC.c **** 
 370:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 371:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 372:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 375:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 376:.\Generated_Source\PSoC4/ADC.c **** *
 377:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** * Return:
 381:.\Generated_Source\PSoC4/ADC.c **** *  None.
 382:.\Generated_Source\PSoC4/ADC.c **** *
 383:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 384:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 385:.\Generated_Source\PSoC4/ADC.c **** {
 560              		.loc 1 385 0
 561              		.cfi_startproc
 562 0000 80B5     		push	{r7, lr}
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 00AF     		add	r7, sp, #0
 567              		.cfi_def_cfa_register 7
 386:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 387:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 388:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 389:.\Generated_Source\PSoC4/ADC.c **** }
 568              		.loc 1 389 0
 569 0004 BD46     		mov	sp, r7
 570              		@ sp needed
 571 0006 80BD     		pop	{r7, pc}
 572              		.cfi_endproc
 573              	.LFE7:
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 18


 574              		.size	ADC_StopConvert, .-ADC_StopConvert
 575              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 576              		.align	2
 577              		.global	ADC_IsEndConversion
 578              		.code	16
 579              		.thumb_func
 580              		.type	ADC_IsEndConversion, %function
 581              	ADC_IsEndConversion:
 582              	.LFB8:
 390:.\Generated_Source\PSoC4/ADC.c **** 
 391:.\Generated_Source\PSoC4/ADC.c **** 
 392:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 393:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 394:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 395:.\Generated_Source\PSoC4/ADC.c **** *
 396:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 397:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 398:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 399:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 400:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 401:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 402:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 403:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 404:.\Generated_Source\PSoC4/ADC.c **** *
 405:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 406:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 408:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 409:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 410:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 411:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 412:.\Generated_Source\PSoC4/ADC.c **** *
 413:.\Generated_Source\PSoC4/ADC.c **** * Return:
 414:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 415:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 416:.\Generated_Source\PSoC4/ADC.c **** *
 417:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 418:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 419:.\Generated_Source\PSoC4/ADC.c **** {
 583              		.loc 1 419 0
 584              		.cfi_startproc
 585 0000 80B5     		push	{r7, lr}
 586              		.cfi_def_cfa_offset 8
 587              		.cfi_offset 7, -8
 588              		.cfi_offset 14, -4
 589 0002 84B0     		sub	sp, sp, #16
 590              		.cfi_def_cfa_offset 24
 591 0004 00AF     		add	r7, sp, #0
 592              		.cfi_def_cfa_register 7
 593 0006 7860     		str	r0, [r7, #4]
 420:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 594              		.loc 1 420 0
 595 0008 0023     		mov	r3, #0
 596 000a FB60     		str	r3, [r7, #12]
 421:.\Generated_Source\PSoC4/ADC.c **** 
 422:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 597              		.loc 1 422 0
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 19


 598 000c 7A68     		ldr	r2, [r7, #4]
 599 000e 0323     		mov	r3, #3
 600 0010 1340     		and	r3, r2
 601 0012 11D0     		beq	.L35
 602              	.L37:
 423:.\Generated_Source\PSoC4/ADC.c ****     {
 424:.\Generated_Source\PSoC4/ADC.c ****         do
 425:.\Generated_Source\PSoC4/ADC.c ****         {
 426:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 603              		.loc 1 426 0 discriminator 1
 604 0014 184B     		ldr	r3, .L42
 605 0016 1A68     		ldr	r2, [r3]
 606 0018 0123     		mov	r3, #1
 607 001a 1340     		and	r3, r2
 608 001c FB60     		str	r3, [r7, #12]
 427:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 609              		.loc 1 427 0 discriminator 1
 610 001e FB68     		ldr	r3, [r7, #12]
 611 0020 002B     		cmp	r3, #0
 612 0022 03D1     		bne	.L36
 613 0024 7A68     		ldr	r2, [r7, #4]
 614 0026 0223     		mov	r3, #2
 615 0028 1340     		and	r3, r2
 616 002a F3D1     		bne	.L37
 617              	.L36:
 428:.\Generated_Source\PSoC4/ADC.c **** 
 429:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 618              		.loc 1 429 0
 619 002c FB68     		ldr	r3, [r7, #12]
 620 002e 002B     		cmp	r3, #0
 621 0030 02D0     		beq	.L35
 430:.\Generated_Source\PSoC4/ADC.c ****         {
 431:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 432:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 622              		.loc 1 432 0
 623 0032 114B     		ldr	r3, .L42
 624 0034 0122     		mov	r2, #1
 625 0036 1A60     		str	r2, [r3]
 626              	.L35:
 433:.\Generated_Source\PSoC4/ADC.c ****         }
 434:.\Generated_Source\PSoC4/ADC.c ****     }
 435:.\Generated_Source\PSoC4/ADC.c **** 
 436:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 437:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 627              		.loc 1 437 0
 628 0038 7A68     		ldr	r2, [r7, #4]
 629 003a 0C23     		mov	r3, #12
 630 003c 1340     		and	r3, r2
 631 003e 15D0     		beq	.L38
 632              	.L40:
 438:.\Generated_Source\PSoC4/ADC.c ****         {
 439:.\Generated_Source\PSoC4/ADC.c ****             do
 440:.\Generated_Source\PSoC4/ADC.c ****             {
 441:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 633              		.loc 1 441 0
 634 0040 0D4B     		ldr	r3, .L42
 635 0042 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 20


 636 0044 1023     		mov	r3, #16
 637 0046 1340     		and	r3, r2
 638 0048 FA68     		ldr	r2, [r7, #12]
 639 004a 1343     		orr	r3, r2
 640 004c FB60     		str	r3, [r7, #12]
 442:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 641              		.loc 1 442 0
 642 004e FA68     		ldr	r2, [r7, #12]
 643 0050 1023     		mov	r3, #16
 644 0052 1340     		and	r3, r2
 443:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 645              		.loc 1 443 0
 646 0054 03D1     		bne	.L39
 647              		.loc 1 443 0 is_stmt 0 discriminator 1
 648 0056 7A68     		ldr	r2, [r7, #4]
 649 0058 0823     		mov	r3, #8
 650 005a 1340     		and	r3, r2
 442:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 651              		.loc 1 442 0 is_stmt 1 discriminator 1
 652 005c F0D1     		bne	.L40
 653              	.L39:
 444:.\Generated_Source\PSoC4/ADC.c **** 
 445:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 654              		.loc 1 445 0
 655 005e FA68     		ldr	r2, [r7, #12]
 656 0060 1023     		mov	r3, #16
 657 0062 1340     		and	r3, r2
 658 0064 02D0     		beq	.L38
 446:.\Generated_Source\PSoC4/ADC.c ****             {
 447:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 448:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 659              		.loc 1 448 0
 660 0066 044B     		ldr	r3, .L42
 661 0068 1022     		mov	r2, #16
 662 006a 1A60     		str	r2, [r3]
 663              	.L38:
 449:.\Generated_Source\PSoC4/ADC.c ****             }
 450:.\Generated_Source\PSoC4/ADC.c ****         }
 451:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 664              		.loc 1 453 0
 665 006c FB68     		ldr	r3, [r7, #12]
 454:.\Generated_Source\PSoC4/ADC.c **** }
 666              		.loc 1 454 0
 667 006e 181C     		mov	r0, r3
 668 0070 BD46     		mov	sp, r7
 669 0072 04B0     		add	sp, sp, #16
 670              		@ sp needed
 671 0074 80BD     		pop	{r7, pc}
 672              	.L43:
 673 0076 C046     		.align	2
 674              	.L42:
 675 0078 10023A40 		.word	1077543440
 676              		.cfi_endproc
 677              	.LFE8:
 678              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 21


 679              		.section	.text.ADC_GetResult16,"ax",%progbits
 680              		.align	2
 681              		.global	ADC_GetResult16
 682              		.code	16
 683              		.thumb_func
 684              		.type	ADC_GetResult16, %function
 685              	ADC_GetResult16:
 686              	.LFB9:
 455:.\Generated_Source\PSoC4/ADC.c **** 
 456:.\Generated_Source\PSoC4/ADC.c **** 
 457:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 458:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 459:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 462:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 463:.\Generated_Source\PSoC4/ADC.c **** *
 464:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 465:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 466:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** * Return:
 469:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 470:.\Generated_Source\PSoC4/ADC.c **** *
 471:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 472:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 473:.\Generated_Source\PSoC4/ADC.c **** {
 687              		.loc 1 473 0
 688              		.cfi_startproc
 689 0000 80B5     		push	{r7, lr}
 690              		.cfi_def_cfa_offset 8
 691              		.cfi_offset 7, -8
 692              		.cfi_offset 14, -4
 693 0002 84B0     		sub	sp, sp, #16
 694              		.cfi_def_cfa_offset 24
 695 0004 00AF     		add	r7, sp, #0
 696              		.cfi_def_cfa_register 7
 697 0006 7860     		str	r0, [r7, #4]
 474:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 475:.\Generated_Source\PSoC4/ADC.c **** 
 476:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 477:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 698              		.loc 1 477 0
 699 0008 7B68     		ldr	r3, [r7, #4]
 700 000a 012B     		cmp	r3, #1
 701 000c 02D9     		bls	.L45
 702              		.loc 1 477 0 is_stmt 0 discriminator 1
 703 000e 0020     		mov	r0, #0
 704 0010 FFF7FEFF 		bl	CyHalt
 705              	.L45:
 478:.\Generated_Source\PSoC4/ADC.c **** 
 479:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 706              		.loc 1 479 0 is_stmt 1
 707 0014 7B68     		ldr	r3, [r7, #4]
 708 0016 002B     		cmp	r3, #0
 709 0018 08D1     		bne	.L46
 480:.\Generated_Source\PSoC4/ADC.c ****     {
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 22


 481:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 710              		.loc 1 481 0
 711 001a 7B68     		ldr	r3, [r7, #4]
 712 001c 9B00     		lsl	r3, r3, #2
 713 001e 094A     		ldr	r2, .L49
 714 0020 9B18     		add	r3, r3, r2
 715 0022 1B68     		ldr	r3, [r3]
 716 0024 1B04     		lsl	r3, r3, #16
 717 0026 1B0C     		lsr	r3, r3, #16
 718 0028 FB60     		str	r3, [r7, #12]
 719 002a 04E0     		b	.L47
 720              	.L46:
 482:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 483:.\Generated_Source\PSoC4/ADC.c ****     }
 484:.\Generated_Source\PSoC4/ADC.c ****     else
 485:.\Generated_Source\PSoC4/ADC.c ****     {
 486:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 487:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 721              		.loc 1 487 0
 722 002c 064B     		ldr	r3, .L49+4
 723 002e 1B68     		ldr	r3, [r3]
 724 0030 1B04     		lsl	r3, r3, #16
 725 0032 1B0C     		lsr	r3, r3, #16
 726 0034 FB60     		str	r3, [r7, #12]
 727              	.L47:
 488:.\Generated_Source\PSoC4/ADC.c ****         #else
 489:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 490:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 491:.\Generated_Source\PSoC4/ADC.c ****     }
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 728              		.loc 1 493 0
 729 0036 FB68     		ldr	r3, [r7, #12]
 730 0038 9BB2     		uxth	r3, r3
 731 003a 1BB2     		sxth	r3, r3
 494:.\Generated_Source\PSoC4/ADC.c **** }
 732              		.loc 1 494 0
 733 003c 181C     		mov	r0, r3
 734 003e BD46     		mov	sp, r7
 735 0040 04B0     		add	sp, sp, #16
 736              		@ sp needed
 737 0042 80BD     		pop	{r7, pc}
 738              	.L50:
 739              		.align	2
 740              	.L49:
 741 0044 80013A40 		.word	1077543296
 742 0048 90023A40 		.word	1077543568
 743              		.cfi_endproc
 744              	.LFE9:
 745              		.size	ADC_GetResult16, .-ADC_GetResult16
 746              		.section	.text.ADC_SetChanMask,"ax",%progbits
 747              		.align	2
 748              		.global	ADC_SetChanMask
 749              		.code	16
 750              		.thumb_func
 751              		.type	ADC_SetChanMask, %function
 752              	ADC_SetChanMask:
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 23


 753              	.LFB10:
 495:.\Generated_Source\PSoC4/ADC.c **** 
 496:.\Generated_Source\PSoC4/ADC.c **** 
 497:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 498:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 499:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 502:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 503:.\Generated_Source\PSoC4/ADC.c **** *
 504:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 506:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 507:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 508:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 509:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 510:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 511:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** * Return:
 514:.\Generated_Source\PSoC4/ADC.c **** *  None.
 515:.\Generated_Source\PSoC4/ADC.c **** *
 516:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 517:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 518:.\Generated_Source\PSoC4/ADC.c **** {
 754              		.loc 1 518 0
 755              		.cfi_startproc
 756 0000 80B5     		push	{r7, lr}
 757              		.cfi_def_cfa_offset 8
 758              		.cfi_offset 7, -8
 759              		.cfi_offset 14, -4
 760 0002 82B0     		sub	sp, sp, #8
 761              		.cfi_def_cfa_offset 16
 762 0004 00AF     		add	r7, sp, #0
 763              		.cfi_def_cfa_register 7
 764 0006 7860     		str	r0, [r7, #4]
 519:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 765              		.loc 1 519 0
 766 0008 034B     		ldr	r3, .L52
 767 000a 7968     		ldr	r1, [r7, #4]
 768 000c 0122     		mov	r2, #1
 769 000e 0A40     		and	r2, r1
 770 0010 1A60     		str	r2, [r3]
 520:.\Generated_Source\PSoC4/ADC.c **** }
 771              		.loc 1 520 0
 772 0012 BD46     		mov	sp, r7
 773 0014 02B0     		add	sp, sp, #8
 774              		@ sp needed
 775 0016 80BD     		pop	{r7, pc}
 776              	.L53:
 777              		.align	2
 778              	.L52:
 779 0018 20003A40 		.word	1077542944
 780              		.cfi_endproc
 781              	.LFE10:
 782              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 783              		.section	.text.ADC_EnableInjection,"ax",%progbits
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 24


 784              		.align	2
 785              		.global	ADC_EnableInjection
 786              		.code	16
 787              		.thumb_func
 788              		.type	ADC_EnableInjection, %function
 789              	ADC_EnableInjection:
 790              	.LFB11:
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 523:.\Generated_Source\PSoC4/ADC.c **** 
 524:.\Generated_Source\PSoC4/ADC.c **** 
 525:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 526:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 527:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 528:.\Generated_Source\PSoC4/ADC.c ****     *
 529:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 536:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 537:.\Generated_Source\PSoC4/ADC.c ****     *
 538:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 539:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 540:.\Generated_Source\PSoC4/ADC.c ****     {
 791              		.loc 1 540 0
 792              		.cfi_startproc
 793 0000 80B5     		push	{r7, lr}
 794              		.cfi_def_cfa_offset 8
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 14, -4
 797 0002 00AF     		add	r7, sp, #0
 798              		.cfi_def_cfa_register 7
 541:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 799              		.loc 1 541 0
 800 0004 044B     		ldr	r3, .L55
 801 0006 044A     		ldr	r2, .L55
 802 0008 1268     		ldr	r2, [r2]
 803 000a 8021     		mov	r1, #128
 804 000c 0906     		lsl	r1, r1, #24
 805 000e 0A43     		orr	r2, r1
 806 0010 1A60     		str	r2, [r3]
 542:.\Generated_Source\PSoC4/ADC.c ****     }
 807              		.loc 1 542 0
 808 0012 BD46     		mov	sp, r7
 809              		@ sp needed
 810 0014 80BD     		pop	{r7, pc}
 811              	.L56:
 812 0016 C046     		.align	2
 813              	.L55:
 814 0018 80023A40 		.word	1077543552
 815              		.cfi_endproc
 816              	.LFE11:
 817              		.size	ADC_EnableInjection, .-ADC_EnableInjection
 818              		.section	.text.ADC_SetLowLimit,"ax",%progbits
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 25


 819              		.align	2
 820              		.global	ADC_SetLowLimit
 821              		.code	16
 822              		.thumb_func
 823              		.type	ADC_SetLowLimit, %function
 824              	ADC_SetLowLimit:
 825              	.LFB12:
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 545:.\Generated_Source\PSoC4/ADC.c **** 
 546:.\Generated_Source\PSoC4/ADC.c **** 
 547:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 548:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 549:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 550:.\Generated_Source\PSoC4/ADC.c **** *
 551:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 552:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 555:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** * Return:
 558:.\Generated_Source\PSoC4/ADC.c **** *  None.
 559:.\Generated_Source\PSoC4/ADC.c **** *
 560:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 561:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 562:.\Generated_Source\PSoC4/ADC.c **** {
 826              		.loc 1 562 0
 827              		.cfi_startproc
 828 0000 80B5     		push	{r7, lr}
 829              		.cfi_def_cfa_offset 8
 830              		.cfi_offset 7, -8
 831              		.cfi_offset 14, -4
 832 0002 82B0     		sub	sp, sp, #8
 833              		.cfi_def_cfa_offset 16
 834 0004 00AF     		add	r7, sp, #0
 835              		.cfi_def_cfa_register 7
 836 0006 7860     		str	r0, [r7, #4]
 563:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 837              		.loc 1 563 0
 838 0008 084B     		ldr	r3, .L58
 839 000a 084A     		ldr	r2, .L58
 840 000c 1268     		ldr	r2, [r2]
 841 000e 120C     		lsr	r2, r2, #16
 842 0010 1204     		lsl	r2, r2, #16
 843 0012 1A60     		str	r2, [r3]
 564:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 844              		.loc 1 564 0
 845 0014 054B     		ldr	r3, .L58
 846 0016 054A     		ldr	r2, .L58
 847 0018 1168     		ldr	r1, [r2]
 848 001a 7A68     		ldr	r2, [r7, #4]
 849 001c 1204     		lsl	r2, r2, #16
 850 001e 120C     		lsr	r2, r2, #16
 851 0020 0A43     		orr	r2, r1
 852 0022 1A60     		str	r2, [r3]
 565:.\Generated_Source\PSoC4/ADC.c **** }
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 26


 853              		.loc 1 565 0
 854 0024 BD46     		mov	sp, r7
 855 0026 02B0     		add	sp, sp, #8
 856              		@ sp needed
 857 0028 80BD     		pop	{r7, pc}
 858              	.L59:
 859 002a C046     		.align	2
 860              	.L58:
 861 002c 18003A40 		.word	1077542936
 862              		.cfi_endproc
 863              	.LFE12:
 864              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 865              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 866              		.align	2
 867              		.global	ADC_SetHighLimit
 868              		.code	16
 869              		.thumb_func
 870              		.type	ADC_SetHighLimit, %function
 871              	ADC_SetHighLimit:
 872              	.LFB13:
 566:.\Generated_Source\PSoC4/ADC.c **** 
 567:.\Generated_Source\PSoC4/ADC.c **** 
 568:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 569:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 570:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 571:.\Generated_Source\PSoC4/ADC.c **** *
 572:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 573:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 576:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** * Return:
 579:.\Generated_Source\PSoC4/ADC.c **** *  None.
 580:.\Generated_Source\PSoC4/ADC.c **** *
 581:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 582:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 583:.\Generated_Source\PSoC4/ADC.c **** {
 873              		.loc 1 583 0
 874              		.cfi_startproc
 875 0000 80B5     		push	{r7, lr}
 876              		.cfi_def_cfa_offset 8
 877              		.cfi_offset 7, -8
 878              		.cfi_offset 14, -4
 879 0002 82B0     		sub	sp, sp, #8
 880              		.cfi_def_cfa_offset 16
 881 0004 00AF     		add	r7, sp, #0
 882              		.cfi_def_cfa_register 7
 883 0006 7860     		str	r0, [r7, #4]
 584:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 884              		.loc 1 584 0
 885 0008 074B     		ldr	r3, .L61
 886 000a 074A     		ldr	r2, .L61
 887 000c 1268     		ldr	r2, [r2]
 888 000e 1204     		lsl	r2, r2, #16
 889 0010 120C     		lsr	r2, r2, #16
 890 0012 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 27


 585:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 891              		.loc 1 585 0
 892 0014 044B     		ldr	r3, .L61
 893 0016 044A     		ldr	r2, .L61
 894 0018 1168     		ldr	r1, [r2]
 895 001a 7A68     		ldr	r2, [r7, #4]
 896 001c 1204     		lsl	r2, r2, #16
 897 001e 0A43     		orr	r2, r1
 898 0020 1A60     		str	r2, [r3]
 586:.\Generated_Source\PSoC4/ADC.c **** }
 899              		.loc 1 586 0
 900 0022 BD46     		mov	sp, r7
 901 0024 02B0     		add	sp, sp, #8
 902              		@ sp needed
 903 0026 80BD     		pop	{r7, pc}
 904              	.L62:
 905              		.align	2
 906              	.L61:
 907 0028 18003A40 		.word	1077542936
 908              		.cfi_endproc
 909              	.LFE13:
 910              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 911              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 912              		.align	2
 913              		.global	ADC_SetLimitMask
 914              		.code	16
 915              		.thumb_func
 916              		.type	ADC_SetLimitMask, %function
 917              	ADC_SetLimitMask:
 918              	.LFB14:
 587:.\Generated_Source\PSoC4/ADC.c **** 
 588:.\Generated_Source\PSoC4/ADC.c **** 
 589:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 590:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 591:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 594:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 595:.\Generated_Source\PSoC4/ADC.c **** *
 596:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 597:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 598:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 599:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 600:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** * Return:
 603:.\Generated_Source\PSoC4/ADC.c **** *  None.
 604:.\Generated_Source\PSoC4/ADC.c **** *
 605:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 606:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 607:.\Generated_Source\PSoC4/ADC.c **** {
 919              		.loc 1 607 0
 920              		.cfi_startproc
 921 0000 80B5     		push	{r7, lr}
 922              		.cfi_def_cfa_offset 8
 923              		.cfi_offset 7, -8
 924              		.cfi_offset 14, -4
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 28


 925 0002 82B0     		sub	sp, sp, #8
 926              		.cfi_def_cfa_offset 16
 927 0004 00AF     		add	r7, sp, #0
 928              		.cfi_def_cfa_register 7
 929 0006 7860     		str	r0, [r7, #4]
 608:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 930              		.loc 1 608 0
 931 0008 034B     		ldr	r3, .L64
 932 000a 7968     		ldr	r1, [r7, #4]
 933 000c 0122     		mov	r2, #1
 934 000e 0A40     		and	r2, r1
 935 0010 1A60     		str	r2, [r3]
 609:.\Generated_Source\PSoC4/ADC.c **** }
 936              		.loc 1 609 0
 937 0012 BD46     		mov	sp, r7
 938 0014 02B0     		add	sp, sp, #8
 939              		@ sp needed
 940 0016 80BD     		pop	{r7, pc}
 941              	.L65:
 942              		.align	2
 943              	.L64:
 944 0018 38023A40 		.word	1077543480
 945              		.cfi_endproc
 946              	.LFE14:
 947              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 948              		.section	.text.ADC_SetSatMask,"ax",%progbits
 949              		.align	2
 950              		.global	ADC_SetSatMask
 951              		.code	16
 952              		.thumb_func
 953              		.type	ADC_SetSatMask, %function
 954              	ADC_SetSatMask:
 955              	.LFB15:
 610:.\Generated_Source\PSoC4/ADC.c **** 
 611:.\Generated_Source\PSoC4/ADC.c **** 
 612:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 613:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 614:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 617:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 618:.\Generated_Source\PSoC4/ADC.c **** *
 619:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 620:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 621:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 622:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 623:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** * Return:
 626:.\Generated_Source\PSoC4/ADC.c **** *  None.
 627:.\Generated_Source\PSoC4/ADC.c **** *
 628:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 629:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 630:.\Generated_Source\PSoC4/ADC.c **** {
 956              		.loc 1 630 0
 957              		.cfi_startproc
 958 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 29


 959              		.cfi_def_cfa_offset 8
 960              		.cfi_offset 7, -8
 961              		.cfi_offset 14, -4
 962 0002 82B0     		sub	sp, sp, #8
 963              		.cfi_def_cfa_offset 16
 964 0004 00AF     		add	r7, sp, #0
 965              		.cfi_def_cfa_register 7
 966 0006 7860     		str	r0, [r7, #4]
 631:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 967              		.loc 1 631 0
 968 0008 034B     		ldr	r3, .L67
 969 000a 7968     		ldr	r1, [r7, #4]
 970 000c 0122     		mov	r2, #1
 971 000e 0A40     		and	r2, r1
 972 0010 1A60     		str	r2, [r3]
 632:.\Generated_Source\PSoC4/ADC.c **** }
 973              		.loc 1 632 0
 974 0012 BD46     		mov	sp, r7
 975 0014 02B0     		add	sp, sp, #8
 976              		@ sp needed
 977 0016 80BD     		pop	{r7, pc}
 978              	.L68:
 979              		.align	2
 980              	.L67:
 981 0018 28023A40 		.word	1077543464
 982              		.cfi_endproc
 983              	.LFE15:
 984              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 985              		.section	.text.ADC_SetOffset,"ax",%progbits
 986              		.align	2
 987              		.global	ADC_SetOffset
 988              		.code	16
 989              		.thumb_func
 990              		.type	ADC_SetOffset, %function
 991              	ADC_SetOffset:
 992              	.LFB16:
 633:.\Generated_Source\PSoC4/ADC.c **** 
 634:.\Generated_Source\PSoC4/ADC.c **** 
 635:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 636:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 637:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 638:.\Generated_Source\PSoC4/ADC.c **** *
 639:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 640:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 641:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 642:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 643:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 644:.\Generated_Source\PSoC4/ADC.c **** *
 645:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 646:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 647:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 648:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Return:
 651:.\Generated_Source\PSoC4/ADC.c **** *  None.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 30


 654:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 655:.\Generated_Source\PSoC4/ADC.c **** *
 656:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 657:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 658:.\Generated_Source\PSoC4/ADC.c **** {
 993              		.loc 1 658 0
 994              		.cfi_startproc
 995 0000 80B5     		push	{r7, lr}
 996              		.cfi_def_cfa_offset 8
 997              		.cfi_offset 7, -8
 998              		.cfi_offset 14, -4
 999 0002 82B0     		sub	sp, sp, #8
 1000              		.cfi_def_cfa_offset 16
 1001 0004 00AF     		add	r7, sp, #0
 1002              		.cfi_def_cfa_register 7
 1003 0006 7860     		str	r0, [r7, #4]
 1004 0008 0A1C     		mov	r2, r1
 1005 000a BB1C     		add	r3, r7, #2
 1006 000c 1A80     		strh	r2, [r3]
 659:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 660:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1007              		.loc 1 660 0
 1008 000e 7B68     		ldr	r3, [r7, #4]
 1009 0010 012B     		cmp	r3, #1
 1010 0012 02D9     		bls	.L70
 1011              		.loc 1 660 0 is_stmt 0 discriminator 1
 1012 0014 0020     		mov	r0, #0
 1013 0016 FFF7FEFF 		bl	CyHalt
 1014              	.L70:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 1015              		.loc 1 662 0 is_stmt 1
 1016 001a 044B     		ldr	r3, .L71
 1017 001c 7A68     		ldr	r2, [r7, #4]
 1018 001e 5200     		lsl	r2, r2, #1
 1019 0020 B91C     		add	r1, r7, #2
 1020 0022 0988     		ldrh	r1, [r1]
 1021 0024 D152     		strh	r1, [r2, r3]
 663:.\Generated_Source\PSoC4/ADC.c **** }
 1022              		.loc 1 663 0
 1023 0026 BD46     		mov	sp, r7
 1024 0028 02B0     		add	sp, sp, #8
 1025              		@ sp needed
 1026 002a 80BD     		pop	{r7, pc}
 1027              	.L72:
 1028              		.align	2
 1029              	.L71:
 1030 002c 00000000 		.word	ADC_offset
 1031              		.cfi_endproc
 1032              	.LFE16:
 1033              		.size	ADC_SetOffset, .-ADC_SetOffset
 1034              		.section	.text.ADC_SetGain,"ax",%progbits
 1035              		.align	2
 1036              		.global	ADC_SetGain
 1037              		.code	16
 1038              		.thumb_func
 1039              		.type	ADC_SetGain, %function
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 31


 1040              	ADC_SetGain:
 1041              	.LFB17:
 664:.\Generated_Source\PSoC4/ADC.c **** 
 665:.\Generated_Source\PSoC4/ADC.c **** 
 666:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 667:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 668:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 669:.\Generated_Source\PSoC4/ADC.c **** *
 670:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 671:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 672:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 673:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 674:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 675:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 676:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 677:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 678:.\Generated_Source\PSoC4/ADC.c **** *
 679:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 680:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 681:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Return:
 684:.\Generated_Source\PSoC4/ADC.c **** *  None.
 685:.\Generated_Source\PSoC4/ADC.c **** *
 686:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 687:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 688:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 689:.\Generated_Source\PSoC4/ADC.c **** *
 690:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 691:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 692:.\Generated_Source\PSoC4/ADC.c **** {
 1042              		.loc 1 692 0
 1043              		.cfi_startproc
 1044 0000 80B5     		push	{r7, lr}
 1045              		.cfi_def_cfa_offset 8
 1046              		.cfi_offset 7, -8
 1047              		.cfi_offset 14, -4
 1048 0002 82B0     		sub	sp, sp, #8
 1049              		.cfi_def_cfa_offset 16
 1050 0004 00AF     		add	r7, sp, #0
 1051              		.cfi_def_cfa_register 7
 1052 0006 7860     		str	r0, [r7, #4]
 1053 0008 3960     		str	r1, [r7]
 693:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 694:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1054              		.loc 1 694 0
 1055 000a 7B68     		ldr	r3, [r7, #4]
 1056 000c 012B     		cmp	r3, #1
 1057 000e 02D9     		bls	.L74
 1058              		.loc 1 694 0 is_stmt 0 discriminator 1
 1059 0010 0020     		mov	r0, #0
 1060 0012 FFF7FEFF 		bl	CyHalt
 1061              	.L74:
 695:.\Generated_Source\PSoC4/ADC.c **** 
 696:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 1062              		.loc 1 696 0 is_stmt 1
 1063 0016 044B     		ldr	r3, .L75
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 32


 1064 0018 7A68     		ldr	r2, [r7, #4]
 1065 001a 9200     		lsl	r2, r2, #2
 1066 001c 3968     		ldr	r1, [r7]
 1067 001e D150     		str	r1, [r2, r3]
 697:.\Generated_Source\PSoC4/ADC.c **** }
 1068              		.loc 1 697 0
 1069 0020 BD46     		mov	sp, r7
 1070 0022 02B0     		add	sp, sp, #8
 1071              		@ sp needed
 1072 0024 80BD     		pop	{r7, pc}
 1073              	.L76:
 1074 0026 C046     		.align	2
 1075              	.L75:
 1076 0028 00000000 		.word	ADC_countsPer10Volt
 1077              		.cfi_endproc
 1078              	.LFE17:
 1079              		.size	ADC_SetGain, .-ADC_SetGain
 1080              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 1081              		.align	2
 1082              		.global	ADC_CountsTo_mVolts
 1083              		.code	16
 1084              		.thumb_func
 1085              		.type	ADC_CountsTo_mVolts, %function
 1086              	ADC_CountsTo_mVolts:
 1087              	.LFB18:
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 701:.\Generated_Source\PSoC4/ADC.c **** 
 702:.\Generated_Source\PSoC4/ADC.c **** 
 703:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 704:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 705:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 706:.\Generated_Source\PSoC4/ADC.c ****     *
 707:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 708:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 709:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 710:.\Generated_Source\PSoC4/ADC.c ****     *
 711:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 712:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 713:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 717:.\Generated_Source\PSoC4/ADC.c ****     *
 718:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 719:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 720:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 721:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 722:.\Generated_Source\PSoC4/ADC.c ****     *
 723:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 724:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 725:.\Generated_Source\PSoC4/ADC.c ****     {
 1088              		.loc 1 725 0
 1089              		.cfi_startproc
 1090 0000 80B5     		push	{r7, lr}
 1091              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 33


 1092              		.cfi_offset 7, -8
 1093              		.cfi_offset 14, -4
 1094 0002 84B0     		sub	sp, sp, #16
 1095              		.cfi_def_cfa_offset 24
 1096 0004 00AF     		add	r7, sp, #0
 1097              		.cfi_def_cfa_register 7
 1098 0006 7860     		str	r0, [r7, #4]
 1099 0008 0A1C     		mov	r2, r1
 1100 000a BB1C     		add	r3, r7, #2
 1101 000c 1A80     		strh	r2, [r3]
 726:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 729:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1102              		.loc 1 729 0
 1103 000e 7B68     		ldr	r3, [r7, #4]
 1104 0010 012B     		cmp	r3, #1
 1105 0012 02D9     		bls	.L78
 1106              		.loc 1 729 0 is_stmt 0 discriminator 1
 1107 0014 0020     		mov	r0, #0
 1108 0016 FFF7FEFF 		bl	CyHalt
 1109              	.L78:
 730:.\Generated_Source\PSoC4/ADC.c **** 
 731:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 732:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 733:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 734:.\Generated_Source\PSoC4/ADC.c ****             {
 735:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 736:.\Generated_Source\PSoC4/ADC.c ****             }
 737:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 740:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1110              		.loc 1 740 0 is_stmt 1
 1111 001a BB1C     		add	r3, r7, #2
 1112 001c 1A88     		ldrh	r2, [r3]
 1113 001e 1E4B     		ldr	r3, .L84
 1114 0020 7968     		ldr	r1, [r7, #4]
 1115 0022 4900     		lsl	r1, r1, #1
 1116 0024 CB5A     		ldrh	r3, [r1, r3]
 1117 0026 9BB2     		uxth	r3, r3
 1118 0028 9BB2     		uxth	r3, r3
 1119 002a D31A     		sub	r3, r2, r3
 1120 002c 9AB2     		uxth	r2, r3
 1121 002e BB1C     		add	r3, r7, #2
 1122 0030 1A80     		strh	r2, [r3]
 741:.\Generated_Source\PSoC4/ADC.c **** 
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1123              		.loc 1 742 0
 1124 0032 BB1C     		add	r3, r7, #2
 1125 0034 0021     		mov	r1, #0
 1126 0036 5B5E     		ldrsh	r3, [r3, r1]
 1127 0038 184A     		ldr	r2, .L84+4
 1128 003a 5A43     		mul	r2, r3
 743:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 1129              		.loc 1 743 0
 1130 003c BB1C     		add	r3, r7, #2
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 34


 1131 003e 0021     		mov	r1, #0
 1132 0040 5B5E     		ldrsh	r3, [r3, r1]
 1133 0042 002B     		cmp	r3, #0
 1134 0044 08DD     		ble	.L79
 1135              		.loc 1 743 0 is_stmt 0 discriminator 1
 1136 0046 164B     		ldr	r3, .L84+8
 1137 0048 7968     		ldr	r1, [r7, #4]
 1138 004a 8900     		lsl	r1, r1, #2
 1139 004c CB58     		ldr	r3, [r1, r3]
 1140 004e 002B     		cmp	r3, #0
 1141 0050 00DA     		bge	.L80
 1142 0052 0133     		add	r3, r3, #1
 1143              	.L80:
 1144 0054 5B10     		asr	r3, r3, #1
 1145 0056 08E0     		b	.L81
 1146              	.L79:
 1147              		.loc 1 743 0 discriminator 2
 1148 0058 114B     		ldr	r3, .L84+8
 1149 005a 7968     		ldr	r1, [r7, #4]
 1150 005c 8900     		lsl	r1, r1, #2
 1151 005e CB58     		ldr	r3, [r1, r3]
 1152 0060 002B     		cmp	r3, #0
 1153 0062 00DA     		bge	.L82
 1154 0064 0133     		add	r3, r3, #1
 1155              	.L82:
 1156 0066 5B10     		asr	r3, r3, #1
 1157 0068 5B42     		neg	r3, r3
 1158              	.L81:
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1159              		.loc 1 742 0 is_stmt 1
 1160 006a D218     		add	r2, r2, r3
 744:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1161              		.loc 1 744 0
 1162 006c 0C4B     		ldr	r3, .L84+8
 1163 006e 7968     		ldr	r1, [r7, #4]
 1164 0070 8900     		lsl	r1, r1, #2
 1165 0072 CB58     		ldr	r3, [r1, r3]
 1166 0074 101C     		mov	r0, r2
 1167 0076 191C     		mov	r1, r3
 1168 0078 FFF7FEFF 		bl	__aeabi_idiv
 1169 007c 031C     		mov	r3, r0
 1170 007e 1A1C     		mov	r2, r3
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1171              		.loc 1 742 0
 1172 0080 3B1C     		mov	r3, r7
 1173 0082 0E33     		add	r3, r3, #14
 1174 0084 1A80     		strh	r2, [r3]
 745:.\Generated_Source\PSoC4/ADC.c **** 
 746:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1175              		.loc 1 746 0
 1176 0086 3B1C     		mov	r3, r7
 1177 0088 0E33     		add	r3, r3, #14
 1178 008a 1B88     		ldrh	r3, [r3]
 1179 008c 1BB2     		sxth	r3, r3
 747:.\Generated_Source\PSoC4/ADC.c ****     }
 1180              		.loc 1 747 0
 1181 008e 181C     		mov	r0, r3
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 35


 1182 0090 BD46     		mov	sp, r7
 1183 0092 04B0     		add	sp, sp, #16
 1184              		@ sp needed
 1185 0094 80BD     		pop	{r7, pc}
 1186              	.L85:
 1187 0096 C046     		.align	2
 1188              	.L84:
 1189 0098 00000000 		.word	ADC_offset
 1190 009c 10270000 		.word	10000
 1191 00a0 00000000 		.word	ADC_countsPer10Volt
 1192              		.cfi_endproc
 1193              	.LFE18:
 1194              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1195              		.global	__aeabi_lmul
 1196              		.global	__aeabi_ldivmod
 1197              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1198              		.align	2
 1199              		.global	ADC_CountsTo_uVolts
 1200              		.code	16
 1201              		.thumb_func
 1202              		.type	ADC_CountsTo_uVolts, %function
 1203              	ADC_CountsTo_uVolts:
 1204              	.LFB19:
 748:.\Generated_Source\PSoC4/ADC.c **** 
 749:.\Generated_Source\PSoC4/ADC.c **** 
 750:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 751:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 752:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 753:.\Generated_Source\PSoC4/ADC.c ****     *
 754:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 755:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 756:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 757:.\Generated_Source\PSoC4/ADC.c ****     *
 758:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 759:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 760:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 764:.\Generated_Source\PSoC4/ADC.c ****     *
 765:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 766:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 767:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 768:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 769:.\Generated_Source\PSoC4/ADC.c ****     *
 770:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 771:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 772:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 773:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 774:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 775:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 776:.\Generated_Source\PSoC4/ADC.c ****     *
 777:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 778:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 779:.\Generated_Source\PSoC4/ADC.c ****     {
 1205              		.loc 1 779 0
 1206              		.cfi_startproc
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 36


 1207 0000 B0B5     		push	{r4, r5, r7, lr}
 1208              		.cfi_def_cfa_offset 16
 1209              		.cfi_offset 4, -16
 1210              		.cfi_offset 5, -12
 1211              		.cfi_offset 7, -8
 1212              		.cfi_offset 14, -4
 1213 0002 86B0     		sub	sp, sp, #24
 1214              		.cfi_def_cfa_offset 40
 1215 0004 00AF     		add	r7, sp, #0
 1216              		.cfi_def_cfa_register 7
 1217 0006 F860     		str	r0, [r7, #12]
 1218 0008 0A1C     		mov	r2, r1
 1219 000a 3B1C     		mov	r3, r7
 1220 000c 0A33     		add	r3, r3, #10
 1221 000e 1A80     		strh	r2, [r3]
 780:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 783:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1222              		.loc 1 783 0
 1223 0010 FB68     		ldr	r3, [r7, #12]
 1224 0012 012B     		cmp	r3, #1
 1225 0014 02D9     		bls	.L87
 1226              		.loc 1 783 0 is_stmt 0 discriminator 1
 1227 0016 0020     		mov	r0, #0
 1228 0018 FFF7FEFF 		bl	CyHalt
 1229              	.L87:
 784:.\Generated_Source\PSoC4/ADC.c **** 
 785:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 786:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 787:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 788:.\Generated_Source\PSoC4/ADC.c ****             {
 789:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 790:.\Generated_Source\PSoC4/ADC.c ****             }
 791:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 794:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1230              		.loc 1 794 0 is_stmt 1
 1231 001c 3B1C     		mov	r3, r7
 1232 001e 0A33     		add	r3, r3, #10
 1233 0020 1A88     		ldrh	r2, [r3]
 1234 0022 1B4B     		ldr	r3, .L89+8
 1235 0024 F968     		ldr	r1, [r7, #12]
 1236 0026 4900     		lsl	r1, r1, #1
 1237 0028 CB5A     		ldrh	r3, [r1, r3]
 1238 002a 9BB2     		uxth	r3, r3
 1239 002c 9BB2     		uxth	r3, r3
 1240 002e D31A     		sub	r3, r2, r3
 1241 0030 9AB2     		uxth	r2, r3
 1242 0032 3B1C     		mov	r3, r7
 1243 0034 0A33     		add	r3, r3, #10
 1244 0036 1A80     		strh	r2, [r3]
 795:.\Generated_Source\PSoC4/ADC.c **** 
 796:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1245              		.loc 1 796 0
 1246 0038 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 37


 1247 003a 0A33     		add	r3, r3, #10
 1248 003c 1B88     		ldrh	r3, [r3]
 1249 003e 1BB2     		sxth	r3, r3
 1250 0040 3B60     		str	r3, [r7]
 1251 0042 DB17     		asr	r3, r3, #31
 1252 0044 7B60     		str	r3, [r7, #4]
 1253 0046 3868     		ldr	r0, [r7]
 1254 0048 7968     		ldr	r1, [r7, #4]
 1255 004a 104B     		ldr	r3, .L89+4
 1256 004c 0E4A     		ldr	r2, .L89
 1257 004e FFF7FEFF 		bl	__aeabi_lmul
 1258 0052 021C     		mov	r2, r0
 1259 0054 0B1C     		mov	r3, r1
 1260 0056 0F49     		ldr	r1, .L89+12
 1261 0058 F868     		ldr	r0, [r7, #12]
 1262 005a 8000     		lsl	r0, r0, #2
 1263 005c 4158     		ldr	r1, [r0, r1]
 1264 005e 0C1C     		mov	r4, r1
 1265 0060 C917     		asr	r1, r1, #31
 1266 0062 0D1C     		mov	r5, r1
 1267 0064 101C     		mov	r0, r2
 1268 0066 191C     		mov	r1, r3
 1269 0068 221C     		mov	r2, r4
 1270 006a 2B1C     		mov	r3, r5
 1271 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1272 0070 031C     		mov	r3, r0
 1273 0072 0C1C     		mov	r4, r1
 1274 0074 3B61     		str	r3, [r7, #16]
 1275 0076 7C61     		str	r4, [r7, #20]
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1276              		.loc 1 798 0
 1277 0078 3B69     		ldr	r3, [r7, #16]
 799:.\Generated_Source\PSoC4/ADC.c ****     }
 1278              		.loc 1 799 0
 1279 007a 181C     		mov	r0, r3
 1280 007c BD46     		mov	sp, r7
 1281 007e 06B0     		add	sp, sp, #24
 1282              		@ sp needed
 1283 0080 B0BD     		pop	{r4, r5, r7, pc}
 1284              	.L90:
 1285 0082 C046C046 		.align	3
 1285      C046
 1286              	.L89:
 1287 0088 80969800 		.word	10000000
 1288 008c 00000000 		.word	0
 1289 0090 00000000 		.word	ADC_offset
 1290 0094 00000000 		.word	ADC_countsPer10Volt
 1291              		.cfi_endproc
 1292              	.LFE19:
 1293              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1294              		.global	__aeabi_i2f
 1295              		.global	__aeabi_fmul
 1296              		.global	__aeabi_fdiv
 1297              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1298              		.align	2
 1299              		.global	ADC_CountsTo_Volts
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 38


 1300              		.code	16
 1301              		.thumb_func
 1302              		.type	ADC_CountsTo_Volts, %function
 1303              	ADC_CountsTo_Volts:
 1304              	.LFB20:
 800:.\Generated_Source\PSoC4/ADC.c **** 
 801:.\Generated_Source\PSoC4/ADC.c **** 
 802:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 803:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 804:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 805:.\Generated_Source\PSoC4/ADC.c ****     *
 806:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 807:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 808:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 809:.\Generated_Source\PSoC4/ADC.c ****     *
 810:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 811:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 816:.\Generated_Source\PSoC4/ADC.c ****     *
 817:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 818:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 819:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 820:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 821:.\Generated_Source\PSoC4/ADC.c ****     *
 822:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 823:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 824:.\Generated_Source\PSoC4/ADC.c ****     {
 1305              		.loc 1 824 0
 1306              		.cfi_startproc
 1307 0000 90B5     		push	{r4, r7, lr}
 1308              		.cfi_def_cfa_offset 12
 1309              		.cfi_offset 4, -12
 1310              		.cfi_offset 7, -8
 1311              		.cfi_offset 14, -4
 1312 0002 85B0     		sub	sp, sp, #20
 1313              		.cfi_def_cfa_offset 32
 1314 0004 00AF     		add	r7, sp, #0
 1315              		.cfi_def_cfa_register 7
 1316 0006 7860     		str	r0, [r7, #4]
 1317 0008 0A1C     		mov	r2, r1
 1318 000a BB1C     		add	r3, r7, #2
 1319 000c 1A80     		strh	r2, [r3]
 825:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 828:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1320              		.loc 1 828 0
 1321 000e 7B68     		ldr	r3, [r7, #4]
 1322 0010 012B     		cmp	r3, #1
 1323 0012 02D9     		bls	.L92
 1324              		.loc 1 828 0 is_stmt 0 discriminator 1
 1325 0014 0020     		mov	r0, #0
 1326 0016 FFF7FEFF 		bl	CyHalt
 1327              	.L92:
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 39


 829:.\Generated_Source\PSoC4/ADC.c **** 
 830:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 831:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 832:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 833:.\Generated_Source\PSoC4/ADC.c ****             {
 834:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 835:.\Generated_Source\PSoC4/ADC.c ****             }
 836:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 839:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1328              		.loc 1 839 0 is_stmt 1
 1329 001a BB1C     		add	r3, r7, #2
 1330 001c 1A88     		ldrh	r2, [r3]
 1331 001e 154B     		ldr	r3, .L94
 1332 0020 7968     		ldr	r1, [r7, #4]
 1333 0022 4900     		lsl	r1, r1, #1
 1334 0024 CB5A     		ldrh	r3, [r1, r3]
 1335 0026 9BB2     		uxth	r3, r3
 1336 0028 9BB2     		uxth	r3, r3
 1337 002a D31A     		sub	r3, r2, r3
 1338 002c 9AB2     		uxth	r2, r3
 1339 002e BB1C     		add	r3, r7, #2
 1340 0030 1A80     		strh	r2, [r3]
 840:.\Generated_Source\PSoC4/ADC.c **** 
 841:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1341              		.loc 1 841 0
 1342 0032 BB1C     		add	r3, r7, #2
 1343 0034 0022     		mov	r2, #0
 1344 0036 9B5E     		ldrsh	r3, [r3, r2]
 1345 0038 181C     		mov	r0, r3
 1346 003a FFF7FEFF 		bl	__aeabi_i2f
 1347 003e 031C     		add	r3, r0, #0
 1348 0040 181C     		add	r0, r3, #0
 1349 0042 0D49     		ldr	r1, .L94+4
 1350 0044 FFF7FEFF 		bl	__aeabi_fmul
 1351 0048 031C     		add	r3, r0, #0
 1352 004a 1C1C     		add	r4, r3, #0
 1353 004c 0B4B     		ldr	r3, .L94+8
 1354 004e 7A68     		ldr	r2, [r7, #4]
 1355 0050 9200     		lsl	r2, r2, #2
 1356 0052 D358     		ldr	r3, [r2, r3]
 1357 0054 181C     		mov	r0, r3
 1358 0056 FFF7FEFF 		bl	__aeabi_i2f
 1359 005a 031C     		add	r3, r0, #0
 1360 005c 201C     		add	r0, r4, #0
 1361 005e 191C     		add	r1, r3, #0
 1362 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1363 0064 031C     		add	r3, r0, #0
 1364 0066 FB60     		str	r3, [r7, #12]
 842:.\Generated_Source\PSoC4/ADC.c **** 
 843:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1365              		.loc 1 843 0
 1366 0068 FB68     		ldr	r3, [r7, #12]
 844:.\Generated_Source\PSoC4/ADC.c ****     }
 1367              		.loc 1 844 0
 1368 006a 181C     		add	r0, r3, #0
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 40


 1369 006c BD46     		mov	sp, r7
 1370 006e 05B0     		add	sp, sp, #20
 1371              		@ sp needed
 1372 0070 90BD     		pop	{r4, r7, pc}
 1373              	.L95:
 1374 0072 C046     		.align	2
 1375              	.L94:
 1376 0074 00000000 		.word	ADC_offset
 1377 0078 00002041 		.word	1092616192
 1378 007c 00000000 		.word	ADC_countsPer10Volt
 1379              		.cfi_endproc
 1380              	.LFE20:
 1381              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1382              		.section	.rodata
 1383              		.align	2
 1384              		.type	ADC_InputsPlacement.4749, %object
 1385              		.size	ADC_InputsPlacement.4749, 2
 1386              	ADC_InputsPlacement.4749:
 1387 0008 00       		.byte	0
 1388 0009 70       		.byte	112
 1389 000a 0000     		.text
 1390              	.Letext0:
 1391              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1392              		.section	.debug_info,"",%progbits
 1393              	.Ldebug_info0:
 1394 0000 A8040000 		.4byte	0x4a8
 1395 0004 0400     		.2byte	0x4
 1396 0006 00000000 		.4byte	.Ldebug_abbrev0
 1397 000a 04       		.byte	0x4
 1398 000b 01       		.uleb128 0x1
 1399 000c FE010000 		.4byte	.LASF61
 1400 0010 01       		.byte	0x1
 1401 0011 A8020000 		.4byte	.LASF62
 1402 0015 46030000 		.4byte	.LASF63
 1403 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1404 001d 00000000 		.4byte	0
 1405 0021 00000000 		.4byte	.Ldebug_line0
 1406 0025 02       		.uleb128 0x2
 1407 0026 01       		.byte	0x1
 1408 0027 06       		.byte	0x6
 1409 0028 7C000000 		.4byte	.LASF0
 1410 002c 02       		.uleb128 0x2
 1411 002d 01       		.byte	0x1
 1412 002e 08       		.byte	0x8
 1413 002f C7020000 		.4byte	.LASF1
 1414 0033 02       		.uleb128 0x2
 1415 0034 02       		.byte	0x2
 1416 0035 05       		.byte	0x5
 1417 0036 E0020000 		.4byte	.LASF2
 1418 003a 02       		.uleb128 0x2
 1419 003b 02       		.byte	0x2
 1420 003c 07       		.byte	0x7
 1421 003d 53010000 		.4byte	.LASF3
 1422 0041 02       		.uleb128 0x2
 1423 0042 04       		.byte	0x4
 1424 0043 05       		.byte	0x5
 1425 0044 9F000000 		.4byte	.LASF4
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 41


 1426 0048 02       		.uleb128 0x2
 1427 0049 04       		.byte	0x4
 1428 004a 07       		.byte	0x7
 1429 004b 22010000 		.4byte	.LASF5
 1430 004f 02       		.uleb128 0x2
 1431 0050 08       		.byte	0x8
 1432 0051 05       		.byte	0x5
 1433 0052 6E000000 		.4byte	.LASF6
 1434 0056 02       		.uleb128 0x2
 1435 0057 08       		.byte	0x8
 1436 0058 07       		.byte	0x7
 1437 0059 32000000 		.4byte	.LASF7
 1438 005d 03       		.uleb128 0x3
 1439 005e 04       		.byte	0x4
 1440 005f 05       		.byte	0x5
 1441 0060 696E7400 		.ascii	"int\000"
 1442 0064 02       		.uleb128 0x2
 1443 0065 04       		.byte	0x4
 1444 0066 07       		.byte	0x7
 1445 0067 0E010000 		.4byte	.LASF8
 1446 006b 04       		.uleb128 0x4
 1447 006c D0000000 		.4byte	.LASF9
 1448 0070 02       		.byte	0x2
 1449 0071 A1       		.byte	0xa1
 1450 0072 2C000000 		.4byte	0x2c
 1451 0076 04       		.uleb128 0x4
 1452 0077 00000000 		.4byte	.LASF10
 1453 007b 02       		.byte	0x2
 1454 007c A2       		.byte	0xa2
 1455 007d 3A000000 		.4byte	0x3a
 1456 0081 04       		.uleb128 0x4
 1457 0082 DD000000 		.4byte	.LASF11
 1458 0086 02       		.byte	0x2
 1459 0087 A3       		.byte	0xa3
 1460 0088 48000000 		.4byte	0x48
 1461 008c 04       		.uleb128 0x4
 1462 008d 32030000 		.4byte	.LASF12
 1463 0091 02       		.byte	0x2
 1464 0092 A5       		.byte	0xa5
 1465 0093 33000000 		.4byte	0x33
 1466 0097 04       		.uleb128 0x4
 1467 0098 8F000000 		.4byte	.LASF13
 1468 009c 02       		.byte	0x2
 1469 009d A6       		.byte	0xa6
 1470 009e 41000000 		.4byte	0x41
 1471 00a2 04       		.uleb128 0x4
 1472 00a3 83010000 		.4byte	.LASF14
 1473 00a7 02       		.byte	0x2
 1474 00a8 A7       		.byte	0xa7
 1475 00a9 AD000000 		.4byte	0xad
 1476 00ad 02       		.uleb128 0x2
 1477 00ae 04       		.byte	0x4
 1478 00af 04       		.byte	0x4
 1479 00b0 F8010000 		.4byte	.LASF15
 1480 00b4 02       		.uleb128 0x2
 1481 00b5 08       		.byte	0x8
 1482 00b6 04       		.byte	0x4
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 42


 1483 00b7 D6000000 		.4byte	.LASF16
 1484 00bb 04       		.uleb128 0x4
 1485 00bc D6010000 		.4byte	.LASF17
 1486 00c0 02       		.byte	0x2
 1487 00c1 AC       		.byte	0xac
 1488 00c2 4F000000 		.4byte	0x4f
 1489 00c6 02       		.uleb128 0x2
 1490 00c7 01       		.byte	0x1
 1491 00c8 08       		.byte	0x8
 1492 00c9 FE020000 		.4byte	.LASF18
 1493 00cd 05       		.uleb128 0x5
 1494 00ce 7D010000 		.4byte	.LASF19
 1495 00d2 02       		.byte	0x2
 1496 00d3 4D01     		.2byte	0x14d
 1497 00d5 D9000000 		.4byte	0xd9
 1498 00d9 06       		.uleb128 0x6
 1499 00da 81000000 		.4byte	0x81
 1500 00de 02       		.uleb128 0x2
 1501 00df 04       		.byte	0x4
 1502 00e0 07       		.byte	0x7
 1503 00e1 8B010000 		.4byte	.LASF20
 1504 00e5 07       		.uleb128 0x7
 1505 00e6 95000000 		.4byte	.LASF25
 1506 00ea 01       		.byte	0x1
 1507 00eb 3F       		.byte	0x3f
 1508 00ec 00000000 		.4byte	.LFB2
 1509 00f0 24000000 		.4byte	.LFE2-.LFB2
 1510 00f4 01       		.uleb128 0x1
 1511 00f5 9C       		.byte	0x9c
 1512 00f6 08       		.uleb128 0x8
 1513 00f7 29000000 		.4byte	.LASF36
 1514 00fb 01       		.byte	0x1
 1515 00fc 5E       		.byte	0x5e
 1516 00fd 00000000 		.4byte	.LFB3
 1517 0101 64020000 		.4byte	.LFE3-.LFB3
 1518 0105 01       		.uleb128 0x1
 1519 0106 9C       		.byte	0x9c
 1520 0107 47010000 		.4byte	0x147
 1521 010b 09       		.uleb128 0x9
 1522 010c F3020000 		.4byte	.LASF21
 1523 0110 01       		.byte	0x1
 1524 0111 60       		.byte	0x60
 1525 0112 81000000 		.4byte	0x81
 1526 0116 02       		.uleb128 0x2
 1527 0117 91       		.byte	0x91
 1528 0118 6C       		.sleb128 -20
 1529 0119 09       		.uleb128 0x9
 1530 011a 49010000 		.4byte	.LASF22
 1531 011e 01       		.byte	0x1
 1532 011f 61       		.byte	0x61
 1533 0120 81000000 		.4byte	0x81
 1534 0124 02       		.uleb128 0x2
 1535 0125 91       		.byte	0x91
 1536 0126 64       		.sleb128 -28
 1537 0127 09       		.uleb128 0x9
 1538 0128 0F000000 		.4byte	.LASF23
 1539 012c 01       		.byte	0x1
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 43


 1540 012d 62       		.byte	0x62
 1541 012e 97000000 		.4byte	0x97
 1542 0132 02       		.uleb128 0x2
 1543 0133 91       		.byte	0x91
 1544 0134 68       		.sleb128 -24
 1545 0135 09       		.uleb128 0x9
 1546 0136 49000000 		.4byte	.LASF24
 1547 013a 01       		.byte	0x1
 1548 013b 65       		.byte	0x65
 1549 013c 57010000 		.4byte	0x157
 1550 0140 05       		.uleb128 0x5
 1551 0141 03       		.byte	0x3
 1552 0142 08000000 		.4byte	ADC_InputsPlacement.4749
 1553 0146 00       		.byte	0
 1554 0147 0A       		.uleb128 0xa
 1555 0148 6B000000 		.4byte	0x6b
 1556 014c 57010000 		.4byte	0x157
 1557 0150 0B       		.uleb128 0xb
 1558 0151 DE000000 		.4byte	0xde
 1559 0155 01       		.byte	0x1
 1560 0156 00       		.byte	0
 1561 0157 0C       		.uleb128 0xc
 1562 0158 47010000 		.4byte	0x147
 1563 015c 0D       		.uleb128 0xd
 1564 015d 27030000 		.4byte	.LASF26
 1565 0161 01       		.byte	0x1
 1566 0162 2A01     		.2byte	0x12a
 1567 0164 00000000 		.4byte	.LFB4
 1568 0168 38000000 		.4byte	.LFE4-.LFB4
 1569 016c 01       		.uleb128 0x1
 1570 016d 9C       		.byte	0x9c
 1571 016e 0E       		.uleb128 0xe
 1572 016f EA020000 		.4byte	.LASF27
 1573 0173 01       		.byte	0x1
 1574 0174 4D01     		.2byte	0x14d
 1575 0176 00000000 		.4byte	.LFB5
 1576 017a 18000000 		.4byte	.LFE5-.LFB5
 1577 017e 01       		.uleb128 0x1
 1578 017f 9C       		.byte	0x9c
 1579 0180 0E       		.uleb128 0xe
 1580 0181 5D000000 		.4byte	.LASF28
 1581 0185 01       		.byte	0x1
 1582 0186 6701     		.2byte	0x167
 1583 0188 00000000 		.4byte	.LFB6
 1584 018c 14000000 		.4byte	.LFE6-.LFB6
 1585 0190 01       		.uleb128 0x1
 1586 0191 9C       		.byte	0x9c
 1587 0192 0E       		.uleb128 0xe
 1588 0193 66010000 		.4byte	.LASF29
 1589 0197 01       		.byte	0x1
 1590 0198 8001     		.2byte	0x180
 1591 019a 00000000 		.4byte	.LFB7
 1592 019e 08000000 		.4byte	.LFE7-.LFB7
 1593 01a2 01       		.uleb128 0x1
 1594 01a3 9C       		.byte	0x9c
 1595 01a4 0F       		.uleb128 0xf
 1596 01a5 C2010000 		.4byte	.LASF31
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 44


 1597 01a9 01       		.byte	0x1
 1598 01aa A201     		.2byte	0x1a2
 1599 01ac 81000000 		.4byte	0x81
 1600 01b0 00000000 		.4byte	.LFB8
 1601 01b4 7C000000 		.4byte	.LFE8-.LFB8
 1602 01b8 01       		.uleb128 0x1
 1603 01b9 9C       		.byte	0x9c
 1604 01ba DD010000 		.4byte	0x1dd
 1605 01be 10       		.uleb128 0x10
 1606 01bf F5000000 		.4byte	.LASF33
 1607 01c3 01       		.byte	0x1
 1608 01c4 A201     		.2byte	0x1a2
 1609 01c6 81000000 		.4byte	0x81
 1610 01ca 02       		.uleb128 0x2
 1611 01cb 91       		.byte	0x91
 1612 01cc 6C       		.sleb128 -20
 1613 01cd 11       		.uleb128 0x11
 1614 01ce 88000000 		.4byte	.LASF30
 1615 01d2 01       		.byte	0x1
 1616 01d3 A401     		.2byte	0x1a4
 1617 01d5 81000000 		.4byte	0x81
 1618 01d9 02       		.uleb128 0x2
 1619 01da 91       		.byte	0x91
 1620 01db 74       		.sleb128 -12
 1621 01dc 00       		.byte	0
 1622 01dd 12       		.uleb128 0x12
 1623 01de B3030000 		.4byte	.LASF32
 1624 01e2 01       		.byte	0x1
 1625 01e3 D801     		.2byte	0x1d8
 1626 01e5 8C000000 		.4byte	0x8c
 1627 01e9 00000000 		.4byte	.LFB9
 1628 01ed 4C000000 		.4byte	.LFE9-.LFB9
 1629 01f1 01       		.uleb128 0x1
 1630 01f2 9C       		.byte	0x9c
 1631 01f3 16020000 		.4byte	0x216
 1632 01f7 10       		.uleb128 0x10
 1633 01f8 F9020000 		.4byte	.LASF34
 1634 01fc 01       		.byte	0x1
 1635 01fd D801     		.2byte	0x1d8
 1636 01ff 81000000 		.4byte	0x81
 1637 0203 02       		.uleb128 0x2
 1638 0204 91       		.byte	0x91
 1639 0205 6C       		.sleb128 -20
 1640 0206 11       		.uleb128 0x11
 1641 0207 AC030000 		.4byte	.LASF35
 1642 020b 01       		.byte	0x1
 1643 020c DA01     		.2byte	0x1da
 1644 020e 81000000 		.4byte	0x81
 1645 0212 02       		.uleb128 0x2
 1646 0213 91       		.byte	0x91
 1647 0214 74       		.sleb128 -12
 1648 0215 00       		.byte	0
 1649 0216 13       		.uleb128 0x13
 1650 0217 DC010000 		.4byte	.LASF37
 1651 021b 01       		.byte	0x1
 1652 021c 0502     		.2byte	0x205
 1653 021e 00000000 		.4byte	.LFB10
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 45


 1654 0222 1C000000 		.4byte	.LFE10-.LFB10
 1655 0226 01       		.uleb128 0x1
 1656 0227 9C       		.byte	0x9c
 1657 0228 3C020000 		.4byte	0x23c
 1658 022c 10       		.uleb128 0x10
 1659 022d E4000000 		.4byte	.LASF38
 1660 0231 01       		.byte	0x1
 1661 0232 0502     		.2byte	0x205
 1662 0234 81000000 		.4byte	0x81
 1663 0238 02       		.uleb128 0x2
 1664 0239 91       		.byte	0x91
 1665 023a 74       		.sleb128 -12
 1666 023b 00       		.byte	0
 1667 023c 0E       		.uleb128 0xe
 1668 023d AE010000 		.4byte	.LASF39
 1669 0241 01       		.byte	0x1
 1670 0242 1B02     		.2byte	0x21b
 1671 0244 00000000 		.4byte	.LFB11
 1672 0248 1C000000 		.4byte	.LFE11-.LFB11
 1673 024c 01       		.uleb128 0x1
 1674 024d 9C       		.byte	0x9c
 1675 024e 13       		.uleb128 0x13
 1676 024f 98020000 		.4byte	.LASF40
 1677 0253 01       		.byte	0x1
 1678 0254 3102     		.2byte	0x231
 1679 0256 00000000 		.4byte	.LFB12
 1680 025a 30000000 		.4byte	.LFE12-.LFB12
 1681 025e 01       		.uleb128 0x1
 1682 025f 9C       		.byte	0x9c
 1683 0260 74020000 		.4byte	0x274
 1684 0264 10       		.uleb128 0x10
 1685 0265 94010000 		.4byte	.LASF41
 1686 0269 01       		.byte	0x1
 1687 026a 3102     		.2byte	0x231
 1688 026c 81000000 		.4byte	0x81
 1689 0270 02       		.uleb128 0x2
 1690 0271 91       		.byte	0x91
 1691 0272 74       		.sleb128 -12
 1692 0273 00       		.byte	0
 1693 0274 13       		.uleb128 0x13
 1694 0275 9D010000 		.4byte	.LASF42
 1695 0279 01       		.byte	0x1
 1696 027a 4602     		.2byte	0x246
 1697 027c 00000000 		.4byte	.LFB13
 1698 0280 2C000000 		.4byte	.LFE13-.LFB13
 1699 0284 01       		.uleb128 0x1
 1700 0285 9C       		.byte	0x9c
 1701 0286 9A020000 		.4byte	0x29a
 1702 028a 10       		.uleb128 0x10
 1703 028b 7A020000 		.4byte	.LASF43
 1704 028f 01       		.byte	0x1
 1705 0290 4602     		.2byte	0x246
 1706 0292 81000000 		.4byte	0x81
 1707 0296 02       		.uleb128 0x2
 1708 0297 91       		.byte	0x91
 1709 0298 74       		.sleb128 -12
 1710 0299 00       		.byte	0
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 46


 1711 029a 13       		.uleb128 0x13
 1712 029b FD000000 		.4byte	.LASF44
 1713 029f 01       		.byte	0x1
 1714 02a0 5E02     		.2byte	0x25e
 1715 02a2 00000000 		.4byte	.LFB14
 1716 02a6 1C000000 		.4byte	.LFE14-.LFB14
 1717 02aa 01       		.uleb128 0x1
 1718 02ab 9C       		.byte	0x9c
 1719 02ac C0020000 		.4byte	0x2c0
 1720 02b0 10       		.uleb128 0x10
 1721 02b1 E4000000 		.4byte	.LASF38
 1722 02b5 01       		.byte	0x1
 1723 02b6 5E02     		.2byte	0x25e
 1724 02b8 81000000 		.4byte	0x81
 1725 02bc 02       		.uleb128 0x2
 1726 02bd 91       		.byte	0x91
 1727 02be 74       		.sleb128 -12
 1728 02bf 00       		.byte	0
 1729 02c0 13       		.uleb128 0x13
 1730 02c1 34010000 		.4byte	.LASF45
 1731 02c5 01       		.byte	0x1
 1732 02c6 7502     		.2byte	0x275
 1733 02c8 00000000 		.4byte	.LFB15
 1734 02cc 1C000000 		.4byte	.LFE15-.LFB15
 1735 02d0 01       		.uleb128 0x1
 1736 02d1 9C       		.byte	0x9c
 1737 02d2 E6020000 		.4byte	0x2e6
 1738 02d6 10       		.uleb128 0x10
 1739 02d7 E4000000 		.4byte	.LASF38
 1740 02db 01       		.byte	0x1
 1741 02dc 7502     		.2byte	0x275
 1742 02de 81000000 		.4byte	0x81
 1743 02e2 02       		.uleb128 0x2
 1744 02e3 91       		.byte	0x91
 1745 02e4 74       		.sleb128 -12
 1746 02e5 00       		.byte	0
 1747 02e6 14       		.uleb128 0x14
 1748 02e7 38030000 		.4byte	.LASF46
 1749 02eb 01       		.byte	0x1
 1750 02ec 9102     		.2byte	0x291
 1751 02ee 00000000 		.4byte	.LFB16
 1752 02f2 30000000 		.4byte	.LFE16-.LFB16
 1753 02f6 01       		.uleb128 0x1
 1754 02f7 9C       		.byte	0x9c
 1755 02f8 1B030000 		.4byte	0x31b
 1756 02fc 10       		.uleb128 0x10
 1757 02fd F9020000 		.4byte	.LASF34
 1758 0301 01       		.byte	0x1
 1759 0302 9102     		.2byte	0x291
 1760 0304 81000000 		.4byte	0x81
 1761 0308 02       		.uleb128 0x2
 1762 0309 91       		.byte	0x91
 1763 030a 74       		.sleb128 -12
 1764 030b 10       		.uleb128 0x10
 1765 030c 16030000 		.4byte	.LASF47
 1766 0310 01       		.byte	0x1
 1767 0311 9102     		.2byte	0x291
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 47


 1768 0313 8C000000 		.4byte	0x8c
 1769 0317 02       		.uleb128 0x2
 1770 0318 91       		.byte	0x91
 1771 0319 72       		.sleb128 -14
 1772 031a 00       		.byte	0
 1773 031b 14       		.uleb128 0x14
 1774 031c EC010000 		.4byte	.LASF48
 1775 0320 01       		.byte	0x1
 1776 0321 B302     		.2byte	0x2b3
 1777 0323 00000000 		.4byte	.LFB17
 1778 0327 2C000000 		.4byte	.LFE17-.LFB17
 1779 032b 01       		.uleb128 0x1
 1780 032c 9C       		.byte	0x9c
 1781 032d 50030000 		.4byte	0x350
 1782 0331 10       		.uleb128 0x10
 1783 0332 F9020000 		.4byte	.LASF34
 1784 0336 01       		.byte	0x1
 1785 0337 B302     		.2byte	0x2b3
 1786 0339 81000000 		.4byte	0x81
 1787 033d 02       		.uleb128 0x2
 1788 033e 91       		.byte	0x91
 1789 033f 74       		.sleb128 -12
 1790 0340 10       		.uleb128 0x10
 1791 0341 07000000 		.4byte	.LASF49
 1792 0345 01       		.byte	0x1
 1793 0346 B302     		.2byte	0x2b3
 1794 0348 97000000 		.4byte	0x97
 1795 034c 02       		.uleb128 0x2
 1796 034d 91       		.byte	0x91
 1797 034e 70       		.sleb128 -16
 1798 034f 00       		.byte	0
 1799 0350 12       		.uleb128 0x12
 1800 0351 84020000 		.4byte	.LASF50
 1801 0355 01       		.byte	0x1
 1802 0356 D402     		.2byte	0x2d4
 1803 0358 8C000000 		.4byte	0x8c
 1804 035c 00000000 		.4byte	.LFB18
 1805 0360 A4000000 		.4byte	.LFE18-.LFB18
 1806 0364 01       		.uleb128 0x1
 1807 0365 9C       		.byte	0x9c
 1808 0366 98030000 		.4byte	0x398
 1809 036a 10       		.uleb128 0x10
 1810 036b F9020000 		.4byte	.LASF34
 1811 036f 01       		.byte	0x1
 1812 0370 D402     		.2byte	0x2d4
 1813 0372 81000000 		.4byte	0x81
 1814 0376 02       		.uleb128 0x2
 1815 0377 91       		.byte	0x91
 1816 0378 6C       		.sleb128 -20
 1817 0379 10       		.uleb128 0x10
 1818 037a 1D030000 		.4byte	.LASF51
 1819 037e 01       		.byte	0x1
 1820 037f D402     		.2byte	0x2d4
 1821 0381 8C000000 		.4byte	0x8c
 1822 0385 02       		.uleb128 0x2
 1823 0386 91       		.byte	0x91
 1824 0387 6A       		.sleb128 -22
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 48


 1825 0388 11       		.uleb128 0x11
 1826 0389 76010000 		.4byte	.LASF52
 1827 038d 01       		.byte	0x1
 1828 038e D602     		.2byte	0x2d6
 1829 0390 8C000000 		.4byte	0x8c
 1830 0394 02       		.uleb128 0x2
 1831 0395 91       		.byte	0x91
 1832 0396 76       		.sleb128 -10
 1833 0397 00       		.byte	0
 1834 0398 12       		.uleb128 0x12
 1835 0399 A8000000 		.4byte	.LASF53
 1836 039d 01       		.byte	0x1
 1837 039e 0A03     		.2byte	0x30a
 1838 03a0 97000000 		.4byte	0x97
 1839 03a4 00000000 		.4byte	.LFB19
 1840 03a8 98000000 		.4byte	.LFE19-.LFB19
 1841 03ac 01       		.uleb128 0x1
 1842 03ad 9C       		.byte	0x9c
 1843 03ae E0030000 		.4byte	0x3e0
 1844 03b2 10       		.uleb128 0x10
 1845 03b3 F9020000 		.4byte	.LASF34
 1846 03b7 01       		.byte	0x1
 1847 03b8 0A03     		.2byte	0x30a
 1848 03ba 81000000 		.4byte	0x81
 1849 03be 02       		.uleb128 0x2
 1850 03bf 91       		.byte	0x91
 1851 03c0 64       		.sleb128 -28
 1852 03c1 10       		.uleb128 0x10
 1853 03c2 1D030000 		.4byte	.LASF51
 1854 03c6 01       		.byte	0x1
 1855 03c7 0A03     		.2byte	0x30a
 1856 03c9 8C000000 		.4byte	0x8c
 1857 03cd 02       		.uleb128 0x2
 1858 03ce 91       		.byte	0x91
 1859 03cf 62       		.sleb128 -30
 1860 03d0 11       		.uleb128 0x11
 1861 03d1 1B010000 		.4byte	.LASF54
 1862 03d5 01       		.byte	0x1
 1863 03d6 0C03     		.2byte	0x30c
 1864 03d8 BB000000 		.4byte	0xbb
 1865 03dc 02       		.uleb128 0x2
 1866 03dd 91       		.byte	0x91
 1867 03de 68       		.sleb128 -24
 1868 03df 00       		.byte	0
 1869 03e0 12       		.uleb128 0x12
 1870 03e1 16000000 		.4byte	.LASF55
 1871 03e5 01       		.byte	0x1
 1872 03e6 3703     		.2byte	0x337
 1873 03e8 A2000000 		.4byte	0xa2
 1874 03ec 00000000 		.4byte	.LFB20
 1875 03f0 80000000 		.4byte	.LFE20-.LFB20
 1876 03f4 01       		.uleb128 0x1
 1877 03f5 9C       		.byte	0x9c
 1878 03f6 28040000 		.4byte	0x428
 1879 03fa 10       		.uleb128 0x10
 1880 03fb F9020000 		.4byte	.LASF34
 1881 03ff 01       		.byte	0x1
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 49


 1882 0400 3703     		.2byte	0x337
 1883 0402 81000000 		.4byte	0x81
 1884 0406 02       		.uleb128 0x2
 1885 0407 91       		.byte	0x91
 1886 0408 64       		.sleb128 -28
 1887 0409 10       		.uleb128 0x10
 1888 040a 1D030000 		.4byte	.LASF51
 1889 040e 01       		.byte	0x1
 1890 040f 3703     		.2byte	0x337
 1891 0411 8C000000 		.4byte	0x8c
 1892 0415 02       		.uleb128 0x2
 1893 0416 91       		.byte	0x91
 1894 0417 62       		.sleb128 -30
 1895 0418 11       		.uleb128 0x11
 1896 0419 43010000 		.4byte	.LASF56
 1897 041d 01       		.byte	0x1
 1898 041e 3903     		.2byte	0x339
 1899 0420 A2000000 		.4byte	0xa2
 1900 0424 02       		.uleb128 0x2
 1901 0425 91       		.byte	0x91
 1902 0426 6C       		.sleb128 -20
 1903 0427 00       		.byte	0
 1904 0428 0A       		.uleb128 0xa
 1905 0429 81000000 		.4byte	0x81
 1906 042d 38040000 		.4byte	0x438
 1907 0431 0B       		.uleb128 0xb
 1908 0432 DE000000 		.4byte	0xde
 1909 0436 01       		.byte	0x1
 1910 0437 00       		.byte	0
 1911 0438 09       		.uleb128 0x9
 1912 0439 03030000 		.4byte	.LASF57
 1913 043d 01       		.byte	0x1
 1914 043e 21       		.byte	0x21
 1915 043f 49040000 		.4byte	0x449
 1916 0443 05       		.uleb128 0x5
 1917 0444 03       		.byte	0x3
 1918 0445 00000000 		.4byte	ADC_channelsConfig
 1919 0449 0C       		.uleb128 0xc
 1920 044a 28040000 		.4byte	0x428
 1921 044e 15       		.uleb128 0x15
 1922 044f E9000000 		.4byte	.LASF58
 1923 0453 01       		.byte	0x1
 1924 0454 18       		.byte	0x18
 1925 0455 6B000000 		.4byte	0x6b
 1926 0459 05       		.uleb128 0x5
 1927 045a 03       		.byte	0x3
 1928 045b 00000000 		.4byte	ADC_initVar
 1929 045f 0A       		.uleb128 0xa
 1930 0460 8C000000 		.4byte	0x8c
 1931 0464 6F040000 		.4byte	0x46f
 1932 0468 0B       		.uleb128 0xb
 1933 0469 DE000000 		.4byte	0xde
 1934 046d 01       		.byte	0x1
 1935 046e 00       		.byte	0
 1936 046f 15       		.uleb128 0x15
 1937 0470 D5020000 		.4byte	.LASF59
 1938 0474 01       		.byte	0x1
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 50


 1939 0475 19       		.byte	0x19
 1940 0476 80040000 		.4byte	0x480
 1941 047a 05       		.uleb128 0x5
 1942 047b 03       		.byte	0x3
 1943 047c 00000000 		.4byte	ADC_offset
 1944 0480 06       		.uleb128 0x6
 1945 0481 5F040000 		.4byte	0x45f
 1946 0485 0A       		.uleb128 0xa
 1947 0486 97000000 		.4byte	0x97
 1948 048a 95040000 		.4byte	0x495
 1949 048e 0B       		.uleb128 0xb
 1950 048f DE000000 		.4byte	0xde
 1951 0493 01       		.byte	0x1
 1952 0494 00       		.byte	0
 1953 0495 15       		.uleb128 0x15
 1954 0496 BC000000 		.4byte	.LASF60
 1955 049a 01       		.byte	0x1
 1956 049b 1A       		.byte	0x1a
 1957 049c A6040000 		.4byte	0x4a6
 1958 04a0 05       		.uleb128 0x5
 1959 04a1 03       		.byte	0x3
 1960 04a2 00000000 		.4byte	ADC_countsPer10Volt
 1961 04a6 06       		.uleb128 0x6
 1962 04a7 85040000 		.4byte	0x485
 1963 04ab 00       		.byte	0
 1964              		.section	.debug_abbrev,"",%progbits
 1965              	.Ldebug_abbrev0:
 1966 0000 01       		.uleb128 0x1
 1967 0001 11       		.uleb128 0x11
 1968 0002 01       		.byte	0x1
 1969 0003 25       		.uleb128 0x25
 1970 0004 0E       		.uleb128 0xe
 1971 0005 13       		.uleb128 0x13
 1972 0006 0B       		.uleb128 0xb
 1973 0007 03       		.uleb128 0x3
 1974 0008 0E       		.uleb128 0xe
 1975 0009 1B       		.uleb128 0x1b
 1976 000a 0E       		.uleb128 0xe
 1977 000b 55       		.uleb128 0x55
 1978 000c 17       		.uleb128 0x17
 1979 000d 11       		.uleb128 0x11
 1980 000e 01       		.uleb128 0x1
 1981 000f 10       		.uleb128 0x10
 1982 0010 17       		.uleb128 0x17
 1983 0011 00       		.byte	0
 1984 0012 00       		.byte	0
 1985 0013 02       		.uleb128 0x2
 1986 0014 24       		.uleb128 0x24
 1987 0015 00       		.byte	0
 1988 0016 0B       		.uleb128 0xb
 1989 0017 0B       		.uleb128 0xb
 1990 0018 3E       		.uleb128 0x3e
 1991 0019 0B       		.uleb128 0xb
 1992 001a 03       		.uleb128 0x3
 1993 001b 0E       		.uleb128 0xe
 1994 001c 00       		.byte	0
 1995 001d 00       		.byte	0
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 51


 1996 001e 03       		.uleb128 0x3
 1997 001f 24       		.uleb128 0x24
 1998 0020 00       		.byte	0
 1999 0021 0B       		.uleb128 0xb
 2000 0022 0B       		.uleb128 0xb
 2001 0023 3E       		.uleb128 0x3e
 2002 0024 0B       		.uleb128 0xb
 2003 0025 03       		.uleb128 0x3
 2004 0026 08       		.uleb128 0x8
 2005 0027 00       		.byte	0
 2006 0028 00       		.byte	0
 2007 0029 04       		.uleb128 0x4
 2008 002a 16       		.uleb128 0x16
 2009 002b 00       		.byte	0
 2010 002c 03       		.uleb128 0x3
 2011 002d 0E       		.uleb128 0xe
 2012 002e 3A       		.uleb128 0x3a
 2013 002f 0B       		.uleb128 0xb
 2014 0030 3B       		.uleb128 0x3b
 2015 0031 0B       		.uleb128 0xb
 2016 0032 49       		.uleb128 0x49
 2017 0033 13       		.uleb128 0x13
 2018 0034 00       		.byte	0
 2019 0035 00       		.byte	0
 2020 0036 05       		.uleb128 0x5
 2021 0037 16       		.uleb128 0x16
 2022 0038 00       		.byte	0
 2023 0039 03       		.uleb128 0x3
 2024 003a 0E       		.uleb128 0xe
 2025 003b 3A       		.uleb128 0x3a
 2026 003c 0B       		.uleb128 0xb
 2027 003d 3B       		.uleb128 0x3b
 2028 003e 05       		.uleb128 0x5
 2029 003f 49       		.uleb128 0x49
 2030 0040 13       		.uleb128 0x13
 2031 0041 00       		.byte	0
 2032 0042 00       		.byte	0
 2033 0043 06       		.uleb128 0x6
 2034 0044 35       		.uleb128 0x35
 2035 0045 00       		.byte	0
 2036 0046 49       		.uleb128 0x49
 2037 0047 13       		.uleb128 0x13
 2038 0048 00       		.byte	0
 2039 0049 00       		.byte	0
 2040 004a 07       		.uleb128 0x7
 2041 004b 2E       		.uleb128 0x2e
 2042 004c 00       		.byte	0
 2043 004d 3F       		.uleb128 0x3f
 2044 004e 19       		.uleb128 0x19
 2045 004f 03       		.uleb128 0x3
 2046 0050 0E       		.uleb128 0xe
 2047 0051 3A       		.uleb128 0x3a
 2048 0052 0B       		.uleb128 0xb
 2049 0053 3B       		.uleb128 0x3b
 2050 0054 0B       		.uleb128 0xb
 2051 0055 27       		.uleb128 0x27
 2052 0056 19       		.uleb128 0x19
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 52


 2053 0057 11       		.uleb128 0x11
 2054 0058 01       		.uleb128 0x1
 2055 0059 12       		.uleb128 0x12
 2056 005a 06       		.uleb128 0x6
 2057 005b 40       		.uleb128 0x40
 2058 005c 18       		.uleb128 0x18
 2059 005d 9642     		.uleb128 0x2116
 2060 005f 19       		.uleb128 0x19
 2061 0060 00       		.byte	0
 2062 0061 00       		.byte	0
 2063 0062 08       		.uleb128 0x8
 2064 0063 2E       		.uleb128 0x2e
 2065 0064 01       		.byte	0x1
 2066 0065 3F       		.uleb128 0x3f
 2067 0066 19       		.uleb128 0x19
 2068 0067 03       		.uleb128 0x3
 2069 0068 0E       		.uleb128 0xe
 2070 0069 3A       		.uleb128 0x3a
 2071 006a 0B       		.uleb128 0xb
 2072 006b 3B       		.uleb128 0x3b
 2073 006c 0B       		.uleb128 0xb
 2074 006d 27       		.uleb128 0x27
 2075 006e 19       		.uleb128 0x19
 2076 006f 11       		.uleb128 0x11
 2077 0070 01       		.uleb128 0x1
 2078 0071 12       		.uleb128 0x12
 2079 0072 06       		.uleb128 0x6
 2080 0073 40       		.uleb128 0x40
 2081 0074 18       		.uleb128 0x18
 2082 0075 9642     		.uleb128 0x2116
 2083 0077 19       		.uleb128 0x19
 2084 0078 01       		.uleb128 0x1
 2085 0079 13       		.uleb128 0x13
 2086 007a 00       		.byte	0
 2087 007b 00       		.byte	0
 2088 007c 09       		.uleb128 0x9
 2089 007d 34       		.uleb128 0x34
 2090 007e 00       		.byte	0
 2091 007f 03       		.uleb128 0x3
 2092 0080 0E       		.uleb128 0xe
 2093 0081 3A       		.uleb128 0x3a
 2094 0082 0B       		.uleb128 0xb
 2095 0083 3B       		.uleb128 0x3b
 2096 0084 0B       		.uleb128 0xb
 2097 0085 49       		.uleb128 0x49
 2098 0086 13       		.uleb128 0x13
 2099 0087 02       		.uleb128 0x2
 2100 0088 18       		.uleb128 0x18
 2101 0089 00       		.byte	0
 2102 008a 00       		.byte	0
 2103 008b 0A       		.uleb128 0xa
 2104 008c 01       		.uleb128 0x1
 2105 008d 01       		.byte	0x1
 2106 008e 49       		.uleb128 0x49
 2107 008f 13       		.uleb128 0x13
 2108 0090 01       		.uleb128 0x1
 2109 0091 13       		.uleb128 0x13
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 53


 2110 0092 00       		.byte	0
 2111 0093 00       		.byte	0
 2112 0094 0B       		.uleb128 0xb
 2113 0095 21       		.uleb128 0x21
 2114 0096 00       		.byte	0
 2115 0097 49       		.uleb128 0x49
 2116 0098 13       		.uleb128 0x13
 2117 0099 2F       		.uleb128 0x2f
 2118 009a 0B       		.uleb128 0xb
 2119 009b 00       		.byte	0
 2120 009c 00       		.byte	0
 2121 009d 0C       		.uleb128 0xc
 2122 009e 26       		.uleb128 0x26
 2123 009f 00       		.byte	0
 2124 00a0 49       		.uleb128 0x49
 2125 00a1 13       		.uleb128 0x13
 2126 00a2 00       		.byte	0
 2127 00a3 00       		.byte	0
 2128 00a4 0D       		.uleb128 0xd
 2129 00a5 2E       		.uleb128 0x2e
 2130 00a6 00       		.byte	0
 2131 00a7 3F       		.uleb128 0x3f
 2132 00a8 19       		.uleb128 0x19
 2133 00a9 03       		.uleb128 0x3
 2134 00aa 0E       		.uleb128 0xe
 2135 00ab 3A       		.uleb128 0x3a
 2136 00ac 0B       		.uleb128 0xb
 2137 00ad 3B       		.uleb128 0x3b
 2138 00ae 05       		.uleb128 0x5
 2139 00af 27       		.uleb128 0x27
 2140 00b0 19       		.uleb128 0x19
 2141 00b1 11       		.uleb128 0x11
 2142 00b2 01       		.uleb128 0x1
 2143 00b3 12       		.uleb128 0x12
 2144 00b4 06       		.uleb128 0x6
 2145 00b5 40       		.uleb128 0x40
 2146 00b6 18       		.uleb128 0x18
 2147 00b7 9642     		.uleb128 0x2116
 2148 00b9 19       		.uleb128 0x19
 2149 00ba 00       		.byte	0
 2150 00bb 00       		.byte	0
 2151 00bc 0E       		.uleb128 0xe
 2152 00bd 2E       		.uleb128 0x2e
 2153 00be 00       		.byte	0
 2154 00bf 3F       		.uleb128 0x3f
 2155 00c0 19       		.uleb128 0x19
 2156 00c1 03       		.uleb128 0x3
 2157 00c2 0E       		.uleb128 0xe
 2158 00c3 3A       		.uleb128 0x3a
 2159 00c4 0B       		.uleb128 0xb
 2160 00c5 3B       		.uleb128 0x3b
 2161 00c6 05       		.uleb128 0x5
 2162 00c7 27       		.uleb128 0x27
 2163 00c8 19       		.uleb128 0x19
 2164 00c9 11       		.uleb128 0x11
 2165 00ca 01       		.uleb128 0x1
 2166 00cb 12       		.uleb128 0x12
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 54


 2167 00cc 06       		.uleb128 0x6
 2168 00cd 40       		.uleb128 0x40
 2169 00ce 18       		.uleb128 0x18
 2170 00cf 9742     		.uleb128 0x2117
 2171 00d1 19       		.uleb128 0x19
 2172 00d2 00       		.byte	0
 2173 00d3 00       		.byte	0
 2174 00d4 0F       		.uleb128 0xf
 2175 00d5 2E       		.uleb128 0x2e
 2176 00d6 01       		.byte	0x1
 2177 00d7 3F       		.uleb128 0x3f
 2178 00d8 19       		.uleb128 0x19
 2179 00d9 03       		.uleb128 0x3
 2180 00da 0E       		.uleb128 0xe
 2181 00db 3A       		.uleb128 0x3a
 2182 00dc 0B       		.uleb128 0xb
 2183 00dd 3B       		.uleb128 0x3b
 2184 00de 05       		.uleb128 0x5
 2185 00df 27       		.uleb128 0x27
 2186 00e0 19       		.uleb128 0x19
 2187 00e1 49       		.uleb128 0x49
 2188 00e2 13       		.uleb128 0x13
 2189 00e3 11       		.uleb128 0x11
 2190 00e4 01       		.uleb128 0x1
 2191 00e5 12       		.uleb128 0x12
 2192 00e6 06       		.uleb128 0x6
 2193 00e7 40       		.uleb128 0x40
 2194 00e8 18       		.uleb128 0x18
 2195 00e9 9742     		.uleb128 0x2117
 2196 00eb 19       		.uleb128 0x19
 2197 00ec 01       		.uleb128 0x1
 2198 00ed 13       		.uleb128 0x13
 2199 00ee 00       		.byte	0
 2200 00ef 00       		.byte	0
 2201 00f0 10       		.uleb128 0x10
 2202 00f1 05       		.uleb128 0x5
 2203 00f2 00       		.byte	0
 2204 00f3 03       		.uleb128 0x3
 2205 00f4 0E       		.uleb128 0xe
 2206 00f5 3A       		.uleb128 0x3a
 2207 00f6 0B       		.uleb128 0xb
 2208 00f7 3B       		.uleb128 0x3b
 2209 00f8 05       		.uleb128 0x5
 2210 00f9 49       		.uleb128 0x49
 2211 00fa 13       		.uleb128 0x13
 2212 00fb 02       		.uleb128 0x2
 2213 00fc 18       		.uleb128 0x18
 2214 00fd 00       		.byte	0
 2215 00fe 00       		.byte	0
 2216 00ff 11       		.uleb128 0x11
 2217 0100 34       		.uleb128 0x34
 2218 0101 00       		.byte	0
 2219 0102 03       		.uleb128 0x3
 2220 0103 0E       		.uleb128 0xe
 2221 0104 3A       		.uleb128 0x3a
 2222 0105 0B       		.uleb128 0xb
 2223 0106 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 55


 2224 0107 05       		.uleb128 0x5
 2225 0108 49       		.uleb128 0x49
 2226 0109 13       		.uleb128 0x13
 2227 010a 02       		.uleb128 0x2
 2228 010b 18       		.uleb128 0x18
 2229 010c 00       		.byte	0
 2230 010d 00       		.byte	0
 2231 010e 12       		.uleb128 0x12
 2232 010f 2E       		.uleb128 0x2e
 2233 0110 01       		.byte	0x1
 2234 0111 3F       		.uleb128 0x3f
 2235 0112 19       		.uleb128 0x19
 2236 0113 03       		.uleb128 0x3
 2237 0114 0E       		.uleb128 0xe
 2238 0115 3A       		.uleb128 0x3a
 2239 0116 0B       		.uleb128 0xb
 2240 0117 3B       		.uleb128 0x3b
 2241 0118 05       		.uleb128 0x5
 2242 0119 27       		.uleb128 0x27
 2243 011a 19       		.uleb128 0x19
 2244 011b 49       		.uleb128 0x49
 2245 011c 13       		.uleb128 0x13
 2246 011d 11       		.uleb128 0x11
 2247 011e 01       		.uleb128 0x1
 2248 011f 12       		.uleb128 0x12
 2249 0120 06       		.uleb128 0x6
 2250 0121 40       		.uleb128 0x40
 2251 0122 18       		.uleb128 0x18
 2252 0123 9642     		.uleb128 0x2116
 2253 0125 19       		.uleb128 0x19
 2254 0126 01       		.uleb128 0x1
 2255 0127 13       		.uleb128 0x13
 2256 0128 00       		.byte	0
 2257 0129 00       		.byte	0
 2258 012a 13       		.uleb128 0x13
 2259 012b 2E       		.uleb128 0x2e
 2260 012c 01       		.byte	0x1
 2261 012d 3F       		.uleb128 0x3f
 2262 012e 19       		.uleb128 0x19
 2263 012f 03       		.uleb128 0x3
 2264 0130 0E       		.uleb128 0xe
 2265 0131 3A       		.uleb128 0x3a
 2266 0132 0B       		.uleb128 0xb
 2267 0133 3B       		.uleb128 0x3b
 2268 0134 05       		.uleb128 0x5
 2269 0135 27       		.uleb128 0x27
 2270 0136 19       		.uleb128 0x19
 2271 0137 11       		.uleb128 0x11
 2272 0138 01       		.uleb128 0x1
 2273 0139 12       		.uleb128 0x12
 2274 013a 06       		.uleb128 0x6
 2275 013b 40       		.uleb128 0x40
 2276 013c 18       		.uleb128 0x18
 2277 013d 9742     		.uleb128 0x2117
 2278 013f 19       		.uleb128 0x19
 2279 0140 01       		.uleb128 0x1
 2280 0141 13       		.uleb128 0x13
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 56


 2281 0142 00       		.byte	0
 2282 0143 00       		.byte	0
 2283 0144 14       		.uleb128 0x14
 2284 0145 2E       		.uleb128 0x2e
 2285 0146 01       		.byte	0x1
 2286 0147 3F       		.uleb128 0x3f
 2287 0148 19       		.uleb128 0x19
 2288 0149 03       		.uleb128 0x3
 2289 014a 0E       		.uleb128 0xe
 2290 014b 3A       		.uleb128 0x3a
 2291 014c 0B       		.uleb128 0xb
 2292 014d 3B       		.uleb128 0x3b
 2293 014e 05       		.uleb128 0x5
 2294 014f 27       		.uleb128 0x27
 2295 0150 19       		.uleb128 0x19
 2296 0151 11       		.uleb128 0x11
 2297 0152 01       		.uleb128 0x1
 2298 0153 12       		.uleb128 0x12
 2299 0154 06       		.uleb128 0x6
 2300 0155 40       		.uleb128 0x40
 2301 0156 18       		.uleb128 0x18
 2302 0157 9642     		.uleb128 0x2116
 2303 0159 19       		.uleb128 0x19
 2304 015a 01       		.uleb128 0x1
 2305 015b 13       		.uleb128 0x13
 2306 015c 00       		.byte	0
 2307 015d 00       		.byte	0
 2308 015e 15       		.uleb128 0x15
 2309 015f 34       		.uleb128 0x34
 2310 0160 00       		.byte	0
 2311 0161 03       		.uleb128 0x3
 2312 0162 0E       		.uleb128 0xe
 2313 0163 3A       		.uleb128 0x3a
 2314 0164 0B       		.uleb128 0xb
 2315 0165 3B       		.uleb128 0x3b
 2316 0166 0B       		.uleb128 0xb
 2317 0167 49       		.uleb128 0x49
 2318 0168 13       		.uleb128 0x13
 2319 0169 3F       		.uleb128 0x3f
 2320 016a 19       		.uleb128 0x19
 2321 016b 02       		.uleb128 0x2
 2322 016c 18       		.uleb128 0x18
 2323 016d 00       		.byte	0
 2324 016e 00       		.byte	0
 2325 016f 00       		.byte	0
 2326              		.section	.debug_aranges,"",%progbits
 2327 0000 AC000000 		.4byte	0xac
 2328 0004 0200     		.2byte	0x2
 2329 0006 00000000 		.4byte	.Ldebug_info0
 2330 000a 04       		.byte	0x4
 2331 000b 00       		.byte	0
 2332 000c 0000     		.2byte	0
 2333 000e 0000     		.2byte	0
 2334 0010 00000000 		.4byte	.LFB2
 2335 0014 24000000 		.4byte	.LFE2-.LFB2
 2336 0018 00000000 		.4byte	.LFB3
 2337 001c 64020000 		.4byte	.LFE3-.LFB3
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 57


 2338 0020 00000000 		.4byte	.LFB4
 2339 0024 38000000 		.4byte	.LFE4-.LFB4
 2340 0028 00000000 		.4byte	.LFB5
 2341 002c 18000000 		.4byte	.LFE5-.LFB5
 2342 0030 00000000 		.4byte	.LFB6
 2343 0034 14000000 		.4byte	.LFE6-.LFB6
 2344 0038 00000000 		.4byte	.LFB7
 2345 003c 08000000 		.4byte	.LFE7-.LFB7
 2346 0040 00000000 		.4byte	.LFB8
 2347 0044 7C000000 		.4byte	.LFE8-.LFB8
 2348 0048 00000000 		.4byte	.LFB9
 2349 004c 4C000000 		.4byte	.LFE9-.LFB9
 2350 0050 00000000 		.4byte	.LFB10
 2351 0054 1C000000 		.4byte	.LFE10-.LFB10
 2352 0058 00000000 		.4byte	.LFB11
 2353 005c 1C000000 		.4byte	.LFE11-.LFB11
 2354 0060 00000000 		.4byte	.LFB12
 2355 0064 30000000 		.4byte	.LFE12-.LFB12
 2356 0068 00000000 		.4byte	.LFB13
 2357 006c 2C000000 		.4byte	.LFE13-.LFB13
 2358 0070 00000000 		.4byte	.LFB14
 2359 0074 1C000000 		.4byte	.LFE14-.LFB14
 2360 0078 00000000 		.4byte	.LFB15
 2361 007c 1C000000 		.4byte	.LFE15-.LFB15
 2362 0080 00000000 		.4byte	.LFB16
 2363 0084 30000000 		.4byte	.LFE16-.LFB16
 2364 0088 00000000 		.4byte	.LFB17
 2365 008c 2C000000 		.4byte	.LFE17-.LFB17
 2366 0090 00000000 		.4byte	.LFB18
 2367 0094 A4000000 		.4byte	.LFE18-.LFB18
 2368 0098 00000000 		.4byte	.LFB19
 2369 009c 98000000 		.4byte	.LFE19-.LFB19
 2370 00a0 00000000 		.4byte	.LFB20
 2371 00a4 80000000 		.4byte	.LFE20-.LFB20
 2372 00a8 00000000 		.4byte	0
 2373 00ac 00000000 		.4byte	0
 2374              		.section	.debug_ranges,"",%progbits
 2375              	.Ldebug_ranges0:
 2376 0000 00000000 		.4byte	.LFB2
 2377 0004 24000000 		.4byte	.LFE2
 2378 0008 00000000 		.4byte	.LFB3
 2379 000c 64020000 		.4byte	.LFE3
 2380 0010 00000000 		.4byte	.LFB4
 2381 0014 38000000 		.4byte	.LFE4
 2382 0018 00000000 		.4byte	.LFB5
 2383 001c 18000000 		.4byte	.LFE5
 2384 0020 00000000 		.4byte	.LFB6
 2385 0024 14000000 		.4byte	.LFE6
 2386 0028 00000000 		.4byte	.LFB7
 2387 002c 08000000 		.4byte	.LFE7
 2388 0030 00000000 		.4byte	.LFB8
 2389 0034 7C000000 		.4byte	.LFE8
 2390 0038 00000000 		.4byte	.LFB9
 2391 003c 4C000000 		.4byte	.LFE9
 2392 0040 00000000 		.4byte	.LFB10
 2393 0044 1C000000 		.4byte	.LFE10
 2394 0048 00000000 		.4byte	.LFB11
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 58


 2395 004c 1C000000 		.4byte	.LFE11
 2396 0050 00000000 		.4byte	.LFB12
 2397 0054 30000000 		.4byte	.LFE12
 2398 0058 00000000 		.4byte	.LFB13
 2399 005c 2C000000 		.4byte	.LFE13
 2400 0060 00000000 		.4byte	.LFB14
 2401 0064 1C000000 		.4byte	.LFE14
 2402 0068 00000000 		.4byte	.LFB15
 2403 006c 1C000000 		.4byte	.LFE15
 2404 0070 00000000 		.4byte	.LFB16
 2405 0074 30000000 		.4byte	.LFE16
 2406 0078 00000000 		.4byte	.LFB17
 2407 007c 2C000000 		.4byte	.LFE17
 2408 0080 00000000 		.4byte	.LFB18
 2409 0084 A4000000 		.4byte	.LFE18
 2410 0088 00000000 		.4byte	.LFB19
 2411 008c 98000000 		.4byte	.LFE19
 2412 0090 00000000 		.4byte	.LFB20
 2413 0094 80000000 		.4byte	.LFE20
 2414 0098 00000000 		.4byte	0
 2415 009c 00000000 		.4byte	0
 2416              		.section	.debug_line,"",%progbits
 2417              	.Ldebug_line0:
 2418 0000 AC020000 		.section	.debug_str,"MS",%progbits,1
 2418      02004200 
 2418      00000201 
 2418      FB0E0D00 
 2418      01010101 
 2419              	.LASF10:
 2420 0000 75696E74 		.ascii	"uint16\000"
 2420      313600
 2421              	.LASF49:
 2422 0007 61646347 		.ascii	"adcGain\000"
 2422      61696E00 
 2423              	.LASF23:
 2424 000f 636F756E 		.ascii	"counts\000"
 2424      747300
 2425              	.LASF55:
 2426 0016 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2426      436F756E 
 2426      7473546F 
 2426      5F566F6C 
 2426      747300
 2427              	.LASF36:
 2428 0029 4144435F 		.ascii	"ADC_Init\000"
 2428      496E6974 
 2428      00
 2429              	.LASF7:
 2430 0032 6C6F6E67 		.ascii	"long long unsigned int\000"
 2430      206C6F6E 
 2430      6720756E 
 2430      7369676E 
 2430      65642069 
 2431              	.LASF24:
 2432 0049 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2432      496E7075 
 2432      7473506C 
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 59


 2432      6163656D 
 2432      656E7400 
 2433              	.LASF28:
 2434 005d 4144435F 		.ascii	"ADC_StartConvert\000"
 2434      53746172 
 2434      74436F6E 
 2434      76657274 
 2434      00
 2435              	.LASF6:
 2436 006e 6C6F6E67 		.ascii	"long long int\000"
 2436      206C6F6E 
 2436      6720696E 
 2436      7400
 2437              	.LASF0:
 2438 007c 7369676E 		.ascii	"signed char\000"
 2438      65642063 
 2438      68617200 
 2439              	.LASF30:
 2440 0088 73746174 		.ascii	"status\000"
 2440      757300
 2441              	.LASF13:
 2442 008f 696E7433 		.ascii	"int32\000"
 2442      3200
 2443              	.LASF25:
 2444 0095 4144435F 		.ascii	"ADC_Start\000"
 2444      53746172 
 2444      7400
 2445              	.LASF4:
 2446 009f 6C6F6E67 		.ascii	"long int\000"
 2446      20696E74 
 2446      00
 2447              	.LASF53:
 2448 00a8 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2448      436F756E 
 2448      7473546F 
 2448      5F75566F 
 2448      6C747300 
 2449              	.LASF60:
 2450 00bc 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2450      636F756E 
 2450      74735065 
 2450      72313056 
 2450      6F6C7400 
 2451              	.LASF9:
 2452 00d0 75696E74 		.ascii	"uint8\000"
 2452      3800
 2453              	.LASF16:
 2454 00d6 646F7562 		.ascii	"double\000"
 2454      6C6500
 2455              	.LASF11:
 2456 00dd 75696E74 		.ascii	"uint32\000"
 2456      333200
 2457              	.LASF38:
 2458 00e4 6D61736B 		.ascii	"mask\000"
 2458      00
 2459              	.LASF58:
 2460 00e9 4144435F 		.ascii	"ADC_initVar\000"
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 60


 2460      696E6974 
 2460      56617200 
 2461              	.LASF33:
 2462 00f5 7265744D 		.ascii	"retMode\000"
 2462      6F646500 
 2463              	.LASF44:
 2464 00fd 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2464      5365744C 
 2464      696D6974 
 2464      4D61736B 
 2464      00
 2465              	.LASF8:
 2466 010e 756E7369 		.ascii	"unsigned int\000"
 2466      676E6564 
 2466      20696E74 
 2466      00
 2467              	.LASF54:
 2468 011b 75566F6C 		.ascii	"uVolts\000"
 2468      747300
 2469              	.LASF5:
 2470 0122 6C6F6E67 		.ascii	"long unsigned int\000"
 2470      20756E73 
 2470      69676E65 
 2470      6420696E 
 2470      7400
 2471              	.LASF45:
 2472 0134 4144435F 		.ascii	"ADC_SetSatMask\000"
 2472      53657453 
 2472      61744D61 
 2472      736B00
 2473              	.LASF56:
 2474 0143 766F6C74 		.ascii	"volts\000"
 2474      7300
 2475              	.LASF22:
 2476 0149 746D7052 		.ascii	"tmpRegVal\000"
 2476      65675661 
 2476      6C00
 2477              	.LASF3:
 2478 0153 73686F72 		.ascii	"short unsigned int\000"
 2478      7420756E 
 2478      7369676E 
 2478      65642069 
 2478      6E7400
 2479              	.LASF29:
 2480 0166 4144435F 		.ascii	"ADC_StopConvert\000"
 2480      53746F70 
 2480      436F6E76 
 2480      65727400 
 2481              	.LASF52:
 2482 0176 6D566F6C 		.ascii	"mVolts\000"
 2482      747300
 2483              	.LASF19:
 2484 017d 72656733 		.ascii	"reg32\000"
 2484      3200
 2485              	.LASF14:
 2486 0183 666C6F61 		.ascii	"float32\000"
 2486      74333200 
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 61


 2487              	.LASF20:
 2488 018b 73697A65 		.ascii	"sizetype\000"
 2488      74797065 
 2488      00
 2489              	.LASF41:
 2490 0194 6C6F774C 		.ascii	"lowLimit\000"
 2490      696D6974 
 2490      00
 2491              	.LASF42:
 2492 019d 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2492      53657448 
 2492      6967684C 
 2492      696D6974 
 2492      00
 2493              	.LASF39:
 2494 01ae 4144435F 		.ascii	"ADC_EnableInjection\000"
 2494      456E6162 
 2494      6C65496E 
 2494      6A656374 
 2494      696F6E00 
 2495              	.LASF31:
 2496 01c2 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2496      4973456E 
 2496      64436F6E 
 2496      76657273 
 2496      696F6E00 
 2497              	.LASF17:
 2498 01d6 696E7436 		.ascii	"int64\000"
 2498      3400
 2499              	.LASF37:
 2500 01dc 4144435F 		.ascii	"ADC_SetChanMask\000"
 2500      53657443 
 2500      68616E4D 
 2500      61736B00 
 2501              	.LASF48:
 2502 01ec 4144435F 		.ascii	"ADC_SetGain\000"
 2502      53657447 
 2502      61696E00 
 2503              	.LASF15:
 2504 01f8 666C6F61 		.ascii	"float\000"
 2504      7400
 2505              	.LASF61:
 2506 01fe 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2506      4320342E 
 2506      382E3420 
 2506      32303134 
 2506      30353236 
 2507 0231 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2507      20726576 
 2507      6973696F 
 2507      6E203231 
 2507      31333538 
 2508 0264 30202D66 		.ascii	"0 -ffunction-sections\000"
 2508      66756E63 
 2508      74696F6E 
 2508      2D736563 
 2508      74696F6E 
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 62


 2509              	.LASF43:
 2510 027a 68696768 		.ascii	"highLimit\000"
 2510      4C696D69 
 2510      7400
 2511              	.LASF50:
 2512 0284 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2512      436F756E 
 2512      7473546F 
 2512      5F6D566F 
 2512      6C747300 
 2513              	.LASF40:
 2514 0298 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2514      5365744C 
 2514      6F774C69 
 2514      6D697400 
 2515              	.LASF62:
 2516 02a8 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2516      6E657261 
 2516      7465645F 
 2516      536F7572 
 2516      63655C50 
 2517              	.LASF1:
 2518 02c7 756E7369 		.ascii	"unsigned char\000"
 2518      676E6564 
 2518      20636861 
 2518      7200
 2519              	.LASF59:
 2520 02d5 4144435F 		.ascii	"ADC_offset\000"
 2520      6F666673 
 2520      657400
 2521              	.LASF2:
 2522 02e0 73686F72 		.ascii	"short int\000"
 2522      7420696E 
 2522      7400
 2523              	.LASF27:
 2524 02ea 4144435F 		.ascii	"ADC_Stop\000"
 2524      53746F70 
 2524      00
 2525              	.LASF21:
 2526 02f3 63684E75 		.ascii	"chNum\000"
 2526      6D00
 2527              	.LASF34:
 2528 02f9 6368616E 		.ascii	"chan\000"
 2528      00
 2529              	.LASF18:
 2530 02fe 63686172 		.ascii	"char\000"
 2530      00
 2531              	.LASF57:
 2532 0303 4144435F 		.ascii	"ADC_channelsConfig\000"
 2532      6368616E 
 2532      6E656C73 
 2532      436F6E66 
 2532      696700
 2533              	.LASF47:
 2534 0316 6F666673 		.ascii	"offset\000"
 2534      657400
 2535              	.LASF51:
ARM GAS  C:\Users\Zachary\AppData\Local\Temp\ccrWbHoB.s 			page 63


 2536 031d 61646343 		.ascii	"adcCounts\000"
 2536      6F756E74 
 2536      7300
 2537              	.LASF26:
 2538 0327 4144435F 		.ascii	"ADC_Enable\000"
 2538      456E6162 
 2538      6C6500
 2539              	.LASF12:
 2540 0332 696E7431 		.ascii	"int16\000"
 2540      3600
 2541              	.LASF46:
 2542 0338 4144435F 		.ascii	"ADC_SetOffset\000"
 2542      5365744F 
 2542      66667365 
 2542      7400
 2543              	.LASF63:
 2544 0346 433A5C55 		.ascii	"C:\\Users\\Zachary\\Desktop\\embedded\\Ozturk Lab -"
 2544      73657273 
 2544      5C5A6163 
 2544      68617279 
 2544      5C446573 
 2545 0374 2035202D 		.ascii	" 5 - Rev 1\\Design03\\BLE_Temperature_Measurement01"
 2545      20526576 
 2545      20315C44 
 2545      65736967 
 2545      6E30335C 
 2546 03a5 2E637964 		.ascii	".cydsn\000"
 2546      736E00
 2547              	.LASF35:
 2548 03ac 72657375 		.ascii	"result\000"
 2548      6C7400
 2549              	.LASF32:
 2550 03b3 4144435F 		.ascii	"ADC_GetResult16\000"
 2550      47657452 
 2550      6573756C 
 2550      74313600 
 2551              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
